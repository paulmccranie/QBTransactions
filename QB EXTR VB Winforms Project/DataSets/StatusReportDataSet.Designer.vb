'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("StatusReportDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class StatusReportDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCompany As CompanyDataTable
    
    Private tableCompanyAssessment As CompanyAssessmentDataTable
    
    Private tablermServiceItem As rmServiceItemDataTable
    
    Private tableSIAudit As SIAuditDataTable
    
    Private tableStateAssessment As StateAssessmentDataTable
    
    Private tablePresidentEmailAddress As PresidentEmailAddressDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Company")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyDataTable(ds.Tables("Company")))
            End If
            If (Not (ds.Tables("CompanyAssessment")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyAssessmentDataTable(ds.Tables("CompanyAssessment")))
            End If
            If (Not (ds.Tables("rmServiceItem")) Is Nothing) Then
                MyBase.Tables.Add(New rmServiceItemDataTable(ds.Tables("rmServiceItem")))
            End If
            If (Not (ds.Tables("SIAudit")) Is Nothing) Then
                MyBase.Tables.Add(New SIAuditDataTable(ds.Tables("SIAudit")))
            End If
            If (Not (ds.Tables("StateAssessment")) Is Nothing) Then
                MyBase.Tables.Add(New StateAssessmentDataTable(ds.Tables("StateAssessment")))
            End If
            If (Not (ds.Tables("PresidentEmailAddress")) Is Nothing) Then
                MyBase.Tables.Add(New PresidentEmailAddressDataTable(ds.Tables("PresidentEmailAddress")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Company() As CompanyDataTable
        Get
            Return Me.tableCompany
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompanyAssessment() As CompanyAssessmentDataTable
        Get
            Return Me.tableCompanyAssessment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rmServiceItem() As rmServiceItemDataTable
        Get
            Return Me.tablermServiceItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SIAudit() As SIAuditDataTable
        Get
            Return Me.tableSIAudit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StateAssessment() As StateAssessmentDataTable
        Get
            Return Me.tableStateAssessment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PresidentEmailAddress() As PresidentEmailAddressDataTable
        Get
            Return Me.tablePresidentEmailAddress
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As StatusReportDataSet = CType(MyBase.Clone,StatusReportDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Company")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyDataTable(ds.Tables("Company")))
            End If
            If (Not (ds.Tables("CompanyAssessment")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyAssessmentDataTable(ds.Tables("CompanyAssessment")))
            End If
            If (Not (ds.Tables("rmServiceItem")) Is Nothing) Then
                MyBase.Tables.Add(New rmServiceItemDataTable(ds.Tables("rmServiceItem")))
            End If
            If (Not (ds.Tables("SIAudit")) Is Nothing) Then
                MyBase.Tables.Add(New SIAuditDataTable(ds.Tables("SIAudit")))
            End If
            If (Not (ds.Tables("StateAssessment")) Is Nothing) Then
                MyBase.Tables.Add(New StateAssessmentDataTable(ds.Tables("StateAssessment")))
            End If
            If (Not (ds.Tables("PresidentEmailAddress")) Is Nothing) Then
                MyBase.Tables.Add(New PresidentEmailAddressDataTable(ds.Tables("PresidentEmailAddress")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCompany = CType(MyBase.Tables("Company"),CompanyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompany) Is Nothing) Then
                Me.tableCompany.InitVars
            End If
        End If
        Me.tableCompanyAssessment = CType(MyBase.Tables("CompanyAssessment"),CompanyAssessmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompanyAssessment) Is Nothing) Then
                Me.tableCompanyAssessment.InitVars
            End If
        End If
        Me.tablermServiceItem = CType(MyBase.Tables("rmServiceItem"),rmServiceItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablermServiceItem) Is Nothing) Then
                Me.tablermServiceItem.InitVars
            End If
        End If
        Me.tableSIAudit = CType(MyBase.Tables("SIAudit"),SIAuditDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSIAudit) Is Nothing) Then
                Me.tableSIAudit.InitVars
            End If
        End If
        Me.tableStateAssessment = CType(MyBase.Tables("StateAssessment"),StateAssessmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStateAssessment) Is Nothing) Then
                Me.tableStateAssessment.InitVars
            End If
        End If
        Me.tablePresidentEmailAddress = CType(MyBase.Tables("PresidentEmailAddress"),PresidentEmailAddressDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePresidentEmailAddress) Is Nothing) Then
                Me.tablePresidentEmailAddress.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "StatusReportDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/StatusReportDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCompany = New CompanyDataTable
        MyBase.Tables.Add(Me.tableCompany)
        Me.tableCompanyAssessment = New CompanyAssessmentDataTable
        MyBase.Tables.Add(Me.tableCompanyAssessment)
        Me.tablermServiceItem = New rmServiceItemDataTable
        MyBase.Tables.Add(Me.tablermServiceItem)
        Me.tableSIAudit = New SIAuditDataTable
        MyBase.Tables.Add(Me.tableSIAudit)
        Me.tableStateAssessment = New StateAssessmentDataTable
        MyBase.Tables.Add(Me.tableStateAssessment)
        Me.tablePresidentEmailAddress = New PresidentEmailAddressDataTable
        MyBase.Tables.Add(Me.tablePresidentEmailAddress)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCompany() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCompanyAssessment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializermServiceItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSIAudit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStateAssessment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePresidentEmailAddress() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As StatusReportDataSet = New StatusReportDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CompanyRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanyRowChangeEvent)
    
    Public Delegate Sub CompanyAssessmentRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanyAssessmentRowChangeEvent)
    
    Public Delegate Sub rmServiceItemRowChangeEventHandler(ByVal sender As Object, ByVal e As rmServiceItemRowChangeEvent)
    
    Public Delegate Sub SIAuditRowChangeEventHandler(ByVal sender As Object, ByVal e As SIAuditRowChangeEvent)
    
    Public Delegate Sub StateAssessmentRowChangeEventHandler(ByVal sender As Object, ByVal e As StateAssessmentRowChangeEvent)
    
    Public Delegate Sub PresidentEmailAddressRowChangeEventHandler(ByVal sender As Object, ByVal e As PresidentEmailAddressRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CompanyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columncustID As Global.System.Data.DataColumn
        
        Private columnbizname As Global.System.Data.DataColumn
        
        Private columndba As Global.System.Data.DataColumn
        
        Private _columnprimary_street As Global.System.Data.DataColumn
        
        Private _columnprimary_street2 As Global.System.Data.DataColumn
        
        Private _columnprimary_city As Global.System.Data.DataColumn
        
        Private _columnprimary_state As Global.System.Data.DataColumn
        
        Private _columnprimary_zip As Global.System.Data.DataColumn
        
        Private _columnprimary_phone As Global.System.Data.DataColumn
        
        Private _columnprimary_fax As Global.System.Data.DataColumn
        
        Private _columnprimary_email As Global.System.Data.DataColumn
        
        Private _columnprimary_manager As Global.System.Data.DataColumn
        
        Private _columnprimary_contact As Global.System.Data.DataColumn
        
        Private _columnbiz_type As Global.System.Data.DataColumn
        
        Private _columnPres_name As Global.System.Data.DataColumn
        
        Private columnnotary1 As Global.System.Data.DataColumn
        
        Private columnnotary2 As Global.System.Data.DataColumn
        
        Private columnnotary3 As Global.System.Data.DataColumn
        
        Private _columnduration_of_company As Global.System.Data.DataColumn
        
        Private _columnpercent_biz_retail As Global.System.Data.DataColumn
        
        Private _columnpercent_biz_commercial As Global.System.Data.DataColumn
        
        Private _columnstock_par_value As Global.System.Data.DataColumn
        
        Private _columnstates_to_license As Global.System.Data.DataColumn
        
        Private _column800_ As Global.System.Data.DataColumn
        
        Private columncounty As Global.System.Data.DataColumn
        
        Private columnstockclass As Global.System.Data.DataColumn
        
        Private columnstockseries As Global.System.Data.DataColumn
        
        Private _columnstock_authorized As Global.System.Data.DataColumn
        
        Private _columnstock_issued As Global.System.Data.DataColumn
        
        Private columnAssignedTo As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnIsArchived As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        Private columnHasAuditProblem As Global.System.Data.DataColumn
        
        Private columnReqPasswords As Global.System.Data.DataColumn
        
        Private columnReportsPath As Global.System.Data.DataColumn
        
        Private columnArchivesPath As Global.System.Data.DataColumn
        
        Private columnDemoDeadline As Global.System.Data.DataColumn
        
        Private columnNumAllowed As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Company"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property biznameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbizname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dbaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_streetColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_street
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_street2Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_street2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_cityColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_city
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_stateColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_state
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_zipColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_zip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_phone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_fax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_managerColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_manager
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_contactColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_contact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _biz_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnbiz_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Pres_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPres_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notary1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotary1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notary2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotary2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notary3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotary3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _duration_of_companyColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnduration_of_company
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _percent_biz_retailColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpercent_biz_retail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _percent_biz_commercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpercent_biz_commercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _stock_par_valueColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstock_par_value
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _states_to_licenseColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstates_to_license
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _800_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column800_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncounty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockclassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockclass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockseriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockseries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _stock_authorizedColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstock_authorized
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _stock_issuedColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstock_issued
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignedToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignedTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsArchivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsArchived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HasAuditProblemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHasAuditProblem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReqPasswordsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReqPasswords
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReportsPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportsPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArchivesPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchivesPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemoDeadlineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemoDeadline
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAllowedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAllowed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanyRow
            Get
                Return CType(Me.Rows(index),CompanyRow)
            End Get
        End Property
        
        Public Event CompanyRowChanging As CompanyRowChangeEventHandler
        
        Public Event CompanyRowChanged As CompanyRowChangeEventHandler
        
        Public Event CompanyRowDeleting As CompanyRowChangeEventHandler
        
        Public Event CompanyRowDeleted As CompanyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCompanyRow(ByVal row As CompanyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCompanyRow( _
                    ByVal ID As Integer,  _
                    ByVal bizname As String,  _
                    ByVal dba As String,  _
                    ByVal _primary_street As String,  _
                    ByVal _primary_street2 As String,  _
                    ByVal _primary_city As String,  _
                    ByVal _primary_state As String,  _
                    ByVal _primary_zip As String,  _
                    ByVal _primary_phone As String,  _
                    ByVal _primary_fax As String,  _
                    ByVal _primary_email As String,  _
                    ByVal _primary_manager As String,  _
                    ByVal _primary_contact As String,  _
                    ByVal _biz_type As String,  _
                    ByVal _Pres_name As String,  _
                    ByVal notary1 As String,  _
                    ByVal notary2 As String,  _
                    ByVal notary3 As String,  _
                    ByVal _duration_of_company As String,  _
                    ByVal _percent_biz_retail As Integer,  _
                    ByVal _percent_biz_commercial As Integer,  _
                    ByVal _stock_par_value As String,  _
                    ByVal _states_to_license As String,  _
                    ByVal _800_ As String,  _
                    ByVal county As String,  _
                    ByVal stockclass As String,  _
                    ByVal stockseries As String,  _
                    ByVal _stock_authorized As String,  _
                    ByVal _stock_issued As String,  _
                    ByVal AssignedTo As String,  _
                    ByVal Status As String,  _
                    ByVal IsArchived As Boolean,  _
                    ByVal DateCreated As Date,  _
                    ByVal HasAuditProblem As Boolean,  _
                    ByVal ReqPasswords As Boolean,  _
                    ByVal ReportsPath As String,  _
                    ByVal ArchivesPath As String,  _
                    ByVal DemoDeadline As Date,  _
                    ByVal NumAllowed As Integer) As CompanyRow
            Dim rowCompanyRow As CompanyRow = CType(Me.NewRow,CompanyRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, bizname, dba, _primary_street, _primary_street2, _primary_city, _primary_state, _primary_zip, _primary_phone, _primary_fax, _primary_email, _primary_manager, _primary_contact, _biz_type, _Pres_name, notary1, notary2, notary3, _duration_of_company, _percent_biz_retail, _percent_biz_commercial, _stock_par_value, _states_to_license, _800_, county, stockclass, stockseries, _stock_authorized, _stock_issued, AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem, ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, NumAllowed}
            rowCompanyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompanyRow)
            Return rowCompanyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustID(ByVal custID As Integer) As CompanyRow
            Return CType(Me.Rows.Find(New Object() {custID}),CompanyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CompanyDataTable = CType(MyBase.Clone,CompanyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CompanyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columncustID = MyBase.Columns("custID")
            Me.columnbizname = MyBase.Columns("bizname")
            Me.columndba = MyBase.Columns("dba")
            Me._columnprimary_street = MyBase.Columns("primary-street")
            Me._columnprimary_street2 = MyBase.Columns("primary-street2")
            Me._columnprimary_city = MyBase.Columns("primary-city")
            Me._columnprimary_state = MyBase.Columns("primary-state")
            Me._columnprimary_zip = MyBase.Columns("primary-zip")
            Me._columnprimary_phone = MyBase.Columns("primary-phone")
            Me._columnprimary_fax = MyBase.Columns("primary-fax")
            Me._columnprimary_email = MyBase.Columns("primary-email")
            Me._columnprimary_manager = MyBase.Columns("primary-manager")
            Me._columnprimary_contact = MyBase.Columns("primary-contact")
            Me._columnbiz_type = MyBase.Columns("biz-type")
            Me._columnPres_name = MyBase.Columns("Pres-name")
            Me.columnnotary1 = MyBase.Columns("notary1")
            Me.columnnotary2 = MyBase.Columns("notary2")
            Me.columnnotary3 = MyBase.Columns("notary3")
            Me._columnduration_of_company = MyBase.Columns("duration-of-company")
            Me._columnpercent_biz_retail = MyBase.Columns("percent-biz-retail")
            Me._columnpercent_biz_commercial = MyBase.Columns("percent-biz-commercial")
            Me._columnstock_par_value = MyBase.Columns("stock-par-value")
            Me._columnstates_to_license = MyBase.Columns("states-to-license")
            Me._column800_ = MyBase.Columns("800#")
            Me.columncounty = MyBase.Columns("county")
            Me.columnstockclass = MyBase.Columns("stockclass")
            Me.columnstockseries = MyBase.Columns("stockseries")
            Me._columnstock_authorized = MyBase.Columns("stock#authorized")
            Me._columnstock_issued = MyBase.Columns("stock#issued")
            Me.columnAssignedTo = MyBase.Columns("AssignedTo")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnIsArchived = MyBase.Columns("IsArchived")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
            Me.columnHasAuditProblem = MyBase.Columns("HasAuditProblem")
            Me.columnReqPasswords = MyBase.Columns("ReqPasswords")
            Me.columnReportsPath = MyBase.Columns("ReportsPath")
            Me.columnArchivesPath = MyBase.Columns("ArchivesPath")
            Me.columnDemoDeadline = MyBase.Columns("DemoDeadline")
            Me.columnNumAllowed = MyBase.Columns("NumAllowed")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columncustID = New Global.System.Data.DataColumn("custID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustID)
            Me.columnbizname = New Global.System.Data.DataColumn("bizname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbizname)
            Me.columndba = New Global.System.Data.DataColumn("dba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndba)
            Me._columnprimary_street = New Global.System.Data.DataColumn("primary-street", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_street.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_street")
            Me._columnprimary_street.ExtendedProperties.Add("Generator_UserColumnName", "primary-street")
            MyBase.Columns.Add(Me._columnprimary_street)
            Me._columnprimary_street2 = New Global.System.Data.DataColumn("primary-street2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_street2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_street2")
            Me._columnprimary_street2.ExtendedProperties.Add("Generator_UserColumnName", "primary-street2")
            MyBase.Columns.Add(Me._columnprimary_street2)
            Me._columnprimary_city = New Global.System.Data.DataColumn("primary-city", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_city.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_city")
            Me._columnprimary_city.ExtendedProperties.Add("Generator_UserColumnName", "primary-city")
            MyBase.Columns.Add(Me._columnprimary_city)
            Me._columnprimary_state = New Global.System.Data.DataColumn("primary-state", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_state.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_state")
            Me._columnprimary_state.ExtendedProperties.Add("Generator_UserColumnName", "primary-state")
            MyBase.Columns.Add(Me._columnprimary_state)
            Me._columnprimary_zip = New Global.System.Data.DataColumn("primary-zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_zip.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_zip")
            Me._columnprimary_zip.ExtendedProperties.Add("Generator_UserColumnName", "primary-zip")
            MyBase.Columns.Add(Me._columnprimary_zip)
            Me._columnprimary_phone = New Global.System.Data.DataColumn("primary-phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_phone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_phone")
            Me._columnprimary_phone.ExtendedProperties.Add("Generator_UserColumnName", "primary-phone")
            MyBase.Columns.Add(Me._columnprimary_phone)
            Me._columnprimary_fax = New Global.System.Data.DataColumn("primary-fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_fax.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_fax")
            Me._columnprimary_fax.ExtendedProperties.Add("Generator_UserColumnName", "primary-fax")
            MyBase.Columns.Add(Me._columnprimary_fax)
            Me._columnprimary_email = New Global.System.Data.DataColumn("primary-email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_email.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_email")
            Me._columnprimary_email.ExtendedProperties.Add("Generator_UserColumnName", "primary-email")
            MyBase.Columns.Add(Me._columnprimary_email)
            Me._columnprimary_manager = New Global.System.Data.DataColumn("primary-manager", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_manager.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_manager")
            Me._columnprimary_manager.ExtendedProperties.Add("Generator_UserColumnName", "primary-manager")
            MyBase.Columns.Add(Me._columnprimary_manager)
            Me._columnprimary_contact = New Global.System.Data.DataColumn("primary-contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_contact.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_contact")
            Me._columnprimary_contact.ExtendedProperties.Add("Generator_UserColumnName", "primary-contact")
            MyBase.Columns.Add(Me._columnprimary_contact)
            Me._columnbiz_type = New Global.System.Data.DataColumn("biz-type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnbiz_type.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnbiz_type")
            Me._columnbiz_type.ExtendedProperties.Add("Generator_UserColumnName", "biz-type")
            MyBase.Columns.Add(Me._columnbiz_type)
            Me._columnPres_name = New Global.System.Data.DataColumn("Pres-name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPres_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPres_name")
            Me._columnPres_name.ExtendedProperties.Add("Generator_UserColumnName", "Pres-name")
            MyBase.Columns.Add(Me._columnPres_name)
            Me.columnnotary1 = New Global.System.Data.DataColumn("notary1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotary1)
            Me.columnnotary2 = New Global.System.Data.DataColumn("notary2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotary2)
            Me.columnnotary3 = New Global.System.Data.DataColumn("notary3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotary3)
            Me._columnduration_of_company = New Global.System.Data.DataColumn("duration-of-company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnduration_of_company.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnduration_of_company")
            Me._columnduration_of_company.ExtendedProperties.Add("Generator_UserColumnName", "duration-of-company")
            MyBase.Columns.Add(Me._columnduration_of_company)
            Me._columnpercent_biz_retail = New Global.System.Data.DataColumn("percent-biz-retail", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpercent_biz_retail.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpercent_biz_retail")
            Me._columnpercent_biz_retail.ExtendedProperties.Add("Generator_UserColumnName", "percent-biz-retail")
            MyBase.Columns.Add(Me._columnpercent_biz_retail)
            Me._columnpercent_biz_commercial = New Global.System.Data.DataColumn("percent-biz-commercial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpercent_biz_commercial.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpercent_biz_commercial")
            Me._columnpercent_biz_commercial.ExtendedProperties.Add("Generator_UserColumnName", "percent-biz-commercial")
            MyBase.Columns.Add(Me._columnpercent_biz_commercial)
            Me._columnstock_par_value = New Global.System.Data.DataColumn("stock-par-value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstock_par_value.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstock_par_value")
            Me._columnstock_par_value.ExtendedProperties.Add("Generator_UserColumnName", "stock-par-value")
            MyBase.Columns.Add(Me._columnstock_par_value)
            Me._columnstates_to_license = New Global.System.Data.DataColumn("states-to-license", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstates_to_license.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstates_to_license")
            Me._columnstates_to_license.ExtendedProperties.Add("Generator_UserColumnName", "states-to-license")
            MyBase.Columns.Add(Me._columnstates_to_license)
            Me._column800_ = New Global.System.Data.DataColumn("800#", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column800_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column800_")
            Me._column800_.ExtendedProperties.Add("Generator_UserColumnName", "800#")
            MyBase.Columns.Add(Me._column800_)
            Me.columncounty = New Global.System.Data.DataColumn("county", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounty)
            Me.columnstockclass = New Global.System.Data.DataColumn("stockclass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockclass)
            Me.columnstockseries = New Global.System.Data.DataColumn("stockseries", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockseries)
            Me._columnstock_authorized = New Global.System.Data.DataColumn("stock#authorized", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstock_authorized.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstock_authorized")
            Me._columnstock_authorized.ExtendedProperties.Add("Generator_UserColumnName", "stock#authorized")
            MyBase.Columns.Add(Me._columnstock_authorized)
            Me._columnstock_issued = New Global.System.Data.DataColumn("stock#issued", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstock_issued.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstock_issued")
            Me._columnstock_issued.ExtendedProperties.Add("Generator_UserColumnName", "stock#issued")
            MyBase.Columns.Add(Me._columnstock_issued)
            Me.columnAssignedTo = New Global.System.Data.DataColumn("AssignedTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignedTo)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnIsArchived = New Global.System.Data.DataColumn("IsArchived", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsArchived)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.columnHasAuditProblem = New Global.System.Data.DataColumn("HasAuditProblem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHasAuditProblem)
            Me.columnReqPasswords = New Global.System.Data.DataColumn("ReqPasswords", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReqPasswords)
            Me.columnReportsPath = New Global.System.Data.DataColumn("ReportsPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportsPath)
            Me.columnArchivesPath = New Global.System.Data.DataColumn("ArchivesPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchivesPath)
            Me.columnDemoDeadline = New Global.System.Data.DataColumn("DemoDeadline", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemoDeadline)
            Me.columnNumAllowed = New Global.System.Data.DataColumn("NumAllowed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAllowed)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustID}, true))
            Me.columncustID.AutoIncrement = true
            Me.columncustID.AllowDBNull = false
            Me.columncustID.ReadOnly = true
            Me.columncustID.Unique = true
            Me.columnbizname.MaxLength = 255
            Me.columndba.MaxLength = 255
            Me._columnprimary_street.MaxLength = 255
            Me._columnprimary_street2.MaxLength = 255
            Me._columnprimary_city.MaxLength = 255
            Me._columnprimary_state.MaxLength = 255
            Me._columnprimary_zip.MaxLength = 255
            Me._columnprimary_phone.MaxLength = 255
            Me._columnprimary_fax.MaxLength = 255
            Me._columnprimary_email.MaxLength = 255
            Me._columnprimary_manager.MaxLength = 255
            Me._columnprimary_contact.MaxLength = 255
            Me._columnbiz_type.MaxLength = 255
            Me._columnPres_name.MaxLength = 255
            Me.columnnotary1.MaxLength = 255
            Me.columnnotary2.MaxLength = 255
            Me.columnnotary3.MaxLength = 255
            Me._columnduration_of_company.MaxLength = 255
            Me._columnstock_par_value.MaxLength = 50
            Me._columnstates_to_license.MaxLength = 50
            Me._column800_.MaxLength = 50
            Me.columncounty.MaxLength = 255
            Me.columnstockclass.MaxLength = 50
            Me.columnstockseries.MaxLength = 50
            Me._columnstock_authorized.MaxLength = 20
            Me._columnstock_issued.MaxLength = 20
            Me.columnAssignedTo.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnReportsPath.MaxLength = 255
            Me.columnArchivesPath.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCompanyRow() As CompanyRow
            Return CType(Me.NewRow,CompanyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CompanyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CompanyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanyRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanyRowChanged(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanyRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanyRowChanging(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanyRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanyRowDeleted(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanyRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanyRowDeleting(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCompanyRow(ByVal row As CompanyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StatusReportDataSet = New StatusReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CompanyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CompanyAssessmentDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columncustID As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnBeenHired As Global.System.Data.DataColumn
        
        Private columnIsExempt As Global.System.Data.DataColumn
        
        Private columnExpirationDate As Global.System.Data.DataColumn
        
        Private columnCompanyhandles As Global.System.Data.DataColumn
        
        Private columnLicensenumber As Global.System.Data.DataColumn
        
        Private columnHasproblem As Global.System.Data.DataColumn
        
        Private columnCornerstoneOriginal As Global.System.Data.DataColumn
        
        Private columnCOAReq As Global.System.Data.DataColumn
        
        Private columnLICReq As Global.System.Data.DataColumn
        
        Private columnCOASatisfied As Global.System.Data.DataColumn
        
        Private columnLICSatisfied As Global.System.Data.DataColumn
        
        Private columnNoRequirements As Global.System.Data.DataColumn
        
        Private columnCOAexpdate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CompanyAssessment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeenHiredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeenHired
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsExemptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsExempt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpirationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpirationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyhandlesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompanyhandles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LicensenumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLicensenumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HasproblemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHasproblem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CornerstoneOriginalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCornerstoneOriginal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COASatisfiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOASatisfied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICSatisfiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICSatisfied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoRequirementsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoRequirements
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAexpdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAexpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanyAssessmentRow
            Get
                Return CType(Me.Rows(index),CompanyAssessmentRow)
            End Get
        End Property
        
        Public Event CompanyAssessmentRowChanging As CompanyAssessmentRowChangeEventHandler
        
        Public Event CompanyAssessmentRowChanged As CompanyAssessmentRowChangeEventHandler
        
        Public Event CompanyAssessmentRowDeleting As CompanyAssessmentRowChangeEventHandler
        
        Public Event CompanyAssessmentRowDeleted As CompanyAssessmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCompanyAssessmentRow(ByVal row As CompanyAssessmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCompanyAssessmentRow(ByVal custID As Integer, ByVal State As String, ByVal BeenHired As Boolean, ByVal IsExempt As Boolean, ByVal ExpirationDate As String, ByVal Companyhandles As Boolean, ByVal Licensenumber As String, ByVal Hasproblem As Boolean, ByVal CornerstoneOriginal As Boolean, ByVal COAReq As Boolean, ByVal LICReq As Boolean, ByVal COASatisfied As Boolean, ByVal LICSatisfied As Boolean, ByVal NoRequirements As Boolean, ByVal COAexpdate As String) As CompanyAssessmentRow
            Dim rowCompanyAssessmentRow As CompanyAssessmentRow = CType(Me.NewRow,CompanyAssessmentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, custID, State, BeenHired, IsExempt, ExpirationDate, Companyhandles, Licensenumber, Hasproblem, CornerstoneOriginal, COAReq, LICReq, COASatisfied, LICSatisfied, NoRequirements, COAexpdate}
            rowCompanyAssessmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompanyAssessmentRow)
            Return rowCompanyAssessmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As CompanyAssessmentRow
            Return CType(Me.Rows.Find(New Object() {ID}),CompanyAssessmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CompanyAssessmentDataTable = CType(MyBase.Clone,CompanyAssessmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CompanyAssessmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columncustID = MyBase.Columns("custID")
            Me.columnState = MyBase.Columns("State")
            Me.columnBeenHired = MyBase.Columns("BeenHired")
            Me.columnIsExempt = MyBase.Columns("IsExempt")
            Me.columnExpirationDate = MyBase.Columns("ExpirationDate")
            Me.columnCompanyhandles = MyBase.Columns("Companyhandles")
            Me.columnLicensenumber = MyBase.Columns("Licensenumber")
            Me.columnHasproblem = MyBase.Columns("Hasproblem")
            Me.columnCornerstoneOriginal = MyBase.Columns("CornerstoneOriginal")
            Me.columnCOAReq = MyBase.Columns("COAReq")
            Me.columnLICReq = MyBase.Columns("LICReq")
            Me.columnCOASatisfied = MyBase.Columns("COASatisfied")
            Me.columnLICSatisfied = MyBase.Columns("LICSatisfied")
            Me.columnNoRequirements = MyBase.Columns("NoRequirements")
            Me.columnCOAexpdate = MyBase.Columns("COAexpdate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columncustID = New Global.System.Data.DataColumn("custID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustID)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnBeenHired = New Global.System.Data.DataColumn("BeenHired", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeenHired)
            Me.columnIsExempt = New Global.System.Data.DataColumn("IsExempt", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsExempt)
            Me.columnExpirationDate = New Global.System.Data.DataColumn("ExpirationDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpirationDate)
            Me.columnCompanyhandles = New Global.System.Data.DataColumn("Companyhandles", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompanyhandles)
            Me.columnLicensenumber = New Global.System.Data.DataColumn("Licensenumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLicensenumber)
            Me.columnHasproblem = New Global.System.Data.DataColumn("Hasproblem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHasproblem)
            Me.columnCornerstoneOriginal = New Global.System.Data.DataColumn("CornerstoneOriginal", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCornerstoneOriginal)
            Me.columnCOAReq = New Global.System.Data.DataColumn("COAReq", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAReq)
            Me.columnLICReq = New Global.System.Data.DataColumn("LICReq", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICReq)
            Me.columnCOASatisfied = New Global.System.Data.DataColumn("COASatisfied", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOASatisfied)
            Me.columnLICSatisfied = New Global.System.Data.DataColumn("LICSatisfied", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICSatisfied)
            Me.columnNoRequirements = New Global.System.Data.DataColumn("NoRequirements", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoRequirements)
            Me.columnCOAexpdate = New Global.System.Data.DataColumn("COAexpdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAexpdate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnState.MaxLength = 50
            Me.columnExpirationDate.MaxLength = 50
            Me.columnLicensenumber.MaxLength = 50
            Me.columnCOAexpdate.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCompanyAssessmentRow() As CompanyAssessmentRow
            Return CType(Me.NewRow,CompanyAssessmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CompanyAssessmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CompanyAssessmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanyAssessmentRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanyAssessmentRowChanged(Me, New CompanyAssessmentRowChangeEvent(CType(e.Row,CompanyAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanyAssessmentRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanyAssessmentRowChanging(Me, New CompanyAssessmentRowChangeEvent(CType(e.Row,CompanyAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanyAssessmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanyAssessmentRowDeleted(Me, New CompanyAssessmentRowChangeEvent(CType(e.Row,CompanyAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanyAssessmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanyAssessmentRowDeleting(Me, New CompanyAssessmentRowChangeEvent(CType(e.Row,CompanyAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCompanyAssessmentRow(ByVal row As CompanyAssessmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StatusReportDataSet = New StatusReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CompanyAssessmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rmServiceItemDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        Private columnCustID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDesc As Global.System.Data.DataColumn
        
        Private columnDateBegin As Global.System.Data.DataColumn
        
        Private columnDateEnd As Global.System.Data.DataColumn
        
        Private columnDateRemind As Global.System.Data.DataColumn
        
        Private columnSatisfied As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnApplies As Global.System.Data.DataColumn
        
        Private columnDateRenewal As Global.System.Data.DataColumn
        
        Private columnDateExpiration As Global.System.Data.DataColumn
        
        Private columnCurrentStatus As Global.System.Data.DataColumn
        
        Private columnCurrentProcess As Global.System.Data.DataColumn
        
        Private columnIsBondItem As Global.System.Data.DataColumn
        
        Private columnBondNumber As Global.System.Data.DataColumn
        
        Private columnBondState As Global.System.Data.DataColumn
        
        Private columnBondAmount As Global.System.Data.DataColumn
        
        Private columnBondAgencyName As Global.System.Data.DataColumn
        
        Private columnAssignedTo As Global.System.Data.DataColumn
        
        Private columnAtClient As Global.System.Data.DataColumn
        
        Private columnAtState As Global.System.Data.DataColumn
        
        Private columnTenDaySent As Global.System.Data.DataColumn
        
        Private columnAtCornerstone As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rmServiceItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateBeginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateBegin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRemindColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRemind
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SatisfiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSatisfied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApplies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRenewalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRenewal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExpirationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExpiration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentProcessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentProcess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsBondItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsBondItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondAgencyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondAgencyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignedToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignedTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TenDaySentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTenDaySent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtCornerstoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtCornerstone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rmServiceItemRow
            Get
                Return CType(Me.Rows(index),rmServiceItemRow)
            End Get
        End Property
        
        Public Event rmServiceItemRowChanging As rmServiceItemRowChangeEventHandler
        
        Public Event rmServiceItemRowChanged As rmServiceItemRowChangeEventHandler
        
        Public Event rmServiceItemRowDeleting As rmServiceItemRowChangeEventHandler
        
        Public Event rmServiceItemRowDeleted As rmServiceItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrmServiceItemRow(ByVal row As rmServiceItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrmServiceItemRow( _
                    ByVal DateCreated As Date,  _
                    ByVal CustID As Integer,  _
                    ByVal Name As String,  _
                    ByVal Desc As String,  _
                    ByVal DateBegin As Date,  _
                    ByVal DateEnd As Date,  _
                    ByVal DateRemind As Date,  _
                    ByVal Satisfied As Boolean,  _
                    ByVal Cost As Decimal,  _
                    ByVal Applies As Boolean,  _
                    ByVal DateRenewal As Date,  _
                    ByVal DateExpiration As Date,  _
                    ByVal CurrentStatus As String,  _
                    ByVal CurrentProcess As String,  _
                    ByVal IsBondItem As Boolean,  _
                    ByVal BondNumber As Integer,  _
                    ByVal BondState As String,  _
                    ByVal BondAmount As Decimal,  _
                    ByVal BondAgencyName As String,  _
                    ByVal AssignedTo As String,  _
                    ByVal AtClient As Boolean,  _
                    ByVal AtState As Boolean,  _
                    ByVal TenDaySent As Boolean,  _
                    ByVal AtCornerstone As Boolean) As rmServiceItemRow
            Dim rowrmServiceItemRow As rmServiceItemRow = CType(Me.NewRow,rmServiceItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DateCreated, CustID, Name, Desc, DateBegin, DateEnd, DateRemind, Satisfied, Cost, Applies, DateRenewal, DateExpiration, CurrentStatus, CurrentProcess, IsBondItem, BondNumber, BondState, BondAmount, BondAgencyName, AssignedTo, AtClient, AtState, TenDaySent, AtCornerstone}
            rowrmServiceItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrmServiceItemRow)
            Return rowrmServiceItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As rmServiceItemRow
            Return CType(Me.Rows.Find(New Object() {ID}),rmServiceItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rmServiceItemDataTable = CType(MyBase.Clone,rmServiceItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rmServiceItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
            Me.columnCustID = MyBase.Columns("CustID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDesc = MyBase.Columns("Desc")
            Me.columnDateBegin = MyBase.Columns("DateBegin")
            Me.columnDateEnd = MyBase.Columns("DateEnd")
            Me.columnDateRemind = MyBase.Columns("DateRemind")
            Me.columnSatisfied = MyBase.Columns("Satisfied")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnApplies = MyBase.Columns("Applies")
            Me.columnDateRenewal = MyBase.Columns("DateRenewal")
            Me.columnDateExpiration = MyBase.Columns("DateExpiration")
            Me.columnCurrentStatus = MyBase.Columns("CurrentStatus")
            Me.columnCurrentProcess = MyBase.Columns("CurrentProcess")
            Me.columnIsBondItem = MyBase.Columns("IsBondItem")
            Me.columnBondNumber = MyBase.Columns("BondNumber")
            Me.columnBondState = MyBase.Columns("BondState")
            Me.columnBondAmount = MyBase.Columns("BondAmount")
            Me.columnBondAgencyName = MyBase.Columns("BondAgencyName")
            Me.columnAssignedTo = MyBase.Columns("AssignedTo")
            Me.columnAtClient = MyBase.Columns("AtClient")
            Me.columnAtState = MyBase.Columns("AtState")
            Me.columnTenDaySent = MyBase.Columns("TenDaySent")
            Me.columnAtCornerstone = MyBase.Columns("AtCornerstone")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.columnCustID = New Global.System.Data.DataColumn("CustID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDesc = New Global.System.Data.DataColumn("Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc)
            Me.columnDateBegin = New Global.System.Data.DataColumn("DateBegin", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateBegin)
            Me.columnDateEnd = New Global.System.Data.DataColumn("DateEnd", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEnd)
            Me.columnDateRemind = New Global.System.Data.DataColumn("DateRemind", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRemind)
            Me.columnSatisfied = New Global.System.Data.DataColumn("Satisfied", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSatisfied)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnApplies = New Global.System.Data.DataColumn("Applies", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApplies)
            Me.columnDateRenewal = New Global.System.Data.DataColumn("DateRenewal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRenewal)
            Me.columnDateExpiration = New Global.System.Data.DataColumn("DateExpiration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExpiration)
            Me.columnCurrentStatus = New Global.System.Data.DataColumn("CurrentStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentStatus)
            Me.columnCurrentProcess = New Global.System.Data.DataColumn("CurrentProcess", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentProcess)
            Me.columnIsBondItem = New Global.System.Data.DataColumn("IsBondItem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsBondItem)
            Me.columnBondNumber = New Global.System.Data.DataColumn("BondNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondNumber)
            Me.columnBondState = New Global.System.Data.DataColumn("BondState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondState)
            Me.columnBondAmount = New Global.System.Data.DataColumn("BondAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondAmount)
            Me.columnBondAgencyName = New Global.System.Data.DataColumn("BondAgencyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondAgencyName)
            Me.columnAssignedTo = New Global.System.Data.DataColumn("AssignedTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignedTo)
            Me.columnAtClient = New Global.System.Data.DataColumn("AtClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtClient)
            Me.columnAtState = New Global.System.Data.DataColumn("AtState", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtState)
            Me.columnTenDaySent = New Global.System.Data.DataColumn("TenDaySent", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTenDaySent)
            Me.columnAtCornerstone = New Global.System.Data.DataColumn("AtCornerstone", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtCornerstone)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 255
            Me.columnDesc.MaxLength = 2147483647
            Me.columnCurrentStatus.MaxLength = 1073741823
            Me.columnCurrentProcess.MaxLength = 50
            Me.columnBondState.MaxLength = 50
            Me.columnBondAgencyName.MaxLength = 255
            Me.columnAssignedTo.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrmServiceItemRow() As rmServiceItemRow
            Return CType(Me.NewRow,rmServiceItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rmServiceItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rmServiceItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rmServiceItemRowChangedEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowChanged(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rmServiceItemRowChangingEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowChanging(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rmServiceItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowDeleted(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rmServiceItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowDeleting(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovermServiceItemRow(ByVal row As rmServiceItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StatusReportDataSet = New StatusReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rmServiceItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SIAuditDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSIid As Global.System.Data.DataColumn
        
        Private columnDateAC As Global.System.Data.DataColumn
        
        Private columnDateUC As Global.System.Data.DataColumn
        
        Private columnDateAS As Global.System.Data.DataColumn
        
        Private columnDateSat As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SIAudit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SIidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateUCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateUC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateSatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateSat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SIAuditRow
            Get
                Return CType(Me.Rows(index),SIAuditRow)
            End Get
        End Property
        
        Public Event SIAuditRowChanging As SIAuditRowChangeEventHandler
        
        Public Event SIAuditRowChanged As SIAuditRowChangeEventHandler
        
        Public Event SIAuditRowDeleting As SIAuditRowChangeEventHandler
        
        Public Event SIAuditRowDeleted As SIAuditRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSIAuditRow(ByVal row As SIAuditRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSIAuditRow(ByVal SIid As Integer, ByVal DateAC As Date, ByVal DateUC As Date, ByVal DateAS As Date, ByVal DateSat As Date) As SIAuditRow
            Dim rowSIAuditRow As SIAuditRow = CType(Me.NewRow,SIAuditRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SIid, DateAC, DateUC, DateAS, DateSat}
            rowSIAuditRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSIAuditRow)
            Return rowSIAuditRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As SIAuditRow
            Return CType(Me.Rows.Find(New Object() {ID}),SIAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SIAuditDataTable = CType(MyBase.Clone,SIAuditDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SIAuditDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSIid = MyBase.Columns("SIid")
            Me.columnDateAC = MyBase.Columns("DateAC")
            Me.columnDateUC = MyBase.Columns("DateUC")
            Me.columnDateAS = MyBase.Columns("DateAS")
            Me.columnDateSat = MyBase.Columns("DateSat")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSIid = New Global.System.Data.DataColumn("SIid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIid)
            Me.columnDateAC = New Global.System.Data.DataColumn("DateAC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAC)
            Me.columnDateUC = New Global.System.Data.DataColumn("DateUC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateUC)
            Me.columnDateAS = New Global.System.Data.DataColumn("DateAS", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAS)
            Me.columnDateSat = New Global.System.Data.DataColumn("DateSat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateSat)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnSIid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSIAuditRow() As SIAuditRow
            Return CType(Me.NewRow,SIAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SIAuditRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SIAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SIAuditRowChangedEvent) Is Nothing) Then
                RaiseEvent SIAuditRowChanged(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SIAuditRowChangingEvent) Is Nothing) Then
                RaiseEvent SIAuditRowChanging(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SIAuditRowDeletedEvent) Is Nothing) Then
                RaiseEvent SIAuditRowDeleted(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SIAuditRowDeletingEvent) Is Nothing) Then
                RaiseEvent SIAuditRowDeleting(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSIAuditRow(ByVal row As SIAuditRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StatusReportDataSet = New StatusReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SIAuditDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StateAssessmentDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSTATE As Global.System.Data.DataColumn
        
        Private columnCOAReq As Global.System.Data.DataColumn
        
        Private columnLICReq As Global.System.Data.DataColumn
        
        Private columnNoRequirement As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StateAssessment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICReqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICReq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoRequirementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoRequirement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StateAssessmentRow
            Get
                Return CType(Me.Rows(index),StateAssessmentRow)
            End Get
        End Property
        
        Public Event StateAssessmentRowChanging As StateAssessmentRowChangeEventHandler
        
        Public Event StateAssessmentRowChanged As StateAssessmentRowChangeEventHandler
        
        Public Event StateAssessmentRowDeleting As StateAssessmentRowChangeEventHandler
        
        Public Event StateAssessmentRowDeleted As StateAssessmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStateAssessmentRow(ByVal row As StateAssessmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStateAssessmentRow(ByVal STATE As String, ByVal COAReq As Boolean, ByVal LICReq As Boolean, ByVal NoRequirement As Boolean) As StateAssessmentRow
            Dim rowStateAssessmentRow As StateAssessmentRow = CType(Me.NewRow,StateAssessmentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, STATE, COAReq, LICReq, NoRequirement}
            rowStateAssessmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStateAssessmentRow)
            Return rowStateAssessmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As StateAssessmentRow
            Return CType(Me.Rows.Find(New Object() {ID}),StateAssessmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StateAssessmentDataTable = CType(MyBase.Clone,StateAssessmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StateAssessmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSTATE = MyBase.Columns("STATE")
            Me.columnCOAReq = MyBase.Columns("COAReq")
            Me.columnLICReq = MyBase.Columns("LICReq")
            Me.columnNoRequirement = MyBase.Columns("NoRequirement")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSTATE = New Global.System.Data.DataColumn("STATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATE)
            Me.columnCOAReq = New Global.System.Data.DataColumn("COAReq", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAReq)
            Me.columnLICReq = New Global.System.Data.DataColumn("LICReq", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICReq)
            Me.columnNoRequirement = New Global.System.Data.DataColumn("NoRequirement", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoRequirement)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnSTATE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStateAssessmentRow() As StateAssessmentRow
            Return CType(Me.NewRow,StateAssessmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StateAssessmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StateAssessmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StateAssessmentRowChangedEvent) Is Nothing) Then
                RaiseEvent StateAssessmentRowChanged(Me, New StateAssessmentRowChangeEvent(CType(e.Row,StateAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StateAssessmentRowChangingEvent) Is Nothing) Then
                RaiseEvent StateAssessmentRowChanging(Me, New StateAssessmentRowChangeEvent(CType(e.Row,StateAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StateAssessmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent StateAssessmentRowDeleted(Me, New StateAssessmentRowChangeEvent(CType(e.Row,StateAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StateAssessmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent StateAssessmentRowDeleting(Me, New StateAssessmentRowChangeEvent(CType(e.Row,StateAssessmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStateAssessmentRow(ByVal row As StateAssessmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StatusReportDataSet = New StatusReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StateAssessmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PresidentEmailAddressDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columncustID As Global.System.Data.DataColumn
        
        Private columnemailAddress As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PresidentEmailAddress"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PresidentEmailAddressRow
            Get
                Return CType(Me.Rows(index),PresidentEmailAddressRow)
            End Get
        End Property
        
        Public Event PresidentEmailAddressRowChanging As PresidentEmailAddressRowChangeEventHandler
        
        Public Event PresidentEmailAddressRowChanged As PresidentEmailAddressRowChangeEventHandler
        
        Public Event PresidentEmailAddressRowDeleting As PresidentEmailAddressRowChangeEventHandler
        
        Public Event PresidentEmailAddressRowDeleted As PresidentEmailAddressRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPresidentEmailAddressRow(ByVal row As PresidentEmailAddressRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPresidentEmailAddressRow(ByVal custID As Integer, ByVal emailAddress As String) As PresidentEmailAddressRow
            Dim rowPresidentEmailAddressRow As PresidentEmailAddressRow = CType(Me.NewRow,PresidentEmailAddressRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, custID, emailAddress}
            rowPresidentEmailAddressRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPresidentEmailAddressRow)
            Return rowPresidentEmailAddressRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As PresidentEmailAddressRow
            Return CType(Me.Rows.Find(New Object() {ID}),PresidentEmailAddressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PresidentEmailAddressDataTable = CType(MyBase.Clone,PresidentEmailAddressDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PresidentEmailAddressDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columncustID = MyBase.Columns("custID")
            Me.columnemailAddress = MyBase.Columns("emailAddress")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columncustID = New Global.System.Data.DataColumn("custID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustID)
            Me.columnemailAddress = New Global.System.Data.DataColumn("emailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemailAddress)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columncustID.AllowDBNull = false
            Me.columnemailAddress.AllowDBNull = false
            Me.columnemailAddress.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPresidentEmailAddressRow() As PresidentEmailAddressRow
            Return CType(Me.NewRow,PresidentEmailAddressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PresidentEmailAddressRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PresidentEmailAddressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PresidentEmailAddressRowChangedEvent) Is Nothing) Then
                RaiseEvent PresidentEmailAddressRowChanged(Me, New PresidentEmailAddressRowChangeEvent(CType(e.Row,PresidentEmailAddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PresidentEmailAddressRowChangingEvent) Is Nothing) Then
                RaiseEvent PresidentEmailAddressRowChanging(Me, New PresidentEmailAddressRowChangeEvent(CType(e.Row,PresidentEmailAddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PresidentEmailAddressRowDeletedEvent) Is Nothing) Then
                RaiseEvent PresidentEmailAddressRowDeleted(Me, New PresidentEmailAddressRowChangeEvent(CType(e.Row,PresidentEmailAddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PresidentEmailAddressRowDeletingEvent) Is Nothing) Then
                RaiseEvent PresidentEmailAddressRowDeleting(Me, New PresidentEmailAddressRowChangeEvent(CType(e.Row,PresidentEmailAddressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePresidentEmailAddressRow(ByVal row As PresidentEmailAddressRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StatusReportDataSet = New StatusReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PresidentEmailAddressDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CompanyRow
        Inherits Global.System.Data.DataRow
        
        Private tableCompany As CompanyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompany = CType(Me.Table,CompanyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custID() As Integer
            Get
                Return CType(Me(Me.tableCompany.custIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCompany.custIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bizname() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.biznameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bizname' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.biznameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dba() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.dbaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dba' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.dbaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_street() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_streetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-street' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_streetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_street2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_street2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-street2' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_street2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_city() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_cityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-city' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_cityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_state() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_stateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-state' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_stateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_zipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-zip' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_zipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_phone() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_phoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-phone' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_faxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-fax' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_email() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-email' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_manager() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_managerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-manager' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_managerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_contact() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_contactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-contact' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_contactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _biz_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._biz_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'biz-type' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._biz_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Pres_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._Pres_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pres-name' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._Pres_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notary1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.notary1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notary1' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.notary1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notary2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.notary2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notary2' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.notary2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notary3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.notary3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notary3' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.notary3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _duration_of_company() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._duration_of_companyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'duration-of-company' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._duration_of_companyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _percent_biz_retail() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany._percent_biz_retailColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'percent-biz-retail' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._percent_biz_retailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _percent_biz_commercial() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany._percent_biz_commercialColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'percent-biz-commercial' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._percent_biz_commercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _stock_par_value() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._stock_par_valueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stock-par-value' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._stock_par_valueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _states_to_license() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._states_to_licenseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'states-to-license' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._states_to_licenseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _800_() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._800_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '800#' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._800_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property county() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.countyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'county' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.countyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockclass() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.stockclassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stockclass' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.stockclassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockseries() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.stockseriesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stockseries' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.stockseriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _stock_authorized() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._stock_authorizedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stock#authorized' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._stock_authorizedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _stock_issued() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._stock_issuedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stock#issued' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._stock_issuedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignedTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.AssignedToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedTo' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.AssignedToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsArchived() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompany.IsArchivedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsArchived' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.IsArchivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompany.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HasAuditProblem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompany.HasAuditProblemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HasAuditProblem' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.HasAuditProblemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReqPasswords() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompany.ReqPasswordsColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReqPasswords' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.ReqPasswordsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReportsPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.ReportsPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReportsPath' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.ReportsPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArchivesPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.ArchivesPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArchivesPath' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.ArchivesPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemoDeadline() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompany.DemoDeadlineColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DemoDeadline' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.DemoDeadlineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAllowed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany.NumAllowedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAllowed' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.NumAllowedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableCompany.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableCompany.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbiznameNull() As Boolean
            Return Me.IsNull(Me.tableCompany.biznameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbiznameNull()
            Me(Me.tableCompany.biznameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdbaNull() As Boolean
            Return Me.IsNull(Me.tableCompany.dbaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdbaNull()
            Me(Me.tableCompany.dbaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_streetNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_streetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_streetNull()
            Me(Me.tableCompany._primary_streetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_street2Null() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_street2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_street2Null()
            Me(Me.tableCompany._primary_street2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_cityNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_cityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_cityNull()
            Me(Me.tableCompany._primary_cityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_stateNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_stateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_stateNull()
            Me(Me.tableCompany._primary_stateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_zipNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_zipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_zipNull()
            Me(Me.tableCompany._primary_zipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_phoneNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_phoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_phoneNull()
            Me(Me.tableCompany._primary_phoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_faxNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_faxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_faxNull()
            Me(Me.tableCompany._primary_faxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_emailNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_emailNull()
            Me(Me.tableCompany._primary_emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_managerNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_managerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_managerNull()
            Me(Me.tableCompany._primary_managerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_contactNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_contactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_contactNull()
            Me(Me.tableCompany._primary_contactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_biz_typeNull() As Boolean
            Return Me.IsNull(Me.tableCompany._biz_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_biz_typeNull()
            Me(Me.tableCompany._biz_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Pres_nameNull() As Boolean
            Return Me.IsNull(Me.tableCompany._Pres_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Pres_nameNull()
            Me(Me.tableCompany._Pres_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnotary1Null() As Boolean
            Return Me.IsNull(Me.tableCompany.notary1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnotary1Null()
            Me(Me.tableCompany.notary1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnotary2Null() As Boolean
            Return Me.IsNull(Me.tableCompany.notary2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnotary2Null()
            Me(Me.tableCompany.notary2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnotary3Null() As Boolean
            Return Me.IsNull(Me.tableCompany.notary3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnotary3Null()
            Me(Me.tableCompany.notary3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_duration_of_companyNull() As Boolean
            Return Me.IsNull(Me.tableCompany._duration_of_companyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_duration_of_companyNull()
            Me(Me.tableCompany._duration_of_companyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_percent_biz_retailNull() As Boolean
            Return Me.IsNull(Me.tableCompany._percent_biz_retailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_percent_biz_retailNull()
            Me(Me.tableCompany._percent_biz_retailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_percent_biz_commercialNull() As Boolean
            Return Me.IsNull(Me.tableCompany._percent_biz_commercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_percent_biz_commercialNull()
            Me(Me.tableCompany._percent_biz_commercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_stock_par_valueNull() As Boolean
            Return Me.IsNull(Me.tableCompany._stock_par_valueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_stock_par_valueNull()
            Me(Me.tableCompany._stock_par_valueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_states_to_licenseNull() As Boolean
            Return Me.IsNull(Me.tableCompany._states_to_licenseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_states_to_licenseNull()
            Me(Me.tableCompany._states_to_licenseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_800_Null() As Boolean
            Return Me.IsNull(Me.tableCompany._800_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_800_Null()
            Me(Me.tableCompany._800_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscountyNull() As Boolean
            Return Me.IsNull(Me.tableCompany.countyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcountyNull()
            Me(Me.tableCompany.countyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockclassNull() As Boolean
            Return Me.IsNull(Me.tableCompany.stockclassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockclassNull()
            Me(Me.tableCompany.stockclassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockseriesNull() As Boolean
            Return Me.IsNull(Me.tableCompany.stockseriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockseriesNull()
            Me(Me.tableCompany.stockseriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_stock_authorizedNull() As Boolean
            Return Me.IsNull(Me.tableCompany._stock_authorizedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_stock_authorizedNull()
            Me(Me.tableCompany._stock_authorizedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_stock_issuedNull() As Boolean
            Return Me.IsNull(Me.tableCompany._stock_issuedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_stock_issuedNull()
            Me(Me.tableCompany._stock_issuedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssignedToNull() As Boolean
            Return Me.IsNull(Me.tableCompany.AssignedToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssignedToNull()
            Me(Me.tableCompany.AssignedToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableCompany.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableCompany.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsArchivedNull() As Boolean
            Return Me.IsNull(Me.tableCompany.IsArchivedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsArchivedNull()
            Me(Me.tableCompany.IsArchivedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableCompany.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tableCompany.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHasAuditProblemNull() As Boolean
            Return Me.IsNull(Me.tableCompany.HasAuditProblemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHasAuditProblemNull()
            Me(Me.tableCompany.HasAuditProblemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReqPasswordsNull() As Boolean
            Return Me.IsNull(Me.tableCompany.ReqPasswordsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReqPasswordsNull()
            Me(Me.tableCompany.ReqPasswordsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReportsPathNull() As Boolean
            Return Me.IsNull(Me.tableCompany.ReportsPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReportsPathNull()
            Me(Me.tableCompany.ReportsPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArchivesPathNull() As Boolean
            Return Me.IsNull(Me.tableCompany.ArchivesPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArchivesPathNull()
            Me(Me.tableCompany.ArchivesPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemoDeadlineNull() As Boolean
            Return Me.IsNull(Me.tableCompany.DemoDeadlineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemoDeadlineNull()
            Me(Me.tableCompany.DemoDeadlineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAllowedNull() As Boolean
            Return Me.IsNull(Me.tableCompany.NumAllowedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAllowedNull()
            Me(Me.tableCompany.NumAllowedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CompanyAssessmentRow
        Inherits Global.System.Data.DataRow
        
        Private tableCompanyAssessment As CompanyAssessmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompanyAssessment = CType(Me.Table,CompanyAssessmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableCompanyAssessment.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCompanyAssessment.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.custIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'custID' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.custIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeenHired() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.BeenHiredColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BeenHired' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.BeenHiredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsExempt() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.IsExemptColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsExempt' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.IsExemptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExpirationDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.ExpirationDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExpirationDate' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.ExpirationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Companyhandles() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.CompanyhandlesColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Companyhandles' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.CompanyhandlesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Licensenumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.LicensenumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Licensenumber' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.LicensenumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hasproblem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.HasproblemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hasproblem' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.HasproblemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CornerstoneOriginal() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.CornerstoneOriginalColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CornerstoneOriginal' in table 'CompanyAssessment' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.CornerstoneOriginalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAReq() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.COAReqColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAReq' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.COAReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICReq() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.LICReqColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICReq' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.LICReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COASatisfied() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.COASatisfiedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COASatisfied' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.COASatisfiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICSatisfied() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.LICSatisfiedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICSatisfied' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.LICSatisfiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoRequirements() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.NoRequirementsColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoRequirements' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.NoRequirementsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAexpdate() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanyAssessment.COAexpdateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAexpdate' in table 'CompanyAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanyAssessment.COAexpdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustIDNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.custIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustIDNull()
            Me(Me.tableCompanyAssessment.custIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableCompanyAssessment.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeenHiredNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.BeenHiredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeenHiredNull()
            Me(Me.tableCompanyAssessment.BeenHiredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsExemptNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.IsExemptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsExemptNull()
            Me(Me.tableCompanyAssessment.IsExemptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpirationDateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.ExpirationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpirationDateNull()
            Me(Me.tableCompanyAssessment.ExpirationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyhandlesNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.CompanyhandlesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyhandlesNull()
            Me(Me.tableCompanyAssessment.CompanyhandlesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLicensenumberNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.LicensenumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLicensenumberNull()
            Me(Me.tableCompanyAssessment.LicensenumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHasproblemNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.HasproblemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHasproblemNull()
            Me(Me.tableCompanyAssessment.HasproblemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCornerstoneOriginalNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.CornerstoneOriginalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCornerstoneOriginalNull()
            Me(Me.tableCompanyAssessment.CornerstoneOriginalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAReqNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.COAReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAReqNull()
            Me(Me.tableCompanyAssessment.COAReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICReqNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.LICReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICReqNull()
            Me(Me.tableCompanyAssessment.LICReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOASatisfiedNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.COASatisfiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOASatisfiedNull()
            Me(Me.tableCompanyAssessment.COASatisfiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICSatisfiedNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.LICSatisfiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICSatisfiedNull()
            Me(Me.tableCompanyAssessment.LICSatisfiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoRequirementsNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.NoRequirementsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoRequirementsNull()
            Me(Me.tableCompanyAssessment.NoRequirementsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAexpdateNull() As Boolean
            Return Me.IsNull(Me.tableCompanyAssessment.COAexpdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAexpdateNull()
            Me(Me.tableCompanyAssessment.COAexpdateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rmServiceItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablermServiceItem As rmServiceItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablermServiceItem = CType(Me.Table,rmServiceItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tablermServiceItem.IDColumn),Long)
            End Get
            Set
                Me(Me.tablermServiceItem.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CustIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustID' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Desc' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateBegin() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateBeginColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateBegin' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateBeginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEnd() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateEndColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEnd' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateEndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRemind() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateRemindColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRemind' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateRemindColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Satisfied() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.SatisfiedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Satisfied' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.SatisfiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Applies() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AppliesColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Applies' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AppliesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRenewal() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateRenewalColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRenewal' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateRenewalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExpiration() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateExpirationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExpiration' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateExpirationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CurrentStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentStatus' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CurrentStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentProcess() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CurrentProcessColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentProcess' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CurrentProcessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsBondItem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.IsBondItemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsBondItem' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.IsBondItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondNumber' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondState() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondState' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondAmount' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondAgencyName() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondAgencyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondAgencyName' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondAgencyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignedTo() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AssignedToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedTo' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AssignedToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtClient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AtClientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtClient' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AtClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtState() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AtStateColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtState' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AtStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TenDaySent() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.TenDaySentColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TenDaySent' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.TenDaySentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtCornerstone() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AtCornerstoneColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtCornerstone' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AtCornerstoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tablermServiceItem.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustIDNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CustIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustIDNull()
            Me(Me.tablermServiceItem.CustIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablermServiceItem.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescNull()
            Me(Me.tablermServiceItem.DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateBeginNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateBeginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateBeginNull()
            Me(Me.tablermServiceItem.DateBeginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEndNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateEndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEndNull()
            Me(Me.tablermServiceItem.DateEndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRemindNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateRemindColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRemindNull()
            Me(Me.tablermServiceItem.DateRemindColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSatisfiedNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.SatisfiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSatisfiedNull()
            Me(Me.tablermServiceItem.SatisfiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNull()
            Me(Me.tablermServiceItem.CostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliesNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AppliesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliesNull()
            Me(Me.tablermServiceItem.AppliesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRenewalNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateRenewalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRenewalNull()
            Me(Me.tablermServiceItem.DateRenewalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExpirationNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateExpirationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExpirationNull()
            Me(Me.tablermServiceItem.DateExpirationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentStatusNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CurrentStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentStatusNull()
            Me(Me.tablermServiceItem.CurrentStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentProcessNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CurrentProcessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentProcessNull()
            Me(Me.tablermServiceItem.CurrentProcessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsBondItemNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.IsBondItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsBondItemNull()
            Me(Me.tablermServiceItem.IsBondItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondNumberNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondNumberNull()
            Me(Me.tablermServiceItem.BondNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondStateNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondStateNull()
            Me(Me.tablermServiceItem.BondStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondAmountNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondAmountNull()
            Me(Me.tablermServiceItem.BondAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondAgencyNameNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondAgencyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondAgencyNameNull()
            Me(Me.tablermServiceItem.BondAgencyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssignedToNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AssignedToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssignedToNull()
            Me(Me.tablermServiceItem.AssignedToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtClientNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AtClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtClientNull()
            Me(Me.tablermServiceItem.AtClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtStateNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AtStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtStateNull()
            Me(Me.tablermServiceItem.AtStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTenDaySentNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.TenDaySentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTenDaySentNull()
            Me(Me.tablermServiceItem.TenDaySentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtCornerstoneNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AtCornerstoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtCornerstoneNull()
            Me(Me.tablermServiceItem.AtCornerstoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SIAuditRow
        Inherits Global.System.Data.DataRow
        
        Private tableSIAudit As SIAuditDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSIAudit = CType(Me.Table,SIAuditDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableSIAudit.IDColumn),Long)
            End Get
            Set
                Me(Me.tableSIAudit.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SIid() As Integer
            Get
                Return CType(Me(Me.tableSIAudit.SIidColumn),Integer)
            End Get
            Set
                Me(Me.tableSIAudit.SIidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateAC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateACColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateAC' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateUC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateUCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateUC' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateUCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateAS() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateASColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateAS' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateSat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateSatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateSat' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateSatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateACNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateACNull()
            Me(Me.tableSIAudit.DateACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateUCNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateUCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateUCNull()
            Me(Me.tableSIAudit.DateUCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateASNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateASNull()
            Me(Me.tableSIAudit.DateASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateSatNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateSatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateSatNull()
            Me(Me.tableSIAudit.DateSatColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StateAssessmentRow
        Inherits Global.System.Data.DataRow
        
        Private tableStateAssessment As StateAssessmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStateAssessment = CType(Me.Table,StateAssessmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableStateAssessment.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableStateAssessment.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableStateAssessment.STATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATE' in table 'StateAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStateAssessment.STATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAReq() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStateAssessment.COAReqColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAReq' in table 'StateAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStateAssessment.COAReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICReq() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStateAssessment.LICReqColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICReq' in table 'StateAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStateAssessment.LICReqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoRequirement() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStateAssessment.NoRequirementColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoRequirement' in table 'StateAssessment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStateAssessment.NoRequirementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATENull() As Boolean
            Return Me.IsNull(Me.tableStateAssessment.STATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATENull()
            Me(Me.tableStateAssessment.STATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAReqNull() As Boolean
            Return Me.IsNull(Me.tableStateAssessment.COAReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAReqNull()
            Me(Me.tableStateAssessment.COAReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICReqNull() As Boolean
            Return Me.IsNull(Me.tableStateAssessment.LICReqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICReqNull()
            Me(Me.tableStateAssessment.LICReqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoRequirementNull() As Boolean
            Return Me.IsNull(Me.tableStateAssessment.NoRequirementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoRequirementNull()
            Me(Me.tableStateAssessment.NoRequirementColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PresidentEmailAddressRow
        Inherits Global.System.Data.DataRow
        
        Private tablePresidentEmailAddress As PresidentEmailAddressDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePresidentEmailAddress = CType(Me.Table,PresidentEmailAddressDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tablePresidentEmailAddress.IDColumn),Integer)
            End Get
            Set
                Me(Me.tablePresidentEmailAddress.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custID() As Integer
            Get
                Return CType(Me(Me.tablePresidentEmailAddress.custIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePresidentEmailAddress.custIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property emailAddress() As String
            Get
                Return CType(Me(Me.tablePresidentEmailAddress.emailAddressColumn),String)
            End Get
            Set
                Me(Me.tablePresidentEmailAddress.emailAddressColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CompanyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CompanyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CompanyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CompanyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CompanyAssessmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CompanyAssessmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CompanyAssessmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CompanyAssessmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rmServiceItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rmServiceItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rmServiceItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rmServiceItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SIAuditRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SIAuditRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SIAuditRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SIAuditRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StateAssessmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StateAssessmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StateAssessmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StateAssessmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PresidentEmailAddressRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PresidentEmailAddressRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PresidentEmailAddressRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PresidentEmailAddressRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace StatusReportDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CompanyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Company"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("custID", "custID")
            tableMapping.ColumnMappings.Add("bizname", "bizname")
            tableMapping.ColumnMappings.Add("dba", "dba")
            tableMapping.ColumnMappings.Add("primary-street", "primary-street")
            tableMapping.ColumnMappings.Add("primary-street2", "primary-street2")
            tableMapping.ColumnMappings.Add("primary-city", "primary-city")
            tableMapping.ColumnMappings.Add("primary-state", "primary-state")
            tableMapping.ColumnMappings.Add("primary-zip", "primary-zip")
            tableMapping.ColumnMappings.Add("primary-phone", "primary-phone")
            tableMapping.ColumnMappings.Add("primary-fax", "primary-fax")
            tableMapping.ColumnMappings.Add("primary-email", "primary-email")
            tableMapping.ColumnMappings.Add("primary-manager", "primary-manager")
            tableMapping.ColumnMappings.Add("primary-contact", "primary-contact")
            tableMapping.ColumnMappings.Add("biz-type", "biz-type")
            tableMapping.ColumnMappings.Add("Pres-name", "Pres-name")
            tableMapping.ColumnMappings.Add("notary1", "notary1")
            tableMapping.ColumnMappings.Add("notary2", "notary2")
            tableMapping.ColumnMappings.Add("notary3", "notary3")
            tableMapping.ColumnMappings.Add("duration-of-company", "duration-of-company")
            tableMapping.ColumnMappings.Add("percent-biz-retail", "percent-biz-retail")
            tableMapping.ColumnMappings.Add("percent-biz-commercial", "percent-biz-commercial")
            tableMapping.ColumnMappings.Add("stock-par-value", "stock-par-value")
            tableMapping.ColumnMappings.Add("states-to-license", "states-to-license")
            tableMapping.ColumnMappings.Add("800#", "800#")
            tableMapping.ColumnMappings.Add("county", "county")
            tableMapping.ColumnMappings.Add("stockclass", "stockclass")
            tableMapping.ColumnMappings.Add("stockseries", "stockseries")
            tableMapping.ColumnMappings.Add("stock#authorized", "stock#authorized")
            tableMapping.ColumnMappings.Add("stock#issued", "stock#issued")
            tableMapping.ColumnMappings.Add("AssignedTo", "AssignedTo")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("IsArchived", "IsArchived")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            tableMapping.ColumnMappings.Add("HasAuditProblem", "HasAuditProblem")
            tableMapping.ColumnMappings.Add("ReqPasswords", "ReqPasswords")
            tableMapping.ColumnMappings.Add("ReportsPath", "ReportsPath")
            tableMapping.ColumnMappings.Add("ArchivesPath", "ArchivesPath")
            tableMapping.ColumnMappings.Add("DemoDeadline", "DemoDeadline")
            tableMapping.ColumnMappings.Add("NumAllowed", "NumAllowed")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Company] WHERE (((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = "& _ 
                "@Original_ID)) AND ([custID] = @Original_custID) AND ((@IsNull_bizname = 1 AND ["& _ 
                "bizname] IS NULL) OR ([bizname] = @Original_bizname)) AND ((@IsNull_dba = 1 AND "& _ 
                "[dba] IS NULL) OR ([dba] = @Original_dba)) AND ((@p3 = 1 AND [primary-street] IS"& _ 
                " NULL) OR ([primary-street] = @p2)) AND ((@p6 = 1 AND [primary-street2] IS NULL)"& _ 
                " OR ([primary-street2] = @p5)) AND ((@p9 = 1 AND [primary-city] IS NULL) OR ([pr"& _ 
                "imary-city] = @p8)) AND ((@p12 = 1 AND [primary-state] IS NULL) OR ([primary-sta"& _ 
                "te] = @p11)) AND ((@p15 = 1 AND [primary-zip] IS NULL) OR ([primary-zip] = @p14)"& _ 
                ") AND ((@p18 = 1 AND [primary-phone] IS NULL) OR ([primary-phone] = @p17)) AND ("& _ 
                "(@p21 = 1 AND [primary-fax] IS NULL) OR ([primary-fax] = @p20)) AND ((@p24 = 1 A"& _ 
                "ND [primary-email] IS NULL) OR ([primary-email] = @p23)) AND ((@p27 = 1 AND [pri"& _ 
                "mary-manager] IS NULL) OR ([primary-manager] = @p26)) AND ((@p30 = 1 AND [primar"& _ 
                "y-contact] IS NULL) OR ([primary-contact] = @p29)) AND ((@p33 = 1 AND [biz-type]"& _ 
                " IS NULL) OR ([biz-type] = @p32)) AND ((@p36 = 1 AND [Pres-name] IS NULL) OR ([P"& _ 
                "res-name] = @p35)) AND ((@IsNull_notary1 = 1 AND [notary1] IS NULL) OR ([notary1"& _ 
                "] = @Original_notary1)) AND ((@IsNull_notary2 = 1 AND [notary2] IS NULL) OR ([no"& _ 
                "tary2] = @Original_notary2)) AND ((@IsNull_notary3 = 1 AND [notary3] IS NULL) OR"& _ 
                " ([notary3] = @Original_notary3)) AND ((@p39 = 1 AND [duration-of-company] IS NU"& _ 
                "LL) OR ([duration-of-company] = @p38)) AND ((@p42 = 1 AND [percent-biz-retail] I"& _ 
                "S NULL) OR ([percent-biz-retail] = @p41)) AND ((@p45 = 1 AND [percent-biz-commer"& _ 
                "cial] IS NULL) OR ([percent-biz-commercial] = @p44)) AND ((@p48 = 1 AND [stock-p"& _ 
                "ar-value] IS NULL) OR ([stock-par-value] = @p47)) AND ((@p51 = 1 AND [states-to-"& _ 
                "license] IS NULL) OR ([states-to-license] = @p50)) AND ((@p54 = 1 AND [800#] IS "& _ 
                "NULL) OR ([800#] = @p53)) AND ((@IsNull_county = 1 AND [county] IS NULL) OR ([co"& _ 
                "unty] = @Original_county)) AND ((@IsNull_stockclass = 1 AND [stockclass] IS NULL"& _ 
                ") OR ([stockclass] = @Original_stockclass)) AND ((@IsNull_stockseries = 1 AND [s"& _ 
                "tockseries] IS NULL) OR ([stockseries] = @Original_stockseries)) AND ((@IsNull_s"& _ 
                "tock#authorized = 1 AND [stock#authorized] IS NULL) OR ([stock#authorized] = @Or"& _ 
                "iginal_stock#authorized)) AND ((@IsNull_stock#issued = 1 AND [stock#issued] IS N"& _ 
                "ULL) OR ([stock#issued] = @Original_stock#issued)) AND ((@IsNull_AssignedTo = 1 "& _ 
                "AND [AssignedTo] IS NULL) OR ([AssignedTo] = @Original_AssignedTo)) AND ((@IsNul"& _ 
                "l_Status = 1 AND [Status] IS NULL) OR ([Status] = @Original_Status)) AND ((@IsNu"& _ 
                "ll_IsArchived = 1 AND [IsArchived] IS NULL) OR ([IsArchived] = @Original_IsArchi"& _ 
                "ved)) AND ((@IsNull_DateCreated = 1 AND [DateCreated] IS NULL) OR ([DateCreated]"& _ 
                " = @Original_DateCreated)) AND ((@IsNull_HasAuditProblem = 1 AND [HasAuditProble"& _ 
                "m] IS NULL) OR ([HasAuditProblem] = @Original_HasAuditProblem)) AND ((@IsNull_Re"& _ 
                "qPasswords = 1 AND [ReqPasswords] IS NULL) OR ([ReqPasswords] = @Original_ReqPas"& _ 
                "swords)) AND ((@IsNull_ReportsPath = 1 AND [ReportsPath] IS NULL) OR ([ReportsPa"& _ 
                "th] = @Original_ReportsPath)) AND ((@IsNull_ArchivesPath = 1 AND [ArchivesPath] "& _ 
                "IS NULL) OR ([ArchivesPath] = @Original_ArchivesPath)) AND ((@IsNull_DemoDeadlin"& _ 
                "e = 1 AND [DemoDeadline] IS NULL) OR ([DemoDeadline] = @Original_DemoDeadline)) "& _ 
                "AND ((@IsNull_NumAllowed = 1 AND [NumAllowed] IS NULL) OR ([NumAllowed] = @Origi"& _ 
                "nal_NumAllowed)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bizname", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bizname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dba", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dba", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p15", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p14", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p18", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p17", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p21", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p20", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p24", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p23", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p27", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p26", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p30", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p29", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p33", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p32", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p36", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p35", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p39", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p38", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p42", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p41", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p45", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p44", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p48", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p47", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p51", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p50", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p54", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p53", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_county", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_county", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stockclass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stockclass", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stockseries", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stockseries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stock#authorized", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stock#authorized", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stock#issued", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stock#issued", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssignedTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssignedTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsArchived", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsArchived", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HasAuditProblem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HasAuditProblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqPasswords", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqPasswords", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportsPath", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportsPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ArchivesPath", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ArchivesPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DemoDeadline", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DemoDeadline", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Company] ([ID], [bizname], [dba], [primary-street], [primary-s"& _ 
                "treet2], [primary-city], [primary-state], [primary-zip], [primary-phone], [prima"& _ 
                "ry-fax], [primary-email], [primary-manager], [primary-contact], [biz-type], [Pre"& _ 
                "s-name], [notary1], [notary2], [notary3], [duration-of-company], [percent-biz-re"& _ 
                "tail], [percent-biz-commercial], [stock-par-value], [states-to-license], [800#],"& _ 
                " [county], [stockclass], [stockseries], [stock#authorized], [stock#issued], [Ass"& _ 
                "ignedTo], [Status], [IsArchived], [DateCreated], [HasAuditProblem], [ReqPassword"& _ 
                "s], [ReportsPath], [ArchivesPath], [DemoDeadline], [NumAllowed]) VALUES (@ID, @b"& _ 
                "izname, @dba, @p1, @p4, @p7, @p10, @p13, @p16, @p19, @p22, @p25, @p28, @p31, @p3"& _ 
                "4, @notary1, @notary2, @notary3, @p37, @p40, @p43, @p46, @p49, @p52, @county, @s"& _ 
                "tockclass, @stockseries, @stock#authorized, @stock#issued, @AssignedTo, @Status,"& _ 
                " @IsArchived, @DateCreated, @HasAuditProblem, @ReqPasswords, @ReportsPath, @Arch"& _ 
                "ivesPath, @DemoDeadline, @NumAllowed);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, custID, bizname, dba, [primar"& _ 
                "y-street], [primary-street2], [primary-city], [primary-state], [primary-zip], [p"& _ 
                "rimary-phone], [primary-fax], [primary-email], [primary-manager], [primary-conta"& _ 
                "ct], [biz-type], [Pres-name], notary1, notary2, notary3, [duration-of-company], "& _ 
                "[percent-biz-retail], [percent-biz-commercial], [stock-par-value], [states-to-li"& _ 
                "cense], [800#], county, stockclass, stockseries, stock#authorized, stock#issued,"& _ 
                " AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem, ReqPasswords, Rep"& _ 
                "ortsPath, ArchivesPath, DemoDeadline, NumAllowed FROM Company WHERE (custID = SC"& _ 
                "OPE_IDENTITY()) ORDER BY Status"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bizname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dba", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p19", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p22", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p25", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p28", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p31", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p34", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p37", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p40", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p43", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p46", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p49", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p52", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@county", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockclass", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockseries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#authorized", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#issued", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsArchived", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HasAuditProblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqPasswords", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportsPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArchivesPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DemoDeadline", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Company] SET [ID] = @ID, [bizname] = @bizname, [dba] = @dba, [prima"& _ 
                "ry-street] = @p1, [primary-street2] = @p4, [primary-city] = @p7, [primary-state]"& _ 
                " = @p10, [primary-zip] = @p13, [primary-phone] = @p16, [primary-fax] = @p19, [pr"& _ 
                "imary-email] = @p22, [primary-manager] = @p25, [primary-contact] = @p28, [biz-ty"& _ 
                "pe] = @p31, [Pres-name] = @p34, [notary1] = @notary1, [notary2] = @notary2, [not"& _ 
                "ary3] = @notary3, [duration-of-company] = @p37, [percent-biz-retail] = @p40, [pe"& _ 
                "rcent-biz-commercial] = @p43, [stock-par-value] = @p46, [states-to-license] = @p"& _ 
                "49, [800#] = @p52, [county] = @county, [stockclass] = @stockclass, [stockseries]"& _ 
                " = @stockseries, [stock#authorized] = @stock#authorized, [stock#issued] = @stock"& _ 
                "#issued, [AssignedTo] = @AssignedTo, [Status] = @Status, [IsArchived] = @IsArchi"& _ 
                "ved, [DateCreated] = @DateCreated, [HasAuditProblem] = @HasAuditProblem, [ReqPas"& _ 
                "swords] = @ReqPasswords, [ReportsPath] = @ReportsPath, [ArchivesPath] = @Archive"& _ 
                "sPath, [DemoDeadline] = @DemoDeadline, [NumAllowed] = @NumAllowed WHERE (((@IsNu"& _ 
                "ll_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ([custID] = @Original_"& _ 
                "custID) AND ((@IsNull_bizname = 1 AND [bizname] IS NULL) OR ([bizname] = @Origin"& _ 
                "al_bizname)) AND ((@IsNull_dba = 1 AND [dba] IS NULL) OR ([dba] = @Original_dba)"& _ 
                ") AND ((@p3 = 1 AND [primary-street] IS NULL) OR ([primary-street] = @p2)) AND ("& _ 
                "(@p6 = 1 AND [primary-street2] IS NULL) OR ([primary-street2] = @p5)) AND ((@p9 "& _ 
                "= 1 AND [primary-city] IS NULL) OR ([primary-city] = @p8)) AND ((@p12 = 1 AND [p"& _ 
                "rimary-state] IS NULL) OR ([primary-state] = @p11)) AND ((@p15 = 1 AND [primary-"& _ 
                "zip] IS NULL) OR ([primary-zip] = @p14)) AND ((@p18 = 1 AND [primary-phone] IS N"& _ 
                "ULL) OR ([primary-phone] = @p17)) AND ((@p21 = 1 AND [primary-fax] IS NULL) OR ("& _ 
                "[primary-fax] = @p20)) AND ((@p24 = 1 AND [primary-email] IS NULL) OR ([primary-"& _ 
                "email] = @p23)) AND ((@p27 = 1 AND [primary-manager] IS NULL) OR ([primary-manag"& _ 
                "er] = @p26)) AND ((@p30 = 1 AND [primary-contact] IS NULL) OR ([primary-contact]"& _ 
                " = @p29)) AND ((@p33 = 1 AND [biz-type] IS NULL) OR ([biz-type] = @p32)) AND ((@"& _ 
                "p36 = 1 AND [Pres-name] IS NULL) OR ([Pres-name] = @p35)) AND ((@IsNull_notary1 "& _ 
                "= 1 AND [notary1] IS NULL) OR ([notary1] = @Original_notary1)) AND ((@IsNull_not"& _ 
                "ary2 = 1 AND [notary2] IS NULL) OR ([notary2] = @Original_notary2)) AND ((@IsNul"& _ 
                "l_notary3 = 1 AND [notary3] IS NULL) OR ([notary3] = @Original_notary3)) AND ((@"& _ 
                "p39 = 1 AND [duration-of-company] IS NULL) OR ([duration-of-company] = @p38)) AN"& _ 
                "D ((@p42 = 1 AND [percent-biz-retail] IS NULL) OR ([percent-biz-retail] = @p41))"& _ 
                " AND ((@p45 = 1 AND [percent-biz-commercial] IS NULL) OR ([percent-biz-commercia"& _ 
                "l] = @p44)) AND ((@p48 = 1 AND [stock-par-value] IS NULL) OR ([stock-par-value] "& _ 
                "= @p47)) AND ((@p51 = 1 AND [states-to-license] IS NULL) OR ([states-to-license]"& _ 
                " = @p50)) AND ((@p54 = 1 AND [800#] IS NULL) OR ([800#] = @p53)) AND ((@IsNull_c"& _ 
                "ounty = 1 AND [county] IS NULL) OR ([county] = @Original_county)) AND ((@IsNull_"& _ 
                "stockclass = 1 AND [stockclass] IS NULL) OR ([stockclass] = @Original_stockclass"& _ 
                ")) AND ((@IsNull_stockseries = 1 AND [stockseries] IS NULL) OR ([stockseries] = "& _ 
                "@Original_stockseries)) AND ((@IsNull_stock#authorized = 1 AND [stock#authorized"& _ 
                "] IS NULL) OR ([stock#authorized] = @Original_stock#authorized)) AND ((@IsNull_s"& _ 
                "tock#issued = 1 AND [stock#issued] IS NULL) OR ([stock#issued] = @Original_stock"& _ 
                "#issued)) AND ((@IsNull_AssignedTo = 1 AND [AssignedTo] IS NULL) OR ([AssignedTo"& _ 
                "] = @Original_AssignedTo)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([S"& _ 
                "tatus] = @Original_Status)) AND ((@IsNull_IsArchived = 1 AND [IsArchived] IS NUL"& _ 
                "L) OR ([IsArchived] = @Original_IsArchived)) AND ((@IsNull_DateCreated = 1 AND ["& _ 
                "DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreated)) AND ((@IsNull_"& _ 
                "HasAuditProblem = 1 AND [HasAuditProblem] IS NULL) OR ([HasAuditProblem] = @Orig"& _ 
                "inal_HasAuditProblem)) AND ((@IsNull_ReqPasswords = 1 AND [ReqPasswords] IS NULL"& _ 
                ") OR ([ReqPasswords] = @Original_ReqPasswords)) AND ((@IsNull_ReportsPath = 1 AN"& _ 
                "D [ReportsPath] IS NULL) OR ([ReportsPath] = @Original_ReportsPath)) AND ((@IsNu"& _ 
                "ll_ArchivesPath = 1 AND [ArchivesPath] IS NULL) OR ([ArchivesPath] = @Original_A"& _ 
                "rchivesPath)) AND ((@IsNull_DemoDeadline = 1 AND [DemoDeadline] IS NULL) OR ([De"& _ 
                "moDeadline] = @Original_DemoDeadline)) AND ((@IsNull_NumAllowed = 1 AND [NumAllo"& _ 
                "wed] IS NULL) OR ([NumAllowed] = @Original_NumAllowed)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, custID, bi"& _ 
                "zname, dba, [primary-street], [primary-street2], [primary-city], [primary-state]"& _ 
                ", [primary-zip], [primary-phone], [primary-fax], [primary-email], [primary-manag"& _ 
                "er], [primary-contact], [biz-type], [Pres-name], notary1, notary2, notary3, [dur"& _ 
                "ation-of-company], [percent-biz-retail], [percent-biz-commercial], [stock-par-va"& _ 
                "lue], [states-to-license], [800#], county, stockclass, stockseries, stock#author"& _ 
                "ized, stock#issued, AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem"& _ 
                ", ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, NumAllowed FROM Company"& _ 
                " WHERE (custID = @custID) ORDER BY Status"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bizname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dba", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p19", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p22", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p25", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p28", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p31", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p34", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p37", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p40", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p43", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p46", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p49", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p52", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@county", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockclass", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockseries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#authorized", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#issued", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsArchived", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HasAuditProblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqPasswords", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportsPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArchivesPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DemoDeadline", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bizname", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bizname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dba", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dba", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p15", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p14", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p18", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p17", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p21", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p20", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p24", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p23", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p27", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p26", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p30", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p29", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p33", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p32", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p36", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p35", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p39", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p38", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p42", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p41", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p45", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p44", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p48", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p47", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p51", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p50", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p54", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p53", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_county", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_county", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stockclass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stockclass", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stockseries", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stockseries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stock#authorized", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stock#authorized", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stock#issued", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stock#issued", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssignedTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssignedTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsArchived", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsArchived", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HasAuditProblem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HasAuditProblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqPasswords", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqPasswords", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportsPath", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportsPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ArchivesPath", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ArchivesPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DemoDeadline", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DemoDeadline", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QBTransactionExtractor.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, custID, bizname, dba, [primary-street], [primary-street2], [primary-ci" & _
                "ty], [primary-state], [primary-zip], [primary-phone], [primary-fax], [primary-em" & _
                "ail], [primary-manager], [primary-contact], [biz-type], [Pres-name], notary1, no" & _
                "tary2, notary3, [duration-of-company], [percent-biz-retail], [percent-biz-commer" & _
                "cial], [stock-par-value], [states-to-license], [800#], county, stockclass, stock" & _
                "series, stock#authorized, stock#issued, AssignedTo, Status, IsArchived, DateCrea" & _
                "ted, HasAuditProblem, ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, Num" & _
                "Allowed FROM dbo.Company" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Status"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID, Status" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM Company" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE isArchived = 0 AND HasAuditProblem = 1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "OR" & _
                "DER BY Status"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT [800#], ArchivesPath, AssignedTo, DateCreated, DemoDeadline, HasAuditProbl" & _
                "em, ID, IsArchived, NumAllowed, [Pres-name], ReportsPath, ReqPasswords, Status, " & _
                "[biz-type], bizname, county, custID, dba, [duration-of-company], notary1, notary" & _
                "2, notary3, [percent-biz-commercial], [percent-biz-retail], [primary-city], [pri" & _
                "mary-contact], [primary-email], [primary-fax], [primary-manager], [primary-phone" & _
                "], [primary-state], [primary-street], [primary-street2], [primary-zip], [states-" & _
                "to-license], stock#authorized, stock#issued, [stock-par-value], stockclass, stoc" & _
                "kseries FROM Company WHERE (custID = @theCustID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As StatusReportDataSet.CompanyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As StatusReportDataSet.CompanyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StatusReportDataSet.CompanyDataTable = New StatusReportDataSet.CompanyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByRenewalAgenciesNotArchived(ByVal dataTable As StatusReportDataSet.CompanyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As StatusReportDataSet.CompanyDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As StatusReportDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Company")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_ID As Global.System.Nullable(Of Integer), _
                    ByVal Original_custID As Integer, _
                    ByVal Original_bizname As String, _
                    ByVal Original_dba As String, _
                    ByVal p2 As String, _
                    ByVal p5 As String, _
                    ByVal p8 As String, _
                    ByVal p11 As String, _
                    ByVal p14 As String, _
                    ByVal p17 As String, _
                    ByVal p20 As String, _
                    ByVal p23 As String, _
                    ByVal p26 As String, _
                    ByVal p29 As String, _
                    ByVal p32 As String, _
                    ByVal p35 As String, _
                    ByVal Original_notary1 As String, _
                    ByVal Original_notary2 As String, _
                    ByVal Original_notary3 As String, _
                    ByVal p38 As String, _
                    ByVal p41 As Global.System.Nullable(Of Integer), _
                    ByVal p44 As Global.System.Nullable(Of Integer), _
                    ByVal p47 As String, _
                    ByVal p50 As String, _
                    ByVal p53 As String, _
                    ByVal Original_county As String, _
                    ByVal Original_stockclass As String, _
                    ByVal Original_stockseries As String, _
                    ByVal _Original_stock_authorized As String, _
                    ByVal _Original_stock_issued As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_Status As String, _
                    ByVal Original_IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReportsPath As String, _
                    ByVal Original_ArchivesPath As String, _
                    ByVal Original_DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal Original_NumAllowed As Global.System.Nullable(Of Integer)) As Integer
            If (Original_ID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_custID, Integer)
            If (Original_bizname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_bizname, String)
            End If
            If (Original_dba Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_dba, String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p2, String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(p5, String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(p8, String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(p11, String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(p14, String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(p17, String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(p20, String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(p23, String)
            End If
            If (p26 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(p26, String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(p29, String)
            End If
            If (p32 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(p32, String)
            End If
            If (p35 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(p35, String)
            End If
            If (Original_notary1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_notary1, String)
            End If
            If (Original_notary2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_notary2, String)
            End If
            If (Original_notary3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_notary3, String)
            End If
            If (p38 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(p38, String)
            End If
            If (p41.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(p41.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (p44.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(p44.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (p47 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(p47, String)
            End If
            If (p50 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(p50, String)
            End If
            If (p53 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(p53, String)
            End If
            If (Original_county Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_county, String)
            End If
            If (Original_stockclass Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_stockclass, String)
            End If
            If (Original_stockseries Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_stockseries, String)
            End If
            If (_Original_stock_authorized Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(_Original_stock_authorized, String)
            End If
            If (_Original_stock_issued Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(_Original_stock_issued, String)
            End If
            If (Original_AssignedTo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_AssignedTo, String)
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_Status, String)
            End If
            If (Original_IsArchived.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_IsArchived.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_DateCreated.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_HasAuditProblem.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_HasAuditProblem.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_ReqPasswords.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_ReqPasswords.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_ReportsPath Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_ReportsPath, String)
            End If
            If (Original_ArchivesPath Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_ArchivesPath, String)
            End If
            If (Original_DemoDeadline.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_DemoDeadline.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_NumAllowed.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_NumAllowed.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Integer), _
                    ByVal bizname As String, _
                    ByVal dba As String, _
                    ByVal p1 As String, _
                    ByVal p4 As String, _
                    ByVal p7 As String, _
                    ByVal p10 As String, _
                    ByVal p13 As String, _
                    ByVal p16 As String, _
                    ByVal p19 As String, _
                    ByVal p22 As String, _
                    ByVal p25 As String, _
                    ByVal p28 As String, _
                    ByVal p31 As String, _
                    ByVal p34 As String, _
                    ByVal notary1 As String, _
                    ByVal notary2 As String, _
                    ByVal notary3 As String, _
                    ByVal p37 As String, _
                    ByVal p40 As Global.System.Nullable(Of Integer), _
                    ByVal p43 As Global.System.Nullable(Of Integer), _
                    ByVal p46 As String, _
                    ByVal p49 As String, _
                    ByVal p52 As String, _
                    ByVal county As String, _
                    ByVal stockclass As String, _
                    ByVal stockseries As String, _
                    ByVal _stock_authorized As String, _
                    ByVal _stock_issued As String, _
                    ByVal AssignedTo As String, _
                    ByVal Status As String, _
                    ByVal IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal ReportsPath As String, _
                    ByVal ArchivesPath As String, _
                    ByVal DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal NumAllowed As Global.System.Nullable(Of Integer)) As Integer
            If (ID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (bizname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(bizname, String)
            End If
            If (dba Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(dba, String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p1, String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p4, String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p7, String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p10, String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p13, String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p16, String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p19, String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p22, String)
            End If
            If (p25 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p25, String)
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p28, String)
            End If
            If (p31 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p31, String)
            End If
            If (p34 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p34, String)
            End If
            If (notary1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(notary1, String)
            End If
            If (notary2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(notary2, String)
            End If
            If (notary3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(notary3, String)
            End If
            If (p37 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p37, String)
            End If
            If (p40.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p40.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p43.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p43.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p46 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p46, String)
            End If
            If (p49 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p49, String)
            End If
            If (p52 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p52, String)
            End If
            If (county Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(county, String)
            End If
            If (stockclass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(stockclass, String)
            End If
            If (stockseries Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(stockseries, String)
            End If
            If (_stock_authorized Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(_stock_authorized, String)
            End If
            If (_stock_issued Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(_stock_issued, String)
            End If
            If (AssignedTo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(AssignedTo, String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Status, String)
            End If
            If (IsArchived.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(IsArchived.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(DateCreated.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (HasAuditProblem.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(HasAuditProblem.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ReqPasswords.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(ReqPasswords.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ReportsPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(ReportsPath, String)
            End If
            If (ArchivesPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(ArchivesPath, String)
            End If
            If (DemoDeadline.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(DemoDeadline.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (NumAllowed.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(NumAllowed.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal ID As Global.System.Nullable(Of Integer), _
                    ByVal bizname As String, _
                    ByVal dba As String, _
                    ByVal p1 As String, _
                    ByVal p4 As String, _
                    ByVal p7 As String, _
                    ByVal p10 As String, _
                    ByVal p13 As String, _
                    ByVal p16 As String, _
                    ByVal p19 As String, _
                    ByVal p22 As String, _
                    ByVal p25 As String, _
                    ByVal p28 As String, _
                    ByVal p31 As String, _
                    ByVal p34 As String, _
                    ByVal notary1 As String, _
                    ByVal notary2 As String, _
                    ByVal notary3 As String, _
                    ByVal p37 As String, _
                    ByVal p40 As Global.System.Nullable(Of Integer), _
                    ByVal p43 As Global.System.Nullable(Of Integer), _
                    ByVal p46 As String, _
                    ByVal p49 As String, _
                    ByVal p52 As String, _
                    ByVal county As String, _
                    ByVal stockclass As String, _
                    ByVal stockseries As String, _
                    ByVal _stock_authorized As String, _
                    ByVal _stock_issued As String, _
                    ByVal AssignedTo As String, _
                    ByVal Status As String, _
                    ByVal IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal ReportsPath As String, _
                    ByVal ArchivesPath As String, _
                    ByVal DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal NumAllowed As Global.System.Nullable(Of Integer), _
                    ByVal Original_ID As Global.System.Nullable(Of Integer), _
                    ByVal Original_custID As Integer, _
                    ByVal Original_bizname As String, _
                    ByVal Original_dba As String, _
                    ByVal p2 As String, _
                    ByVal p5 As String, _
                    ByVal p8 As String, _
                    ByVal p11 As String, _
                    ByVal p14 As String, _
                    ByVal p17 As String, _
                    ByVal p20 As String, _
                    ByVal p23 As String, _
                    ByVal p26 As String, _
                    ByVal p29 As String, _
                    ByVal p32 As String, _
                    ByVal p35 As String, _
                    ByVal Original_notary1 As String, _
                    ByVal Original_notary2 As String, _
                    ByVal Original_notary3 As String, _
                    ByVal p38 As String, _
                    ByVal p41 As Global.System.Nullable(Of Integer), _
                    ByVal p44 As Global.System.Nullable(Of Integer), _
                    ByVal p47 As String, _
                    ByVal p50 As String, _
                    ByVal p53 As String, _
                    ByVal Original_county As String, _
                    ByVal Original_stockclass As String, _
                    ByVal Original_stockseries As String, _
                    ByVal _Original_stock_authorized As String, _
                    ByVal _Original_stock_issued As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_Status As String, _
                    ByVal Original_IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReportsPath As String, _
                    ByVal Original_ArchivesPath As String, _
                    ByVal Original_DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal Original_NumAllowed As Global.System.Nullable(Of Integer), _
                    ByVal custID As Integer) As Integer
            If (ID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (bizname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(bizname, String)
            End If
            If (dba Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(dba, String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p1, String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p4, String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p7, String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p10, String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p13, String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p16, String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p19, String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p22, String)
            End If
            If (p25 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p25, String)
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p28, String)
            End If
            If (p31 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p31, String)
            End If
            If (p34 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p34, String)
            End If
            If (notary1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(notary1, String)
            End If
            If (notary2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(notary2, String)
            End If
            If (notary3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(notary3, String)
            End If
            If (p37 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p37, String)
            End If
            If (p40.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p40.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p43.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p43.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p46 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p46, String)
            End If
            If (p49 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p49, String)
            End If
            If (p52 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p52, String)
            End If
            If (county Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(county, String)
            End If
            If (stockclass Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(stockclass, String)
            End If
            If (stockseries Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(stockseries, String)
            End If
            If (_stock_authorized Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(_stock_authorized, String)
            End If
            If (_stock_issued Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(_stock_issued, String)
            End If
            If (AssignedTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(AssignedTo, String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Status, String)
            End If
            If (IsArchived.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(IsArchived.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(DateCreated.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (HasAuditProblem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(HasAuditProblem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ReqPasswords.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(ReqPasswords.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ReportsPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(ReportsPath, String)
            End If
            If (ArchivesPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(ArchivesPath, String)
            End If
            If (DemoDeadline.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(DemoDeadline.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (NumAllowed.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(NumAllowed.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_ID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_ID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_custID, Integer)
            If (Original_bizname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_bizname, String)
            End If
            If (Original_dba Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_dba, String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(p2, String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(p5, String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(p8, String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(p11, String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(p14, String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(p17, String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(p20, String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(p23, String)
            End If
            If (p26 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(p26, String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(p29, String)
            End If
            If (p32 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(p32, String)
            End If
            If (p35 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(p35, String)
            End If
            If (Original_notary1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_notary1, String)
            End If
            If (Original_notary2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_notary2, String)
            End If
            If (Original_notary3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_notary3, String)
            End If
            If (p38 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(p38, String)
            End If
            If (p41.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(p41.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (p44.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(p44.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (p47 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(p47, String)
            End If
            If (p50 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(p50, String)
            End If
            If (p53 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(p53, String)
            End If
            If (Original_county Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_county, String)
            End If
            If (Original_stockclass Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_stockclass, String)
            End If
            If (Original_stockseries Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_stockseries, String)
            End If
            If (_Original_stock_authorized Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(_Original_stock_authorized, String)
            End If
            If (_Original_stock_issued Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(_Original_stock_issued, String)
            End If
            If (Original_AssignedTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_AssignedTo, String)
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_Status, String)
            End If
            If (Original_IsArchived.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_IsArchived.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_DateCreated.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_HasAuditProblem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_HasAuditProblem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_ReqPasswords.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_ReqPasswords.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            If (Original_ReportsPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_ReportsPath, String)
            End If
            If (Original_ArchivesPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_ArchivesPath, String)
            End If
            If (Original_DemoDeadline.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_DemoDeadline.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_NumAllowed.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_NumAllowed.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(118).Value = CType(custID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal ID As Global.System.Nullable(Of Integer), _
                    ByVal bizname As String, _
                    ByVal dba As String, _
                    ByVal p1 As String, _
                    ByVal p4 As String, _
                    ByVal p7 As String, _
                    ByVal p10 As String, _
                    ByVal p13 As String, _
                    ByVal p16 As String, _
                    ByVal p19 As String, _
                    ByVal p22 As String, _
                    ByVal p25 As String, _
                    ByVal p28 As String, _
                    ByVal p31 As String, _
                    ByVal p34 As String, _
                    ByVal notary1 As String, _
                    ByVal notary2 As String, _
                    ByVal notary3 As String, _
                    ByVal p37 As String, _
                    ByVal p40 As Global.System.Nullable(Of Integer), _
                    ByVal p43 As Global.System.Nullable(Of Integer), _
                    ByVal p46 As String, _
                    ByVal p49 As String, _
                    ByVal p52 As String, _
                    ByVal county As String, _
                    ByVal stockclass As String, _
                    ByVal stockseries As String, _
                    ByVal _stock_authorized As String, _
                    ByVal _stock_issued As String, _
                    ByVal AssignedTo As String, _
                    ByVal Status As String, _
                    ByVal IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal ReportsPath As String, _
                    ByVal ArchivesPath As String, _
                    ByVal DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal NumAllowed As Global.System.Nullable(Of Integer), _
                    ByVal Original_ID As Global.System.Nullable(Of Integer), _
                    ByVal Original_custID As Integer, _
                    ByVal Original_bizname As String, _
                    ByVal Original_dba As String, _
                    ByVal p2 As String, _
                    ByVal p5 As String, _
                    ByVal p8 As String, _
                    ByVal p11 As String, _
                    ByVal p14 As String, _
                    ByVal p17 As String, _
                    ByVal p20 As String, _
                    ByVal p23 As String, _
                    ByVal p26 As String, _
                    ByVal p29 As String, _
                    ByVal p32 As String, _
                    ByVal p35 As String, _
                    ByVal Original_notary1 As String, _
                    ByVal Original_notary2 As String, _
                    ByVal Original_notary3 As String, _
                    ByVal p38 As String, _
                    ByVal p41 As Global.System.Nullable(Of Integer), _
                    ByVal p44 As Global.System.Nullable(Of Integer), _
                    ByVal p47 As String, _
                    ByVal p50 As String, _
                    ByVal p53 As String, _
                    ByVal Original_county As String, _
                    ByVal Original_stockclass As String, _
                    ByVal Original_stockseries As String, _
                    ByVal _Original_stock_authorized As String, _
                    ByVal _Original_stock_issued As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_Status As String, _
                    ByVal Original_IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReportsPath As String, _
                    ByVal Original_ArchivesPath As String, _
                    ByVal Original_DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal Original_NumAllowed As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(ID, bizname, dba, p1, p4, p7, p10, p13, p16, p19, p22, p25, p28, p31, p34, notary1, notary2, notary3, p37, p40, p43, p46, p49, p52, county, stockclass, stockseries, _stock_authorized, _stock_issued, AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem, ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, NumAllowed, Original_ID, Original_custID, Original_bizname, Original_dba, p2, p5, p8, p11, p14, p17, p20, p23, p26, p29, p32, p35, Original_notary1, Original_notary2, Original_notary3, p38, p41, p44, p47, p50, p53, Original_county, Original_stockclass, Original_stockseries, _Original_stock_authorized, _Original_stock_issued, Original_AssignedTo, Original_Status, Original_IsArchived, Original_DateCreated, Original_HasAuditProblem, Original_ReqPasswords, Original_ReportsPath, Original_ArchivesPath, Original_DemoDeadline, Original_NumAllowed, Original_custID)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetBizname(ByVal theCustID As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(theCustID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CompanyAssessmentTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CompanyAssessment"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("custID", "custID")
            tableMapping.ColumnMappings.Add("State", "State")
            tableMapping.ColumnMappings.Add("BeenHired", "BeenHired")
            tableMapping.ColumnMappings.Add("IsExempt", "IsExempt")
            tableMapping.ColumnMappings.Add("ExpirationDate", "ExpirationDate")
            tableMapping.ColumnMappings.Add("Companyhandles", "Companyhandles")
            tableMapping.ColumnMappings.Add("Licensenumber", "Licensenumber")
            tableMapping.ColumnMappings.Add("Hasproblem", "Hasproblem")
            tableMapping.ColumnMappings.Add("CornerstoneOriginal", "CornerstoneOriginal")
            tableMapping.ColumnMappings.Add("COAReq", "COAReq")
            tableMapping.ColumnMappings.Add("LICReq", "LICReq")
            tableMapping.ColumnMappings.Add("COASatisfied", "COASatisfied")
            tableMapping.ColumnMappings.Add("LICSatisfied", "LICSatisfied")
            tableMapping.ColumnMappings.Add("NoRequirements", "NoRequirements")
            tableMapping.ColumnMappings.Add("COAexpdate", "COAexpdate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CompanyAssessment] WHERE (([ID] = @Original_ID) AND ((@IsNull_" & _
                "custID = 1 AND [custID] IS NULL) OR ([custID] = @Original_custID)) AND ((@IsNull" & _
                "_State = 1 AND [State] IS NULL) OR ([State] = @Original_State)) AND ((@IsNull_Be" & _
                "enHired = 1 AND [BeenHired] IS NULL) OR ([BeenHired] = @Original_BeenHired)) AND" & _
                " ((@IsNull_IsExempt = 1 AND [IsExempt] IS NULL) OR ([IsExempt] = @Original_IsExe" & _
                "mpt)) AND ((@IsNull_ExpirationDate = 1 AND [ExpirationDate] IS NULL) OR ([Expira" & _
                "tionDate] = @Original_ExpirationDate)) AND ((@IsNull_Companyhandles = 1 AND [Com" & _
                "panyhandles] IS NULL) OR ([Companyhandles] = @Original_Companyhandles)) AND ((@I" & _
                "sNull_Licensenumber = 1 AND [Licensenumber] IS NULL) OR ([Licensenumber] = @Orig" & _
                "inal_Licensenumber)) AND ((@IsNull_Hasproblem = 1 AND [Hasproblem] IS NULL) OR (" & _
                "[Hasproblem] = @Original_Hasproblem)) AND ((@IsNull_CornerstoneOriginal = 1 AND " & _
                "[CornerstoneOriginal] IS NULL) OR ([CornerstoneOriginal] = @Original_Cornerstone" & _
                "Original)) AND ((@IsNull_COAReq = 1 AND [COAReq] IS NULL) OR ([COAReq] = @Origin" & _
                "al_COAReq)) AND ((@IsNull_LICReq = 1 AND [LICReq] IS NULL) OR ([LICReq] = @Origi" & _
                "nal_LICReq)) AND ((@IsNull_COASatisfied = 1 AND [COASatisfied] IS NULL) OR ([COA" & _
                "Satisfied] = @Original_COASatisfied)) AND ((@IsNull_LICSatisfied = 1 AND [LICSat" & _
                "isfied] IS NULL) OR ([LICSatisfied] = @Original_LICSatisfied)) AND ((@IsNull_NoR" & _
                "equirements = 1 AND [NoRequirements] IS NULL) OR ([NoRequirements] = @Original_N" & _
                "oRequirements)) AND ((@IsNull_COAexpdate = 1 AND [COAexpdate] IS NULL) OR ([COAe" & _
                "xpdate] = @Original_COAexpdate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_State", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_State", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BeenHired", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BeenHired", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BeenHired", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BeenHired", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsExempt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExempt", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsExempt", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExempt", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExpirationDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExpirationDate", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExpirationDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExpirationDate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Companyhandles", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Companyhandles", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Companyhandles", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Companyhandles", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Licensenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licensenumber", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Licensenumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licensenumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Hasproblem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hasproblem", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hasproblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hasproblem", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CornerstoneOriginal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CornerstoneOriginal", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CornerstoneOriginal", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CornerstoneOriginal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COASatisfied", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COASatisfied", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COASatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COASatisfied", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICSatisfied", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICSatisfied", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICSatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICSatisfied", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NoRequirements", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirements", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoRequirements", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirements", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAexpdate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAexpdate", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAexpdate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAexpdate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CompanyAssessment] ([custID], [State], [BeenHired], [IsExempt]" & _
                ", [ExpirationDate], [Companyhandles], [Licensenumber], [Hasproblem], [Cornerston" & _
                "eOriginal], [COAReq], [LICReq], [COASatisfied], [LICSatisfied], [NoRequirements]" & _
                ", [COAexpdate]) VALUES (@custID, @State, @BeenHired, @IsExempt, @ExpirationDate," & _
                " @Companyhandles, @Licensenumber, @Hasproblem, @CornerstoneOriginal, @COAReq, @L" & _
                "ICReq, @COASatisfied, @LICSatisfied, @NoRequirements, @COAexpdate);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, " & _
                "custID, State, BeenHired, IsExempt, ExpirationDate, Companyhandles, Licensenumbe" & _
                "r, Hasproblem, CornerstoneOriginal, COAReq, LICReq, COASatisfied, LICSatisfied, " & _
                "NoRequirements, COAexpdate FROM CompanyAssessment WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@State", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeenHired", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BeenHired", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsExempt", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExempt", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExpirationDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExpirationDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Companyhandles", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Companyhandles", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Licensenumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licensenumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hasproblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hasproblem", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CornerstoneOriginal", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CornerstoneOriginal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COASatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COASatisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICSatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICSatisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoRequirements", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirements", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAexpdate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAexpdate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CompanyAssessment] SET [custID] = @custID, [State] = @State, [BeenH" & _
                "ired] = @BeenHired, [IsExempt] = @IsExempt, [ExpirationDate] = @ExpirationDate, " & _
                "[Companyhandles] = @Companyhandles, [Licensenumber] = @Licensenumber, [Hasproble" & _
                "m] = @Hasproblem, [CornerstoneOriginal] = @CornerstoneOriginal, [COAReq] = @COAR" & _
                "eq, [LICReq] = @LICReq, [COASatisfied] = @COASatisfied, [LICSatisfied] = @LICSat" & _
                "isfied, [NoRequirements] = @NoRequirements, [COAexpdate] = @COAexpdate WHERE (([" & _
                "ID] = @Original_ID) AND ((@IsNull_custID = 1 AND [custID] IS NULL) OR ([custID] " & _
                "= @Original_custID)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = " & _
                "@Original_State)) AND ((@IsNull_BeenHired = 1 AND [BeenHired] IS NULL) OR ([Been" & _
                "Hired] = @Original_BeenHired)) AND ((@IsNull_IsExempt = 1 AND [IsExempt] IS NULL" & _
                ") OR ([IsExempt] = @Original_IsExempt)) AND ((@IsNull_ExpirationDate = 1 AND [Ex" & _
                "pirationDate] IS NULL) OR ([ExpirationDate] = @Original_ExpirationDate)) AND ((@" & _
                "IsNull_Companyhandles = 1 AND [Companyhandles] IS NULL) OR ([Companyhandles] = @" & _
                "Original_Companyhandles)) AND ((@IsNull_Licensenumber = 1 AND [Licensenumber] IS" & _
                " NULL) OR ([Licensenumber] = @Original_Licensenumber)) AND ((@IsNull_Hasproblem " & _
                "= 1 AND [Hasproblem] IS NULL) OR ([Hasproblem] = @Original_Hasproblem)) AND ((@I" & _
                "sNull_CornerstoneOriginal = 1 AND [CornerstoneOriginal] IS NULL) OR ([Cornerston" & _
                "eOriginal] = @Original_CornerstoneOriginal)) AND ((@IsNull_COAReq = 1 AND [COARe" & _
                "q] IS NULL) OR ([COAReq] = @Original_COAReq)) AND ((@IsNull_LICReq = 1 AND [LICR" & _
                "eq] IS NULL) OR ([LICReq] = @Original_LICReq)) AND ((@IsNull_COASatisfied = 1 AN" & _
                "D [COASatisfied] IS NULL) OR ([COASatisfied] = @Original_COASatisfied)) AND ((@I" & _
                "sNull_LICSatisfied = 1 AND [LICSatisfied] IS NULL) OR ([LICSatisfied] = @Origina" & _
                "l_LICSatisfied)) AND ((@IsNull_NoRequirements = 1 AND [NoRequirements] IS NULL) " & _
                "OR ([NoRequirements] = @Original_NoRequirements)) AND ((@IsNull_COAexpdate = 1 A" & _
                "ND [COAexpdate] IS NULL) OR ([COAexpdate] = @Original_COAexpdate)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID," & _
                " custID, State, BeenHired, IsExempt, ExpirationDate, Companyhandles, Licensenumb" & _
                "er, Hasproblem, CornerstoneOriginal, COAReq, LICReq, COASatisfied, LICSatisfied," & _
                " NoRequirements, COAexpdate FROM CompanyAssessment WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@State", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeenHired", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BeenHired", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsExempt", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExempt", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExpirationDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExpirationDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Companyhandles", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Companyhandles", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Licensenumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licensenumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hasproblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hasproblem", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CornerstoneOriginal", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CornerstoneOriginal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COASatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COASatisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICSatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICSatisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoRequirements", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirements", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAexpdate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAexpdate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_State", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_State", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "State", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BeenHired", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BeenHired", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BeenHired", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BeenHired", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsExempt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExempt", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsExempt", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsExempt", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ExpirationDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExpirationDate", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ExpirationDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExpirationDate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Companyhandles", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Companyhandles", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Companyhandles", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Companyhandles", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Licensenumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licensenumber", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Licensenumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Licensenumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Hasproblem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hasproblem", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hasproblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hasproblem", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CornerstoneOriginal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CornerstoneOriginal", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CornerstoneOriginal", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CornerstoneOriginal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COASatisfied", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COASatisfied", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COASatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COASatisfied", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICSatisfied", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICSatisfied", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICSatisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICSatisfied", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NoRequirements", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirements", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoRequirements", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirements", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAexpdate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAexpdate", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAexpdate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAexpdate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QBTransactionExtractor.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, custID, State, BeenHired, IsExempt, ExpirationDate, Companyhandles, Li" & _
                "censenumber, Hasproblem, CornerstoneOriginal, COAReq, LICReq, COASatisfied, LICS" & _
                "atisfied, NoRequirements, COAexpdate FROM dbo.CompanyAssessment"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "dbo.GetComplianceInfoForCompany"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As StatusReportDataSet.CompanyAssessmentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As StatusReportDataSet.CompanyAssessmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StatusReportDataSet.CompanyAssessmentDataTable = New StatusReportDataSet.CompanyAssessmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillComplianceDataTable(ByVal dataTable As StatusReportDataSet.CompanyAssessmentDataTable, ByVal theCustID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (theCustID.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(theCustID.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetComplianceDataTable(ByVal theCustID As Global.System.Nullable(Of Integer)) As StatusReportDataSet.CompanyAssessmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (theCustID.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(theCustID.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As StatusReportDataSet.CompanyAssessmentDataTable = New StatusReportDataSet.CompanyAssessmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As StatusReportDataSet.CompanyAssessmentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As StatusReportDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CompanyAssessment")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_ID As Integer, _
                    ByVal Original_custID As Global.System.Nullable(Of Integer), _
                    ByVal Original_State As String, _
                    ByVal Original_BeenHired As Global.System.Nullable(Of Boolean), _
                    ByVal Original_IsExempt As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ExpirationDate As String, _
                    ByVal Original_Companyhandles As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Licensenumber As String, _
                    ByVal Original_Hasproblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_CornerstoneOriginal As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COAReq As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICReq As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COASatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICSatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_NoRequirements As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COAexpdate As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Integer)
            If (Original_custID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_custID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_State Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_State, String)
            End If
            If (Original_BeenHired.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_BeenHired.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IsExempt.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IsExempt.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ExpirationDate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ExpirationDate, String)
            End If
            If (Original_Companyhandles.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Companyhandles.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Licensenumber Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Licensenumber, String)
            End If
            If (Original_Hasproblem.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Hasproblem.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CornerstoneOriginal.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CornerstoneOriginal.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_COAReq.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_COAReq.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_LICReq.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_LICReq.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_COASatisfied.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_COASatisfied.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_LICSatisfied.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_LICSatisfied.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_NoRequirements.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_NoRequirements.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_COAexpdate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_COAexpdate, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal custID As Global.System.Nullable(Of Integer), ByVal State As String, ByVal BeenHired As Global.System.Nullable(Of Boolean), ByVal IsExempt As Global.System.Nullable(Of Boolean), ByVal ExpirationDate As String, ByVal Companyhandles As Global.System.Nullable(Of Boolean), ByVal Licensenumber As String, ByVal Hasproblem As Global.System.Nullable(Of Boolean), ByVal CornerstoneOriginal As Global.System.Nullable(Of Boolean), ByVal COAReq As Global.System.Nullable(Of Boolean), ByVal LICReq As Global.System.Nullable(Of Boolean), ByVal COASatisfied As Global.System.Nullable(Of Boolean), ByVal LICSatisfied As Global.System.Nullable(Of Boolean), ByVal NoRequirements As Global.System.Nullable(Of Boolean), ByVal COAexpdate As String) As Integer
            If (custID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(custID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (State Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(State, String)
            End If
            If (BeenHired.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BeenHired.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IsExempt.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IsExempt.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ExpirationDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ExpirationDate, String)
            End If
            If (Companyhandles.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Companyhandles.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Licensenumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Licensenumber, String)
            End If
            If (Hasproblem.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Hasproblem.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CornerstoneOriginal.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CornerstoneOriginal.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (COAReq.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(COAReq.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LICReq.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LICReq.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (COASatisfied.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(COASatisfied.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (LICSatisfied.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(LICSatisfied.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NoRequirements.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NoRequirements.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (COAexpdate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(COAexpdate, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal custID As Global.System.Nullable(Of Integer), _
                    ByVal State As String, _
                    ByVal BeenHired As Global.System.Nullable(Of Boolean), _
                    ByVal IsExempt As Global.System.Nullable(Of Boolean), _
                    ByVal ExpirationDate As String, _
                    ByVal Companyhandles As Global.System.Nullable(Of Boolean), _
                    ByVal Licensenumber As String, _
                    ByVal Hasproblem As Global.System.Nullable(Of Boolean), _
                    ByVal CornerstoneOriginal As Global.System.Nullable(Of Boolean), _
                    ByVal COAReq As Global.System.Nullable(Of Boolean), _
                    ByVal LICReq As Global.System.Nullable(Of Boolean), _
                    ByVal COASatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal LICSatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal NoRequirements As Global.System.Nullable(Of Boolean), _
                    ByVal COAexpdate As String, _
                    ByVal Original_ID As Integer, _
                    ByVal Original_custID As Global.System.Nullable(Of Integer), _
                    ByVal Original_State As String, _
                    ByVal Original_BeenHired As Global.System.Nullable(Of Boolean), _
                    ByVal Original_IsExempt As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ExpirationDate As String, _
                    ByVal Original_Companyhandles As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Licensenumber As String, _
                    ByVal Original_Hasproblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_CornerstoneOriginal As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COAReq As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICReq As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COASatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICSatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_NoRequirements As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COAexpdate As String, _
                    ByVal ID As Integer) As Integer
            If (custID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(custID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (State Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(State, String)
            End If
            If (BeenHired.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BeenHired.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IsExempt.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IsExempt.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ExpirationDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ExpirationDate, String)
            End If
            If (Companyhandles.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Companyhandles.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Licensenumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Licensenumber, String)
            End If
            If (Hasproblem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Hasproblem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CornerstoneOriginal.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CornerstoneOriginal.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (COAReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(COAReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LICReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LICReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (COASatisfied.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(COASatisfied.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (LICSatisfied.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(LICSatisfied.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NoRequirements.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NoRequirements.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (COAexpdate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(COAexpdate, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID, Integer)
            If (Original_custID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_custID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_State Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_State, String)
            End If
            If (Original_BeenHired.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_BeenHired.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_IsExempt.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_IsExempt.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ExpirationDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ExpirationDate, String)
            End If
            If (Original_Companyhandles.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Companyhandles.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_Licensenumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Licensenumber, String)
            End If
            If (Original_Hasproblem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Hasproblem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_CornerstoneOriginal.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_CornerstoneOriginal.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_COAReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_COAReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_LICReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LICReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_COASatisfied.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_COASatisfied.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_LICSatisfied.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LICSatisfied.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_NoRequirements.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_NoRequirements.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_COAexpdate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_COAexpdate, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal custID As Global.System.Nullable(Of Integer), _
                    ByVal State As String, _
                    ByVal BeenHired As Global.System.Nullable(Of Boolean), _
                    ByVal IsExempt As Global.System.Nullable(Of Boolean), _
                    ByVal ExpirationDate As String, _
                    ByVal Companyhandles As Global.System.Nullable(Of Boolean), _
                    ByVal Licensenumber As String, _
                    ByVal Hasproblem As Global.System.Nullable(Of Boolean), _
                    ByVal CornerstoneOriginal As Global.System.Nullable(Of Boolean), _
                    ByVal COAReq As Global.System.Nullable(Of Boolean), _
                    ByVal LICReq As Global.System.Nullable(Of Boolean), _
                    ByVal COASatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal LICSatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal NoRequirements As Global.System.Nullable(Of Boolean), _
                    ByVal COAexpdate As String, _
                    ByVal Original_ID As Integer, _
                    ByVal Original_custID As Global.System.Nullable(Of Integer), _
                    ByVal Original_State As String, _
                    ByVal Original_BeenHired As Global.System.Nullable(Of Boolean), _
                    ByVal Original_IsExempt As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ExpirationDate As String, _
                    ByVal Original_Companyhandles As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Licensenumber As String, _
                    ByVal Original_Hasproblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_CornerstoneOriginal As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COAReq As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICReq As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COASatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICSatisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_NoRequirements As Global.System.Nullable(Of Boolean), _
                    ByVal Original_COAexpdate As String) As Integer
            Return Me.Update(custID, State, BeenHired, IsExempt, ExpirationDate, Companyhandles, Licensenumber, Hasproblem, CornerstoneOriginal, COAReq, LICReq, COASatisfied, LICSatisfied, NoRequirements, COAexpdate, Original_ID, Original_custID, Original_State, Original_BeenHired, Original_IsExempt, Original_ExpirationDate, Original_Companyhandles, Original_Licensenumber, Original_Hasproblem, Original_CornerstoneOriginal, Original_COAReq, Original_LICReq, Original_COASatisfied, Original_LICSatisfied, Original_NoRequirements, Original_COAexpdate, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class rmServiceItemTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rmServiceItem"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            tableMapping.ColumnMappings.Add("CustID", "CustID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Desc", "Desc")
            tableMapping.ColumnMappings.Add("DateBegin", "DateBegin")
            tableMapping.ColumnMappings.Add("DateEnd", "DateEnd")
            tableMapping.ColumnMappings.Add("DateRemind", "DateRemind")
            tableMapping.ColumnMappings.Add("Satisfied", "Satisfied")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Applies", "Applies")
            tableMapping.ColumnMappings.Add("DateRenewal", "DateRenewal")
            tableMapping.ColumnMappings.Add("DateExpiration", "DateExpiration")
            tableMapping.ColumnMappings.Add("CurrentStatus", "CurrentStatus")
            tableMapping.ColumnMappings.Add("CurrentProcess", "CurrentProcess")
            tableMapping.ColumnMappings.Add("IsBondItem", "IsBondItem")
            tableMapping.ColumnMappings.Add("BondNumber", "BondNumber")
            tableMapping.ColumnMappings.Add("BondState", "BondState")
            tableMapping.ColumnMappings.Add("BondAmount", "BondAmount")
            tableMapping.ColumnMappings.Add("BondAgencyName", "BondAgencyName")
            tableMapping.ColumnMappings.Add("AssignedTo", "AssignedTo")
            tableMapping.ColumnMappings.Add("AtClient", "AtClient")
            tableMapping.ColumnMappings.Add("AtState", "AtState")
            tableMapping.ColumnMappings.Add("TenDaySent", "TenDaySent")
            tableMapping.ColumnMappings.Add("AtCornerstone", "AtCornerstone")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[rmServiceItem] WHERE (([ID] = @Original_ID) AND ((@IsNull_Date" & _
                "Created = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreated" & _
                ")) AND ((@IsNull_CustID = 1 AND [CustID] IS NULL) OR ([CustID] = @Original_CustI" & _
                "D)) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND" & _
                " ((@IsNull_DateBegin = 1 AND [DateBegin] IS NULL) OR ([DateBegin] = @Original_Da" & _
                "teBegin)) AND ((@IsNull_DateEnd = 1 AND [DateEnd] IS NULL) OR ([DateEnd] = @Orig" & _
                "inal_DateEnd)) AND ((@IsNull_DateRemind = 1 AND [DateRemind] IS NULL) OR ([DateR" & _
                "emind] = @Original_DateRemind)) AND ((@IsNull_Satisfied = 1 AND [Satisfied] IS N" & _
                "ULL) OR ([Satisfied] = @Original_Satisfied)) AND ((@IsNull_Cost = 1 AND [Cost] I" & _
                "S NULL) OR ([Cost] = @Original_Cost)) AND ((@IsNull_Applies = 1 AND [Applies] IS" & _
                " NULL) OR ([Applies] = @Original_Applies)) AND ((@IsNull_DateRenewal = 1 AND [Da" & _
                "teRenewal] IS NULL) OR ([DateRenewal] = @Original_DateRenewal)) AND ((@IsNull_Da" & _
                "teExpiration = 1 AND [DateExpiration] IS NULL) OR ([DateExpiration] = @Original_" & _
                "DateExpiration)) AND ((@IsNull_CurrentProcess = 1 AND [CurrentProcess] IS NULL) " & _
                "OR ([CurrentProcess] = @Original_CurrentProcess)) AND ((@IsNull_IsBondItem = 1 A" & _
                "ND [IsBondItem] IS NULL) OR ([IsBondItem] = @Original_IsBondItem)) AND ((@IsNull" & _
                "_BondNumber = 1 AND [BondNumber] IS NULL) OR ([BondNumber] = @Original_BondNumbe" & _
                "r)) AND ((@IsNull_BondState = 1 AND [BondState] IS NULL) OR ([BondState] = @Orig" & _
                "inal_BondState)) AND ((@IsNull_BondAmount = 1 AND [BondAmount] IS NULL) OR ([Bon" & _
                "dAmount] = @Original_BondAmount)) AND ((@IsNull_BondAgencyName = 1 AND [BondAgen" & _
                "cyName] IS NULL) OR ([BondAgencyName] = @Original_BondAgencyName)) AND ((@IsNull" & _
                "_AssignedTo = 1 AND [AssignedTo] IS NULL) OR ([AssignedTo] = @Original_AssignedT" & _
                "o)) AND ((@IsNull_AtClient = 1 AND [AtClient] IS NULL) OR ([AtClient] = @Origina" & _
                "l_AtClient)) AND ((@IsNull_AtState = 1 AND [AtState] IS NULL) OR ([AtState] = @O" & _
                "riginal_AtState)) AND ((@IsNull_TenDaySent = 1 AND [TenDaySent] IS NULL) OR ([Te" & _
                "nDaySent] = @Original_TenDaySent)) AND ((@IsNull_AtCornerstone = 1 AND [AtCorner" & _
                "stone] IS NULL) OR ([AtCornerstone] = @Original_AtCornerstone)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateBegin", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateBegin", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEnd", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEnd", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRemind", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRemind", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Satisfied", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Satisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Applies", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Applies", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRenewal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRenewal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExpiration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExpiration", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CurrentProcess", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CurrentProcess", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsBondItem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsBondItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondState", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondState", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondAgencyName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondAgencyName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssignedTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssignedTo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtState", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtState", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TenDaySent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TenDaySent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtCornerstone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtCornerstone", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtCornerstone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtCornerstone", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[rmServiceItem] ([DateCreated], [CustID], [Name], [Desc], [Date" & _
                "Begin], [DateEnd], [DateRemind], [Satisfied], [Cost], [Applies], [DateRenewal], " & _
                "[DateExpiration], [CurrentStatus], [CurrentProcess], [IsBondItem], [BondNumber]," & _
                " [BondState], [BondAmount], [BondAgencyName], [AssignedTo], [AtClient], [AtState" & _
                "], [TenDaySent], [AtCornerstone]) VALUES (@DateCreated, @CustID, @Name, @Desc, @" & _
                "DateBegin, @DateEnd, @DateRemind, @Satisfied, @Cost, @Applies, @DateRenewal, @Da" & _
                "teExpiration, @CurrentStatus, @CurrentProcess, @IsBondItem, @BondNumber, @BondSt" & _
                "ate, @BondAmount, @BondAgencyName, @AssignedTo, @AtClient, @AtState, @TenDaySent" & _
                ", @AtCornerstone);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, DateCreated, CustID, Name, [Desc], DateBegin, Dat" & _
                "eEnd, DateRemind, Satisfied, Cost, Applies, DateRenewal, DateExpiration, Current" & _
                "Status, CurrentProcess, IsBondItem, BondNumber, BondState, BondAmount, BondAgenc" & _
                "yName, AssignedTo, AtClient, AtState, TenDaySent, AtCornerstone FROM rmServiceIt" & _
                "em WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Desc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateBegin", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEnd", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRemind", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Satisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Applies", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRenewal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpiration", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentStatus", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentStatus", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentProcess", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsBondItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondState", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondAgencyName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedTo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtState", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TenDaySent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtCornerstone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtCornerstone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[rmServiceItem] SET [DateCreated] = @DateCreated, [CustID] = @CustID" & _
                ", [Name] = @Name, [Desc] = @Desc, [DateBegin] = @DateBegin, [DateEnd] = @DateEnd" & _
                ", [DateRemind] = @DateRemind, [Satisfied] = @Satisfied, [Cost] = @Cost, [Applies" & _
                "] = @Applies, [DateRenewal] = @DateRenewal, [DateExpiration] = @DateExpiration, " & _
                "[CurrentStatus] = @CurrentStatus, [CurrentProcess] = @CurrentProcess, [IsBondIte" & _
                "m] = @IsBondItem, [BondNumber] = @BondNumber, [BondState] = @BondState, [BondAmo" & _
                "unt] = @BondAmount, [BondAgencyName] = @BondAgencyName, [AssignedTo] = @Assigned" & _
                "To, [AtClient] = @AtClient, [AtState] = @AtState, [TenDaySent] = @TenDaySent, [A" & _
                "tCornerstone] = @AtCornerstone WHERE (([ID] = @Original_ID) AND ((@IsNull_DateCr" & _
                "eated = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreated))" & _
                " AND ((@IsNull_CustID = 1 AND [CustID] IS NULL) OR ([CustID] = @Original_CustID)" & _
                ") AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND (" & _
                "(@IsNull_DateBegin = 1 AND [DateBegin] IS NULL) OR ([DateBegin] = @Original_Date" & _
                "Begin)) AND ((@IsNull_DateEnd = 1 AND [DateEnd] IS NULL) OR ([DateEnd] = @Origin" & _
                "al_DateEnd)) AND ((@IsNull_DateRemind = 1 AND [DateRemind] IS NULL) OR ([DateRem" & _
                "ind] = @Original_DateRemind)) AND ((@IsNull_Satisfied = 1 AND [Satisfied] IS NUL" & _
                "L) OR ([Satisfied] = @Original_Satisfied)) AND ((@IsNull_Cost = 1 AND [Cost] IS " & _
                "NULL) OR ([Cost] = @Original_Cost)) AND ((@IsNull_Applies = 1 AND [Applies] IS N" & _
                "ULL) OR ([Applies] = @Original_Applies)) AND ((@IsNull_DateRenewal = 1 AND [Date" & _
                "Renewal] IS NULL) OR ([DateRenewal] = @Original_DateRenewal)) AND ((@IsNull_Date" & _
                "Expiration = 1 AND [DateExpiration] IS NULL) OR ([DateExpiration] = @Original_Da" & _
                "teExpiration)) AND ((@IsNull_CurrentProcess = 1 AND [CurrentProcess] IS NULL) OR" & _
                " ([CurrentProcess] = @Original_CurrentProcess)) AND ((@IsNull_IsBondItem = 1 AND" & _
                " [IsBondItem] IS NULL) OR ([IsBondItem] = @Original_IsBondItem)) AND ((@IsNull_B" & _
                "ondNumber = 1 AND [BondNumber] IS NULL) OR ([BondNumber] = @Original_BondNumber)" & _
                ") AND ((@IsNull_BondState = 1 AND [BondState] IS NULL) OR ([BondState] = @Origin" & _
                "al_BondState)) AND ((@IsNull_BondAmount = 1 AND [BondAmount] IS NULL) OR ([BondA" & _
                "mount] = @Original_BondAmount)) AND ((@IsNull_BondAgencyName = 1 AND [BondAgency" & _
                "Name] IS NULL) OR ([BondAgencyName] = @Original_BondAgencyName)) AND ((@IsNull_A" & _
                "ssignedTo = 1 AND [AssignedTo] IS NULL) OR ([AssignedTo] = @Original_AssignedTo)" & _
                ") AND ((@IsNull_AtClient = 1 AND [AtClient] IS NULL) OR ([AtClient] = @Original_" & _
                "AtClient)) AND ((@IsNull_AtState = 1 AND [AtState] IS NULL) OR ([AtState] = @Ori" & _
                "ginal_AtState)) AND ((@IsNull_TenDaySent = 1 AND [TenDaySent] IS NULL) OR ([TenD" & _
                "aySent] = @Original_TenDaySent)) AND ((@IsNull_AtCornerstone = 1 AND [AtCornerst" & _
                "one] IS NULL) OR ([AtCornerstone] = @Original_AtCornerstone)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, Date" & _
                "Created, CustID, Name, [Desc], DateBegin, DateEnd, DateRemind, Satisfied, Cost, " & _
                "Applies, DateRenewal, DateExpiration, CurrentStatus, CurrentProcess, IsBondItem," & _
                " BondNumber, BondState, BondAmount, BondAgencyName, AssignedTo, AtClient, AtStat" & _
                "e, TenDaySent, AtCornerstone FROM rmServiceItem WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Desc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateBegin", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEnd", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRemind", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Satisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Applies", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRenewal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpiration", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentStatus", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentStatus", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentProcess", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsBondItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondState", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondAgencyName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedTo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtState", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TenDaySent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtCornerstone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtCornerstone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateBegin", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateBegin", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEnd", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEnd", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRemind", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRemind", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Satisfied", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Satisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Applies", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Applies", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRenewal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRenewal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExpiration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExpiration", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CurrentProcess", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CurrentProcess", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsBondItem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsBondItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondState", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondState", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondAgencyName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondAgencyName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssignedTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssignedTo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtState", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtState", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TenDaySent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TenDaySent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtCornerstone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtCornerstone", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtCornerstone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtCornerstone", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QBTransactionExtractor.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, DateCreated, CustID, Name, [Desc], DateBegin, DateEnd, DateRemind, Sat" & _
                "isfied, Cost, Applies, DateRenewal, DateExpiration, CurrentStatus, CurrentProces" & _
                "s, IsBondItem, BondNumber, BondState, BondAmount, BondAgencyName, AssignedTo, At" & _
                "Client, AtState, TenDaySent, AtCornerstone FROM dbo.rmServiceItem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As StatusReportDataSet.rmServiceItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As StatusReportDataSet.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StatusReportDataSet.rmServiceItemDataTable = New StatusReportDataSet.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As StatusReportDataSet.rmServiceItemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As StatusReportDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "rmServiceItem")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_ID As Long, _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_CustID As Global.System.Nullable(Of Integer), _
                    ByVal Original_Name As String, _
                    ByVal Original_DateBegin As Global.System.Nullable(Of Date), _
                    ByVal Original_DateEnd As Global.System.Nullable(Of Date), _
                    ByVal Original_DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Original_Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Original_Applies As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal Original_DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal Original_CurrentProcess As String, _
                    ByVal Original_IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal Original_BondState As String, _
                    ByVal Original_BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal Original_BondAgencyName As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal Original_AtState As Global.System.Nullable(Of Boolean), _
                    ByVal Original_TenDaySent As Global.System.Nullable(Of Boolean), _
                    ByVal Original_AtCornerstone As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Long)
            If (Original_DateCreated.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DateCreated.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CustID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CustID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Name, String)
            End If
            If (Original_DateBegin.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DateBegin.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEnd.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DateEnd.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRemind.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DateRemind.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Satisfied.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Satisfied.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Cost.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Cost.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_Applies.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Applies.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRenewal.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_DateRenewal.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_DateExpiration.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_DateExpiration.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_CurrentProcess Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CurrentProcess, String)
            End If
            If (Original_IsBondItem.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IsBondItem.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_BondNumber.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_BondNumber.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_BondState Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_BondState, String)
            End If
            If (Original_BondAmount.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_BondAmount.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_BondAgencyName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_BondAgencyName, String)
            End If
            If (Original_AssignedTo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_AssignedTo, String)
            End If
            If (Original_AtClient.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_AtClient.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_AtState.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_AtState.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_TenDaySent.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_TenDaySent.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_AtCornerstone.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_AtCornerstone.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal CustID As Global.System.Nullable(Of Integer), _
                    ByVal Name As String, _
                    ByVal Desc As String, _
                    ByVal DateBegin As Global.System.Nullable(Of Date), _
                    ByVal DateEnd As Global.System.Nullable(Of Date), _
                    ByVal DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Applies As Global.System.Nullable(Of Boolean), _
                    ByVal DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal CurrentStatus As String, _
                    ByVal CurrentProcess As String, _
                    ByVal IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal BondState As String, _
                    ByVal BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal BondAgencyName As String, _
                    ByVal AssignedTo As String, _
                    ByVal AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal AtState As Global.System.Nullable(Of Boolean), _
                    ByVal TenDaySent As Global.System.Nullable(Of Boolean), _
                    ByVal AtCornerstone As Global.System.Nullable(Of Boolean)) As Integer
            If (DateCreated.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DateCreated.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CustID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CustID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Name, String)
            End If
            If (Desc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Desc, String)
            End If
            If (DateBegin.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DateBegin.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateEnd.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DateEnd.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DateRemind.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DateRemind.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Satisfied.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Satisfied.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Cost.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Cost.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Applies.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Applies.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DateRenewal.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DateRenewal.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DateExpiration.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DateExpiration.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CurrentStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CurrentStatus, String)
            End If
            If (CurrentProcess Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CurrentProcess, String)
            End If
            If (IsBondItem.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(IsBondItem.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (BondNumber.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(BondNumber.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (BondState Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(BondState, String)
            End If
            If (BondAmount.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(BondAmount.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BondAgencyName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(BondAgencyName, String)
            End If
            If (AssignedTo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(AssignedTo, String)
            End If
            If (AtClient.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AtClient.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AtState.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(AtState.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (TenDaySent.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(TenDaySent.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (AtCornerstone.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(AtCornerstone.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal CustID As Global.System.Nullable(Of Integer), _
                    ByVal Name As String, _
                    ByVal Desc As String, _
                    ByVal DateBegin As Global.System.Nullable(Of Date), _
                    ByVal DateEnd As Global.System.Nullable(Of Date), _
                    ByVal DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Applies As Global.System.Nullable(Of Boolean), _
                    ByVal DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal CurrentStatus As String, _
                    ByVal CurrentProcess As String, _
                    ByVal IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal BondState As String, _
                    ByVal BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal BondAgencyName As String, _
                    ByVal AssignedTo As String, _
                    ByVal AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal AtState As Global.System.Nullable(Of Boolean), _
                    ByVal TenDaySent As Global.System.Nullable(Of Boolean), _
                    ByVal AtCornerstone As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ID As Long, _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_CustID As Global.System.Nullable(Of Integer), _
                    ByVal Original_Name As String, _
                    ByVal Original_DateBegin As Global.System.Nullable(Of Date), _
                    ByVal Original_DateEnd As Global.System.Nullable(Of Date), _
                    ByVal Original_DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Original_Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Original_Applies As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal Original_DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal Original_CurrentProcess As String, _
                    ByVal Original_IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal Original_BondState As String, _
                    ByVal Original_BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal Original_BondAgencyName As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal Original_AtState As Global.System.Nullable(Of Boolean), _
                    ByVal Original_TenDaySent As Global.System.Nullable(Of Boolean), _
                    ByVal Original_AtCornerstone As Global.System.Nullable(Of Boolean), _
                    ByVal ID As Integer) As Integer
            If (DateCreated.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DateCreated.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CustID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CustID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Name, String)
            End If
            If (Desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Desc, String)
            End If
            If (DateBegin.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DateBegin.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateEnd.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DateEnd.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DateRemind.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DateRemind.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Satisfied.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Satisfied.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Cost.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Cost.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Applies.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Applies.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DateRenewal.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DateRenewal.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DateExpiration.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(DateExpiration.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CurrentStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CurrentStatus, String)
            End If
            If (CurrentProcess Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CurrentProcess, String)
            End If
            If (IsBondItem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(IsBondItem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (BondNumber.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(BondNumber.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (BondState Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(BondState, String)
            End If
            If (BondAmount.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(BondAmount.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BondAgencyName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(BondAgencyName, String)
            End If
            If (AssignedTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(AssignedTo, String)
            End If
            If (AtClient.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(AtClient.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AtState.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(AtState.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (TenDaySent.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(TenDaySent.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (AtCornerstone.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(AtCornerstone.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ID, Long)
            If (Original_DateCreated.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_DateCreated.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_CustID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_CustID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Name, String)
            End If
            If (Original_DateBegin.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_DateBegin.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEnd.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_DateEnd.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRemind.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_DateRemind.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_Satisfied.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Satisfied.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Cost.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Cost.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Applies.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Applies.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRenewal.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_DateRenewal.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_DateExpiration.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_DateExpiration.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_CurrentProcess Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_CurrentProcess, String)
            End If
            If (Original_IsBondItem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_IsBondItem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_BondNumber.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_BondNumber.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_BondState Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_BondState, String)
            End If
            If (Original_BondAmount.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_BondAmount.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_BondAgencyName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_BondAgencyName, String)
            End If
            If (Original_AssignedTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_AssignedTo, String)
            End If
            If (Original_AtClient.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_AtClient.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_AtState.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_AtState.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_TenDaySent.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_TenDaySent.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_AtCornerstone.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_AtCornerstone.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(69).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal CustID As Global.System.Nullable(Of Integer), _
                    ByVal Name As String, _
                    ByVal Desc As String, _
                    ByVal DateBegin As Global.System.Nullable(Of Date), _
                    ByVal DateEnd As Global.System.Nullable(Of Date), _
                    ByVal DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Applies As Global.System.Nullable(Of Boolean), _
                    ByVal DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal CurrentStatus As String, _
                    ByVal CurrentProcess As String, _
                    ByVal IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal BondState As String, _
                    ByVal BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal BondAgencyName As String, _
                    ByVal AssignedTo As String, _
                    ByVal AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal AtState As Global.System.Nullable(Of Boolean), _
                    ByVal TenDaySent As Global.System.Nullable(Of Boolean), _
                    ByVal AtCornerstone As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ID As Long, _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_CustID As Global.System.Nullable(Of Integer), _
                    ByVal Original_Name As String, _
                    ByVal Original_DateBegin As Global.System.Nullable(Of Date), _
                    ByVal Original_DateEnd As Global.System.Nullable(Of Date), _
                    ByVal Original_DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Original_Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Original_Applies As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal Original_DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal Original_CurrentProcess As String, _
                    ByVal Original_IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal Original_BondState As String, _
                    ByVal Original_BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal Original_BondAgencyName As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal Original_AtState As Global.System.Nullable(Of Boolean), _
                    ByVal Original_TenDaySent As Global.System.Nullable(Of Boolean), _
                    ByVal Original_AtCornerstone As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(DateCreated, CustID, Name, Desc, DateBegin, DateEnd, DateRemind, Satisfied, Cost, Applies, DateRenewal, DateExpiration, CurrentStatus, CurrentProcess, IsBondItem, BondNumber, BondState, BondAmount, BondAgencyName, AssignedTo, AtClient, AtState, TenDaySent, AtCornerstone, Original_ID, Original_DateCreated, Original_CustID, Original_Name, Original_DateBegin, Original_DateEnd, Original_DateRemind, Original_Satisfied, Original_Cost, Original_Applies, Original_DateRenewal, Original_DateExpiration, Original_CurrentProcess, Original_IsBondItem, Original_BondNumber, Original_BondState, Original_BondAmount, Original_BondAgencyName, Original_AssignedTo, Original_AtClient, Original_AtState, Original_TenDaySent, Original_AtCornerstone, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SIAuditTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SIAudit"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SIid", "SIid")
            tableMapping.ColumnMappings.Add("DateAC", "DateAC")
            tableMapping.ColumnMappings.Add("DateUC", "DateUC")
            tableMapping.ColumnMappings.Add("DateAS", "DateAS")
            tableMapping.ColumnMappings.Add("DateSat", "DateSat")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SIAudit] WHERE (([ID] = @Original_ID) AND ([SIid] = @Original_" & _
                "SIid) AND ((@IsNull_DateAC = 1 AND [DateAC] IS NULL) OR ([DateAC] = @Original_Da" & _
                "teAC)) AND ((@IsNull_DateUC = 1 AND [DateUC] IS NULL) OR ([DateUC] = @Original_D" & _
                "ateUC)) AND ((@IsNull_DateAS = 1 AND [DateAS] IS NULL) OR ([DateAS] = @Original_" & _
                "DateAS)) AND ((@IsNull_DateSat = 1 AND [DateSat] IS NULL) OR ([DateSat] = @Origi" & _
                "nal_DateSat)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateUC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateSat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SIAudit] ([SIid], [DateAC], [DateUC], [DateAS], [DateSat]) VAL" & _
                "UES (@SIid, @DateAC, @DateUC, @DateAS, @DateSat);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, SIid, DateAC, Date" & _
                "UC, DateAS, DateSat FROM SIAudit WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SIAudit] SET [SIid] = @SIid, [DateAC] = @DateAC, [DateUC] = @DateUC" & _
                ", [DateAS] = @DateAS, [DateSat] = @DateSat WHERE (([ID] = @Original_ID) AND ([SI" & _
                "id] = @Original_SIid) AND ((@IsNull_DateAC = 1 AND [DateAC] IS NULL) OR ([DateAC" & _
                "] = @Original_DateAC)) AND ((@IsNull_DateUC = 1 AND [DateUC] IS NULL) OR ([DateU" & _
                "C] = @Original_DateUC)) AND ((@IsNull_DateAS = 1 AND [DateAS] IS NULL) OR ([Date" & _
                "AS] = @Original_DateAS)) AND ((@IsNull_DateSat = 1 AND [DateSat] IS NULL) OR ([D" & _
                "ateSat] = @Original_DateSat)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, SIid, DateAC, DateUC, DateAS, DateSa" & _
                "t FROM SIAudit WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateUC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateSat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QBTransactionExtractor.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, SIid, DateAC, DateUC, DateAS, DateSat FROM dbo.SIAudit"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As StatusReportDataSet.SIAuditDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As StatusReportDataSet.SIAuditDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StatusReportDataSet.SIAuditDataTable = New StatusReportDataSet.SIAuditDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As StatusReportDataSet.SIAuditDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As StatusReportDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SIAudit")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Long, ByVal Original_SIid As Integer, ByVal Original_DateAC As Global.System.Nullable(Of Date), ByVal Original_DateUC As Global.System.Nullable(Of Date), ByVal Original_DateAS As Global.System.Nullable(Of Date), ByVal Original_DateSat As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SIid, Integer)
            If (Original_DateAC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DateAC.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_DateUC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DateUC.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_DateAS.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DateAS.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_DateSat.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_DateSat.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SIid As Integer, ByVal DateAC As Global.System.Nullable(Of Date), ByVal DateUC As Global.System.Nullable(Of Date), ByVal DateAS As Global.System.Nullable(Of Date), ByVal DateSat As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SIid, Integer)
            If (DateAC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateAC.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateUC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateUC.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DateAS.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DateAS.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DateSat.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DateSat.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SIid As Integer, ByVal DateAC As Global.System.Nullable(Of Date), ByVal DateUC As Global.System.Nullable(Of Date), ByVal DateAS As Global.System.Nullable(Of Date), ByVal DateSat As Global.System.Nullable(Of Date), ByVal Original_ID As Long, ByVal Original_SIid As Integer, ByVal Original_DateAC As Global.System.Nullable(Of Date), ByVal Original_DateUC As Global.System.Nullable(Of Date), ByVal Original_DateAS As Global.System.Nullable(Of Date), ByVal Original_DateSat As Global.System.Nullable(Of Date), ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SIid, Integer)
            If (DateAC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateAC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateUC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateUC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DateAS.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DateAS.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DateSat.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DateSat.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID, Long)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SIid, Integer)
            If (Original_DateAC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DateAC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_DateUC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DateUC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DateAS.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DateAS.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_DateSat.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DateSat.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SIid As Integer, ByVal DateAC As Global.System.Nullable(Of Date), ByVal DateUC As Global.System.Nullable(Of Date), ByVal DateAS As Global.System.Nullable(Of Date), ByVal DateSat As Global.System.Nullable(Of Date), ByVal Original_ID As Long, ByVal Original_SIid As Integer, ByVal Original_DateAC As Global.System.Nullable(Of Date), ByVal Original_DateUC As Global.System.Nullable(Of Date), ByVal Original_DateAS As Global.System.Nullable(Of Date), ByVal Original_DateSat As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(SIid, DateAC, DateUC, DateAS, DateSat, Original_ID, Original_SIid, Original_DateAC, Original_DateUC, Original_DateAS, Original_DateSat, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class StateAssessmentTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "StateAssessment"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("STATE", "STATE")
            tableMapping.ColumnMappings.Add("COAReq", "COAReq")
            tableMapping.ColumnMappings.Add("LICReq", "LICReq")
            tableMapping.ColumnMappings.Add("NoRequirement", "NoRequirement")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [StateAssessment] WHERE (([ID] = @Original_ID) AND ((@IsNull_STATE = " & _
                "1 AND [STATE] IS NULL) OR ([STATE] = @Original_STATE)) AND ((@IsNull_COAReq = 1 " & _
                "AND [COAReq] IS NULL) OR ([COAReq] = @Original_COAReq)) AND ((@IsNull_LICReq = 1" & _
                " AND [LICReq] IS NULL) OR ([LICReq] = @Original_LICReq)) AND ((@IsNull_NoRequire" & _
                "ment = 1 AND [NoRequirement] IS NULL) OR ([NoRequirement] = @Original_NoRequirem" & _
                "ent)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NoRequirement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirement", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoRequirement", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirement", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [StateAssessment] ([STATE], [COAReq], [LICReq], [NoRequirement]) VALU" & _
                "ES (@STATE, @COAReq, @LICReq, @NoRequirement);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, STATE, COAReq, LICReq" & _
                ", NoRequirement FROM StateAssessment WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoRequirement", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirement", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [StateAssessment] SET [STATE] = @STATE, [COAReq] = @COAReq, [LICReq] = @LI" & _
                "CReq, [NoRequirement] = @NoRequirement WHERE (([ID] = @Original_ID) AND ((@IsNul" & _
                "l_STATE = 1 AND [STATE] IS NULL) OR ([STATE] = @Original_STATE)) AND ((@IsNull_C" & _
                "OAReq = 1 AND [COAReq] IS NULL) OR ([COAReq] = @Original_COAReq)) AND ((@IsNull_" & _
                "LICReq = 1 AND [LICReq] IS NULL) OR ([LICReq] = @Original_LICReq)) AND ((@IsNull" & _
                "_NoRequirement = 1 AND [NoRequirement] IS NULL) OR ([NoRequirement] = @Original_" & _
                "NoRequirement)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, STATE, COAReq, LICReq, NoRequirement FROM StateAss" & _
                "essment WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoRequirement", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirement", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICReq", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICReq", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICReq", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NoRequirement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirement", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoRequirement", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoRequirement", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QBTransactionExtractor.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ID, STATE, COAReq, LICReq, NoRequirement" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         StateAssessment" & _
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     COAReq" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         StateAssessment" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (STATE LIKE @theState)" & _
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theState", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "STATE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As StatusReportDataSet.StateAssessmentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As StatusReportDataSet.StateAssessmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StatusReportDataSet.StateAssessmentDataTable = New StatusReportDataSet.StateAssessmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As StatusReportDataSet.StateAssessmentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As StatusReportDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "StateAssessment")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Integer, ByVal Original_STATE As String, ByVal Original_COAReq As Global.System.Nullable(Of Boolean), ByVal Original_LICReq As Global.System.Nullable(Of Boolean), ByVal Original_NoRequirement As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Integer)
            If (Original_STATE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_STATE, String)
            End If
            If (Original_COAReq.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_COAReq.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_LICReq.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LICReq.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_NoRequirement.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_NoRequirement.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal STATE As String, ByVal COAReq As Global.System.Nullable(Of Boolean), ByVal LICReq As Global.System.Nullable(Of Boolean), ByVal NoRequirement As Global.System.Nullable(Of Boolean)) As Integer
            If (STATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STATE, String)
            End If
            If (COAReq.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COAReq.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (LICReq.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LICReq.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NoRequirement.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NoRequirement.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal STATE As String, ByVal COAReq As Global.System.Nullable(Of Boolean), ByVal LICReq As Global.System.Nullable(Of Boolean), ByVal NoRequirement As Global.System.Nullable(Of Boolean), ByVal Original_ID As Integer, ByVal Original_STATE As String, ByVal Original_COAReq As Global.System.Nullable(Of Boolean), ByVal Original_LICReq As Global.System.Nullable(Of Boolean), ByVal Original_NoRequirement As Global.System.Nullable(Of Boolean), ByVal ID As Integer) As Integer
            If (STATE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STATE, String)
            End If
            If (COAReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COAReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (LICReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LICReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NoRequirement.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NoRequirement.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID, Integer)
            If (Original_STATE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_STATE, String)
            End If
            If (Original_COAReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COAReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_LICReq.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_LICReq.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_NoRequirement.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_NoRequirement.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal STATE As String, ByVal COAReq As Global.System.Nullable(Of Boolean), ByVal LICReq As Global.System.Nullable(Of Boolean), ByVal NoRequirement As Global.System.Nullable(Of Boolean), ByVal Original_ID As Integer, ByVal Original_STATE As String, ByVal Original_COAReq As Global.System.Nullable(Of Boolean), ByVal Original_LICReq As Global.System.Nullable(Of Boolean), ByVal Original_NoRequirement As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(STATE, COAReq, LICReq, NoRequirement, Original_ID, Original_STATE, Original_COAReq, Original_LICReq, Original_NoRequirement, Original_ID)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function IsCOARequired(ByVal theState As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (theState Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(theState, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PresidentEmailAddressTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PresidentEmailAddress"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("custID", "custID")
            tableMapping.ColumnMappings.Add("emailAddress", "emailAddress")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [PresidentEmailAddress] WHERE (([ID] = @Original_ID) AND ([custID] = " & _
                "@Original_custID) AND ([emailAddress] = @Original_emailAddress))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_emailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "emailAddress", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [PresidentEmailAddress] ([custID], [emailAddress]) VALUES (@custID, @" & _
                "emailAddress);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, custID, emailAddress FROM PresidentEmailAddress WHERE" & _
                " (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@emailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "emailAddress", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [PresidentEmailAddress] SET [custID] = @custID, [emailAddress] = @emailAdd" & _
                "ress WHERE (([ID] = @Original_ID) AND ([custID] = @Original_custID) AND ([emailA" & _
                "ddress] = @Original_emailAddress));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, custID, emailAddress FROM Presid" & _
                "entEmailAddress WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@emailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "emailAddress", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_emailAddress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "emailAddress", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QBTransactionExtractor.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PresidentEmailAddress.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            PresidentEmailAddress"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [PresidentEmailAddress] ([custID], [emailAddress]) VALUES (@thecustID" & _
                ", @theemailAddress)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thecustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theemailAddress", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "emailAddress", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        PresidentEmailAddress.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            PresidentEmailAddress" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHE" & _
                "RE custID = @theCustID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        EmailAddress" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            PresidentEmailAddress" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE custID =" & _
                " @theCustID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT COUNT(*) FROM PresidentEmailAddress" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE custID = @theCustID"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "UPDATE [PresidentEmailAddress] SET  [emailAddress] = @theemailAddress WHERE ID = " & _
                "@Original_ID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theemailAddress", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "emailAddress", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As StatusReportDataSet.PresidentEmailAddressDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As StatusReportDataSet.PresidentEmailAddressDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StatusReportDataSet.PresidentEmailAddressDataTable = New StatusReportDataSet.PresidentEmailAddressDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCustID(ByVal dataTable As StatusReportDataSet.PresidentEmailAddressDataTable, ByVal theCustID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(theCustID, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As StatusReportDataSet.PresidentEmailAddressDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As StatusReportDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PresidentEmailAddress")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Integer, ByVal Original_custID As Integer, ByVal Original_emailAddress As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_custID, Integer)
            If (Original_emailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_emailAddress")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_emailAddress, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal custID As Integer, ByVal emailAddress As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(custID, Integer)
            If (emailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("emailAddress")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(emailAddress, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal custID As Integer, ByVal emailAddress As String, ByVal Original_ID As Integer, ByVal Original_custID As Integer, ByVal Original_emailAddress As String, ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(custID, Integer)
            If (emailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("emailAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(emailAddress, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_custID, Integer)
            If (Original_emailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_emailAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_emailAddress, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal custID As Integer, ByVal emailAddress As String, ByVal Original_ID As Integer, ByVal Original_custID As Integer, ByVal Original_emailAddress As String) As Integer
            Return Me.Update(custID, emailAddress, Original_ID, Original_custID, Original_emailAddress, Original_ID)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _
        Public Overridable Overloads Function AddNewPresidentEmailAddress(ByVal thecustID As Integer, ByVal theemailAddress As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(thecustID, Integer)
            If (theemailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("theemailAddress")
            Else
                command.Parameters(1).Value = CType(theemailAddress, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetPresidentEmailAddress(ByVal theCustID As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(theCustID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function PresEmailAddressExists(ByVal theCustID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(theCustID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue, Integer))
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function UpdatePresidentEmailAddress(ByVal theemailAddress As String, ByVal Original_ID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            If (theemailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("theemailAddress")
            Else
                command.Parameters(0).Value = CType(theemailAddress, String)
            End If
            command.Parameters(1).Value = CType(Original_ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function
    End Class
End Namespace
