'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CornerstoneSQLRenewalQueue"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CornerstoneSQLRenewalQueue
    Inherits Global.System.Data.DataSet
    
    Private tableCompany As CompanyDataTable
    
    Private tablermServiceItem As rmServiceItemDataTable
    
    Private tablermUsers As rmUsersDataTable
    
    Private tableStates As StatesDataTable
    
    Private tablermListServiceItems As rmListServiceItemsDataTable
    
    Private tableClientProjectItems As ClientProjectItemsDataTable
    
    Private tableRenewalQueue As RenewalQueueDataTable
    
    Private tableRenewalFees As RenewalFeesDataTable
    
    Private tableSIAudit As SIAuditDataTable
    
    Private tableRenewalQueueHistory As RenewalQueueHistoryDataTable
    
    Private tableRenewalAssignees As RenewalAssigneesDataTable
    
    Private relationrmServiceItem_SIAudit As Global.System.Data.DataRelation
    
    Private relationCompany_rmServiceItem As Global.System.Data.DataRelation
    
    Private relationCompany_RenewalAssignees As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Company")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyDataTable(ds.Tables("Company")))
            End If
            If (Not (ds.Tables("rmServiceItem")) Is Nothing) Then
                MyBase.Tables.Add(New rmServiceItemDataTable(ds.Tables("rmServiceItem")))
            End If
            If (Not (ds.Tables("rmUsers")) Is Nothing) Then
                MyBase.Tables.Add(New rmUsersDataTable(ds.Tables("rmUsers")))
            End If
            If (Not (ds.Tables("States")) Is Nothing) Then
                MyBase.Tables.Add(New StatesDataTable(ds.Tables("States")))
            End If
            If (Not (ds.Tables("rmListServiceItems")) Is Nothing) Then
                MyBase.Tables.Add(New rmListServiceItemsDataTable(ds.Tables("rmListServiceItems")))
            End If
            If (Not (ds.Tables("ClientProjectItems")) Is Nothing) Then
                MyBase.Tables.Add(New ClientProjectItemsDataTable(ds.Tables("ClientProjectItems")))
            End If
            If (Not (ds.Tables("RenewalQueue")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalQueueDataTable(ds.Tables("RenewalQueue")))
            End If
            If (Not (ds.Tables("RenewalFees")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalFeesDataTable(ds.Tables("RenewalFees")))
            End If
            If (Not (ds.Tables("SIAudit")) Is Nothing) Then
                MyBase.Tables.Add(New SIAuditDataTable(ds.Tables("SIAudit")))
            End If
            If (Not (ds.Tables("RenewalQueueHistory")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalQueueHistoryDataTable(ds.Tables("RenewalQueueHistory")))
            End If
            If (Not (ds.Tables("RenewalAssignees")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalAssigneesDataTable(ds.Tables("RenewalAssignees")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Company() As CompanyDataTable
        Get
            Return Me.tableCompany
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rmServiceItem() As rmServiceItemDataTable
        Get
            Return Me.tablermServiceItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rmUsers() As rmUsersDataTable
        Get
            Return Me.tablermUsers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property States() As StatesDataTable
        Get
            Return Me.tableStates
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rmListServiceItems() As rmListServiceItemsDataTable
        Get
            Return Me.tablermListServiceItems
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientProjectItems() As ClientProjectItemsDataTable
        Get
            Return Me.tableClientProjectItems
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RenewalQueue() As RenewalQueueDataTable
        Get
            Return Me.tableRenewalQueue
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RenewalFees() As RenewalFeesDataTable
        Get
            Return Me.tableRenewalFees
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SIAudit() As SIAuditDataTable
        Get
            Return Me.tableSIAudit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RenewalQueueHistory() As RenewalQueueHistoryDataTable
        Get
            Return Me.tableRenewalQueueHistory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RenewalAssignees() As RenewalAssigneesDataTable
        Get
            Return Me.tableRenewalAssignees
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CornerstoneSQLRenewalQueue = CType(MyBase.Clone,CornerstoneSQLRenewalQueue)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Company")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyDataTable(ds.Tables("Company")))
            End If
            If (Not (ds.Tables("rmServiceItem")) Is Nothing) Then
                MyBase.Tables.Add(New rmServiceItemDataTable(ds.Tables("rmServiceItem")))
            End If
            If (Not (ds.Tables("rmUsers")) Is Nothing) Then
                MyBase.Tables.Add(New rmUsersDataTable(ds.Tables("rmUsers")))
            End If
            If (Not (ds.Tables("States")) Is Nothing) Then
                MyBase.Tables.Add(New StatesDataTable(ds.Tables("States")))
            End If
            If (Not (ds.Tables("rmListServiceItems")) Is Nothing) Then
                MyBase.Tables.Add(New rmListServiceItemsDataTable(ds.Tables("rmListServiceItems")))
            End If
            If (Not (ds.Tables("ClientProjectItems")) Is Nothing) Then
                MyBase.Tables.Add(New ClientProjectItemsDataTable(ds.Tables("ClientProjectItems")))
            End If
            If (Not (ds.Tables("RenewalQueue")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalQueueDataTable(ds.Tables("RenewalQueue")))
            End If
            If (Not (ds.Tables("RenewalFees")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalFeesDataTable(ds.Tables("RenewalFees")))
            End If
            If (Not (ds.Tables("SIAudit")) Is Nothing) Then
                MyBase.Tables.Add(New SIAuditDataTable(ds.Tables("SIAudit")))
            End If
            If (Not (ds.Tables("RenewalQueueHistory")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalQueueHistoryDataTable(ds.Tables("RenewalQueueHistory")))
            End If
            If (Not (ds.Tables("RenewalAssignees")) Is Nothing) Then
                MyBase.Tables.Add(New RenewalAssigneesDataTable(ds.Tables("RenewalAssignees")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCompany = CType(MyBase.Tables("Company"),CompanyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompany) Is Nothing) Then
                Me.tableCompany.InitVars
            End If
        End If
        Me.tablermServiceItem = CType(MyBase.Tables("rmServiceItem"),rmServiceItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablermServiceItem) Is Nothing) Then
                Me.tablermServiceItem.InitVars
            End If
        End If
        Me.tablermUsers = CType(MyBase.Tables("rmUsers"),rmUsersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablermUsers) Is Nothing) Then
                Me.tablermUsers.InitVars
            End If
        End If
        Me.tableStates = CType(MyBase.Tables("States"),StatesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStates) Is Nothing) Then
                Me.tableStates.InitVars
            End If
        End If
        Me.tablermListServiceItems = CType(MyBase.Tables("rmListServiceItems"),rmListServiceItemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablermListServiceItems) Is Nothing) Then
                Me.tablermListServiceItems.InitVars
            End If
        End If
        Me.tableClientProjectItems = CType(MyBase.Tables("ClientProjectItems"),ClientProjectItemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientProjectItems) Is Nothing) Then
                Me.tableClientProjectItems.InitVars
            End If
        End If
        Me.tableRenewalQueue = CType(MyBase.Tables("RenewalQueue"),RenewalQueueDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRenewalQueue) Is Nothing) Then
                Me.tableRenewalQueue.InitVars
            End If
        End If
        Me.tableRenewalFees = CType(MyBase.Tables("RenewalFees"),RenewalFeesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRenewalFees) Is Nothing) Then
                Me.tableRenewalFees.InitVars
            End If
        End If
        Me.tableSIAudit = CType(MyBase.Tables("SIAudit"),SIAuditDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSIAudit) Is Nothing) Then
                Me.tableSIAudit.InitVars
            End If
        End If
        Me.tableRenewalQueueHistory = CType(MyBase.Tables("RenewalQueueHistory"),RenewalQueueHistoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRenewalQueueHistory) Is Nothing) Then
                Me.tableRenewalQueueHistory.InitVars
            End If
        End If
        Me.tableRenewalAssignees = CType(MyBase.Tables("RenewalAssignees"),RenewalAssigneesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRenewalAssignees) Is Nothing) Then
                Me.tableRenewalAssignees.InitVars
            End If
        End If
        Me.relationrmServiceItem_SIAudit = Me.Relations("rmServiceItem_SIAudit")
        Me.relationCompany_rmServiceItem = Me.Relations("Company_rmServiceItem")
        Me.relationCompany_RenewalAssignees = Me.Relations("Company_RenewalAssignees")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CornerstoneSQLRenewalQueue"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CornerstoneSQLRenewalQueue.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCompany = New CompanyDataTable
        MyBase.Tables.Add(Me.tableCompany)
        Me.tablermServiceItem = New rmServiceItemDataTable
        MyBase.Tables.Add(Me.tablermServiceItem)
        Me.tablermUsers = New rmUsersDataTable
        MyBase.Tables.Add(Me.tablermUsers)
        Me.tableStates = New StatesDataTable
        MyBase.Tables.Add(Me.tableStates)
        Me.tablermListServiceItems = New rmListServiceItemsDataTable
        MyBase.Tables.Add(Me.tablermListServiceItems)
        Me.tableClientProjectItems = New ClientProjectItemsDataTable
        MyBase.Tables.Add(Me.tableClientProjectItems)
        Me.tableRenewalQueue = New RenewalQueueDataTable
        MyBase.Tables.Add(Me.tableRenewalQueue)
        Me.tableRenewalFees = New RenewalFeesDataTable
        MyBase.Tables.Add(Me.tableRenewalFees)
        Me.tableSIAudit = New SIAuditDataTable
        MyBase.Tables.Add(Me.tableSIAudit)
        Me.tableRenewalQueueHistory = New RenewalQueueHistoryDataTable
        MyBase.Tables.Add(Me.tableRenewalQueueHistory)
        Me.tableRenewalAssignees = New RenewalAssigneesDataTable
        MyBase.Tables.Add(Me.tableRenewalAssignees)
        Me.relationrmServiceItem_SIAudit = New Global.System.Data.DataRelation("rmServiceItem_SIAudit", New Global.System.Data.DataColumn() {Me.tablermServiceItem.IDColumn}, New Global.System.Data.DataColumn() {Me.tableSIAudit.SIidColumn}, false)
        Me.Relations.Add(Me.relationrmServiceItem_SIAudit)
        Me.relationCompany_rmServiceItem = New Global.System.Data.DataRelation("Company_rmServiceItem", New Global.System.Data.DataColumn() {Me.tableCompany.custIDColumn}, New Global.System.Data.DataColumn() {Me.tablermServiceItem.CustIDColumn}, false)
        Me.Relations.Add(Me.relationCompany_rmServiceItem)
        Me.relationCompany_RenewalAssignees = New Global.System.Data.DataRelation("Company_RenewalAssignees", New Global.System.Data.DataColumn() {Me.tableCompany.custIDColumn}, New Global.System.Data.DataColumn() {Me.tableRenewalAssignees.custIDColumn}, false)
        Me.Relations.Add(Me.relationCompany_RenewalAssignees)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCompany() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializermServiceItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializermUsers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStates() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializermListServiceItems() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientProjectItems() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRenewalQueue() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRenewalFees() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSIAudit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRenewalQueueHistory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRenewalAssignees() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CompanyRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanyRowChangeEvent)
    
    Public Delegate Sub rmServiceItemRowChangeEventHandler(ByVal sender As Object, ByVal e As rmServiceItemRowChangeEvent)
    
    Public Delegate Sub rmUsersRowChangeEventHandler(ByVal sender As Object, ByVal e As rmUsersRowChangeEvent)
    
    Public Delegate Sub StatesRowChangeEventHandler(ByVal sender As Object, ByVal e As StatesRowChangeEvent)
    
    Public Delegate Sub rmListServiceItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As rmListServiceItemsRowChangeEvent)
    
    Public Delegate Sub ClientProjectItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientProjectItemsRowChangeEvent)
    
    Public Delegate Sub RenewalQueueRowChangeEventHandler(ByVal sender As Object, ByVal e As RenewalQueueRowChangeEvent)
    
    Public Delegate Sub RenewalFeesRowChangeEventHandler(ByVal sender As Object, ByVal e As RenewalFeesRowChangeEvent)
    
    Public Delegate Sub SIAuditRowChangeEventHandler(ByVal sender As Object, ByVal e As SIAuditRowChangeEvent)
    
    Public Delegate Sub RenewalQueueHistoryRowChangeEventHandler(ByVal sender As Object, ByVal e As RenewalQueueHistoryRowChangeEvent)
    
    Public Delegate Sub RenewalAssigneesRowChangeEventHandler(ByVal sender As Object, ByVal e As RenewalAssigneesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CompanyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columncustID As Global.System.Data.DataColumn
        
        Private columnbizname As Global.System.Data.DataColumn
        
        Private columndba As Global.System.Data.DataColumn
        
        Private _columnprimary_street As Global.System.Data.DataColumn
        
        Private _columnprimary_street2 As Global.System.Data.DataColumn
        
        Private _columnprimary_city As Global.System.Data.DataColumn
        
        Private _columnprimary_state As Global.System.Data.DataColumn
        
        Private _columnprimary_zip As Global.System.Data.DataColumn
        
        Private _columnprimary_phone As Global.System.Data.DataColumn
        
        Private _columnprimary_fax As Global.System.Data.DataColumn
        
        Private _columnprimary_email As Global.System.Data.DataColumn
        
        Private _columnprimary_manager As Global.System.Data.DataColumn
        
        Private _columnprimary_contact As Global.System.Data.DataColumn
        
        Private _columnbiz_type As Global.System.Data.DataColumn
        
        Private _columnPres_name As Global.System.Data.DataColumn
        
        Private columnnotary1 As Global.System.Data.DataColumn
        
        Private columnnotary2 As Global.System.Data.DataColumn
        
        Private columnnotary3 As Global.System.Data.DataColumn
        
        Private _columnduration_of_company As Global.System.Data.DataColumn
        
        Private _columnpercent_biz_retail As Global.System.Data.DataColumn
        
        Private _columnpercent_biz_commercial As Global.System.Data.DataColumn
        
        Private _columnstock_par_value As Global.System.Data.DataColumn
        
        Private _columnstates_to_license As Global.System.Data.DataColumn
        
        Private _column800_ As Global.System.Data.DataColumn
        
        Private columncounty As Global.System.Data.DataColumn
        
        Private columnstockclass As Global.System.Data.DataColumn
        
        Private columnstockseries As Global.System.Data.DataColumn
        
        Private _columnstock_authorized As Global.System.Data.DataColumn
        
        Private _columnstock_issued As Global.System.Data.DataColumn
        
        Private columnAssignedTo As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnIsArchived As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        Private columnHasAuditProblem As Global.System.Data.DataColumn
        
        Private columnReqPasswords As Global.System.Data.DataColumn
        
        Private columnReportsPath As Global.System.Data.DataColumn
        
        Private columnArchivesPath As Global.System.Data.DataColumn
        
        Private columnDemoDeadline As Global.System.Data.DataColumn
        
        Private columnNumAllowed As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Company"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property biznameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbizname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dbaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_streetColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_street
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_street2Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_street2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_cityColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_city
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_stateColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_state
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_zipColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_zip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_phone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_fax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_managerColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_manager
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _primary_contactColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnprimary_contact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _biz_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnbiz_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Pres_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPres_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notary1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotary1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notary2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotary2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notary3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotary3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _duration_of_companyColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnduration_of_company
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _percent_biz_retailColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpercent_biz_retail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _percent_biz_commercialColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnpercent_biz_commercial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _stock_par_valueColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstock_par_value
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _states_to_licenseColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstates_to_license
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _800_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column800_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncounty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockclassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockclass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockseriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockseries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _stock_authorizedColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstock_authorized
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _stock_issuedColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnstock_issued
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignedToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignedTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsArchivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsArchived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HasAuditProblemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHasAuditProblem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReqPasswordsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReqPasswords
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReportsPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReportsPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArchivesPathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchivesPath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemoDeadlineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemoDeadline
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumAllowedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumAllowed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanyRow
            Get
                Return CType(Me.Rows(index),CompanyRow)
            End Get
        End Property
        
        Public Event CompanyRowChanging As CompanyRowChangeEventHandler
        
        Public Event CompanyRowChanged As CompanyRowChangeEventHandler
        
        Public Event CompanyRowDeleting As CompanyRowChangeEventHandler
        
        Public Event CompanyRowDeleted As CompanyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCompanyRow(ByVal row As CompanyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCompanyRow( _
                    ByVal ID As Integer,  _
                    ByVal bizname As String,  _
                    ByVal dba As String,  _
                    ByVal _primary_street As String,  _
                    ByVal _primary_street2 As String,  _
                    ByVal _primary_city As String,  _
                    ByVal _primary_state As String,  _
                    ByVal _primary_zip As String,  _
                    ByVal _primary_phone As String,  _
                    ByVal _primary_fax As String,  _
                    ByVal _primary_email As String,  _
                    ByVal _primary_manager As String,  _
                    ByVal _primary_contact As String,  _
                    ByVal _biz_type As String,  _
                    ByVal _Pres_name As String,  _
                    ByVal notary1 As String,  _
                    ByVal notary2 As String,  _
                    ByVal notary3 As String,  _
                    ByVal _duration_of_company As String,  _
                    ByVal _percent_biz_retail As Integer,  _
                    ByVal _percent_biz_commercial As Integer,  _
                    ByVal _stock_par_value As String,  _
                    ByVal _states_to_license As String,  _
                    ByVal _800_ As String,  _
                    ByVal county As String,  _
                    ByVal stockclass As String,  _
                    ByVal stockseries As String,  _
                    ByVal _stock_authorized As String,  _
                    ByVal _stock_issued As String,  _
                    ByVal AssignedTo As String,  _
                    ByVal Status As String,  _
                    ByVal IsArchived As Boolean,  _
                    ByVal DateCreated As Date,  _
                    ByVal HasAuditProblem As Boolean,  _
                    ByVal ReqPasswords As Boolean,  _
                    ByVal ReportsPath As String,  _
                    ByVal ArchivesPath As String,  _
                    ByVal DemoDeadline As Date,  _
                    ByVal NumAllowed As Integer) As CompanyRow
            Dim rowCompanyRow As CompanyRow = CType(Me.NewRow,CompanyRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, bizname, dba, _primary_street, _primary_street2, _primary_city, _primary_state, _primary_zip, _primary_phone, _primary_fax, _primary_email, _primary_manager, _primary_contact, _biz_type, _Pres_name, notary1, notary2, notary3, _duration_of_company, _percent_biz_retail, _percent_biz_commercial, _stock_par_value, _states_to_license, _800_, county, stockclass, stockseries, _stock_authorized, _stock_issued, AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem, ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, NumAllowed}
            rowCompanyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompanyRow)
            Return rowCompanyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustID(ByVal custID As Integer) As CompanyRow
            Return CType(Me.Rows.Find(New Object() {custID}),CompanyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CompanyDataTable = CType(MyBase.Clone,CompanyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CompanyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columncustID = MyBase.Columns("custID")
            Me.columnbizname = MyBase.Columns("bizname")
            Me.columndba = MyBase.Columns("dba")
            Me._columnprimary_street = MyBase.Columns("primary-street")
            Me._columnprimary_street2 = MyBase.Columns("primary-street2")
            Me._columnprimary_city = MyBase.Columns("primary-city")
            Me._columnprimary_state = MyBase.Columns("primary-state")
            Me._columnprimary_zip = MyBase.Columns("primary-zip")
            Me._columnprimary_phone = MyBase.Columns("primary-phone")
            Me._columnprimary_fax = MyBase.Columns("primary-fax")
            Me._columnprimary_email = MyBase.Columns("primary-email")
            Me._columnprimary_manager = MyBase.Columns("primary-manager")
            Me._columnprimary_contact = MyBase.Columns("primary-contact")
            Me._columnbiz_type = MyBase.Columns("biz-type")
            Me._columnPres_name = MyBase.Columns("Pres-name")
            Me.columnnotary1 = MyBase.Columns("notary1")
            Me.columnnotary2 = MyBase.Columns("notary2")
            Me.columnnotary3 = MyBase.Columns("notary3")
            Me._columnduration_of_company = MyBase.Columns("duration-of-company")
            Me._columnpercent_biz_retail = MyBase.Columns("percent-biz-retail")
            Me._columnpercent_biz_commercial = MyBase.Columns("percent-biz-commercial")
            Me._columnstock_par_value = MyBase.Columns("stock-par-value")
            Me._columnstates_to_license = MyBase.Columns("states-to-license")
            Me._column800_ = MyBase.Columns("800#")
            Me.columncounty = MyBase.Columns("county")
            Me.columnstockclass = MyBase.Columns("stockclass")
            Me.columnstockseries = MyBase.Columns("stockseries")
            Me._columnstock_authorized = MyBase.Columns("stock#authorized")
            Me._columnstock_issued = MyBase.Columns("stock#issued")
            Me.columnAssignedTo = MyBase.Columns("AssignedTo")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnIsArchived = MyBase.Columns("IsArchived")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
            Me.columnHasAuditProblem = MyBase.Columns("HasAuditProblem")
            Me.columnReqPasswords = MyBase.Columns("ReqPasswords")
            Me.columnReportsPath = MyBase.Columns("ReportsPath")
            Me.columnArchivesPath = MyBase.Columns("ArchivesPath")
            Me.columnDemoDeadline = MyBase.Columns("DemoDeadline")
            Me.columnNumAllowed = MyBase.Columns("NumAllowed")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columncustID = New Global.System.Data.DataColumn("custID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustID)
            Me.columnbizname = New Global.System.Data.DataColumn("bizname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbizname)
            Me.columndba = New Global.System.Data.DataColumn("dba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndba)
            Me._columnprimary_street = New Global.System.Data.DataColumn("primary-street", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_street.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_street")
            Me._columnprimary_street.ExtendedProperties.Add("Generator_UserColumnName", "primary-street")
            MyBase.Columns.Add(Me._columnprimary_street)
            Me._columnprimary_street2 = New Global.System.Data.DataColumn("primary-street2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_street2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_street2")
            Me._columnprimary_street2.ExtendedProperties.Add("Generator_UserColumnName", "primary-street2")
            MyBase.Columns.Add(Me._columnprimary_street2)
            Me._columnprimary_city = New Global.System.Data.DataColumn("primary-city", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_city.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_city")
            Me._columnprimary_city.ExtendedProperties.Add("Generator_UserColumnName", "primary-city")
            MyBase.Columns.Add(Me._columnprimary_city)
            Me._columnprimary_state = New Global.System.Data.DataColumn("primary-state", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_state.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_state")
            Me._columnprimary_state.ExtendedProperties.Add("Generator_UserColumnName", "primary-state")
            MyBase.Columns.Add(Me._columnprimary_state)
            Me._columnprimary_zip = New Global.System.Data.DataColumn("primary-zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_zip.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_zip")
            Me._columnprimary_zip.ExtendedProperties.Add("Generator_UserColumnName", "primary-zip")
            MyBase.Columns.Add(Me._columnprimary_zip)
            Me._columnprimary_phone = New Global.System.Data.DataColumn("primary-phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_phone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_phone")
            Me._columnprimary_phone.ExtendedProperties.Add("Generator_UserColumnName", "primary-phone")
            MyBase.Columns.Add(Me._columnprimary_phone)
            Me._columnprimary_fax = New Global.System.Data.DataColumn("primary-fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_fax.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_fax")
            Me._columnprimary_fax.ExtendedProperties.Add("Generator_UserColumnName", "primary-fax")
            MyBase.Columns.Add(Me._columnprimary_fax)
            Me._columnprimary_email = New Global.System.Data.DataColumn("primary-email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_email.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_email")
            Me._columnprimary_email.ExtendedProperties.Add("Generator_UserColumnName", "primary-email")
            MyBase.Columns.Add(Me._columnprimary_email)
            Me._columnprimary_manager = New Global.System.Data.DataColumn("primary-manager", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_manager.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_manager")
            Me._columnprimary_manager.ExtendedProperties.Add("Generator_UserColumnName", "primary-manager")
            MyBase.Columns.Add(Me._columnprimary_manager)
            Me._columnprimary_contact = New Global.System.Data.DataColumn("primary-contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnprimary_contact.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnprimary_contact")
            Me._columnprimary_contact.ExtendedProperties.Add("Generator_UserColumnName", "primary-contact")
            MyBase.Columns.Add(Me._columnprimary_contact)
            Me._columnbiz_type = New Global.System.Data.DataColumn("biz-type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnbiz_type.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnbiz_type")
            Me._columnbiz_type.ExtendedProperties.Add("Generator_UserColumnName", "biz-type")
            MyBase.Columns.Add(Me._columnbiz_type)
            Me._columnPres_name = New Global.System.Data.DataColumn("Pres-name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPres_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPres_name")
            Me._columnPres_name.ExtendedProperties.Add("Generator_UserColumnName", "Pres-name")
            MyBase.Columns.Add(Me._columnPres_name)
            Me.columnnotary1 = New Global.System.Data.DataColumn("notary1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotary1)
            Me.columnnotary2 = New Global.System.Data.DataColumn("notary2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotary2)
            Me.columnnotary3 = New Global.System.Data.DataColumn("notary3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotary3)
            Me._columnduration_of_company = New Global.System.Data.DataColumn("duration-of-company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnduration_of_company.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnduration_of_company")
            Me._columnduration_of_company.ExtendedProperties.Add("Generator_UserColumnName", "duration-of-company")
            MyBase.Columns.Add(Me._columnduration_of_company)
            Me._columnpercent_biz_retail = New Global.System.Data.DataColumn("percent-biz-retail", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpercent_biz_retail.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpercent_biz_retail")
            Me._columnpercent_biz_retail.ExtendedProperties.Add("Generator_UserColumnName", "percent-biz-retail")
            MyBase.Columns.Add(Me._columnpercent_biz_retail)
            Me._columnpercent_biz_commercial = New Global.System.Data.DataColumn("percent-biz-commercial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnpercent_biz_commercial.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnpercent_biz_commercial")
            Me._columnpercent_biz_commercial.ExtendedProperties.Add("Generator_UserColumnName", "percent-biz-commercial")
            MyBase.Columns.Add(Me._columnpercent_biz_commercial)
            Me._columnstock_par_value = New Global.System.Data.DataColumn("stock-par-value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstock_par_value.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstock_par_value")
            Me._columnstock_par_value.ExtendedProperties.Add("Generator_UserColumnName", "stock-par-value")
            MyBase.Columns.Add(Me._columnstock_par_value)
            Me._columnstates_to_license = New Global.System.Data.DataColumn("states-to-license", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstates_to_license.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstates_to_license")
            Me._columnstates_to_license.ExtendedProperties.Add("Generator_UserColumnName", "states-to-license")
            MyBase.Columns.Add(Me._columnstates_to_license)
            Me._column800_ = New Global.System.Data.DataColumn("800#", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column800_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column800_")
            Me._column800_.ExtendedProperties.Add("Generator_UserColumnName", "800#")
            MyBase.Columns.Add(Me._column800_)
            Me.columncounty = New Global.System.Data.DataColumn("county", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounty)
            Me.columnstockclass = New Global.System.Data.DataColumn("stockclass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockclass)
            Me.columnstockseries = New Global.System.Data.DataColumn("stockseries", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockseries)
            Me._columnstock_authorized = New Global.System.Data.DataColumn("stock#authorized", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstock_authorized.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstock_authorized")
            Me._columnstock_authorized.ExtendedProperties.Add("Generator_UserColumnName", "stock#authorized")
            MyBase.Columns.Add(Me._columnstock_authorized)
            Me._columnstock_issued = New Global.System.Data.DataColumn("stock#issued", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnstock_issued.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstock_issued")
            Me._columnstock_issued.ExtendedProperties.Add("Generator_UserColumnName", "stock#issued")
            MyBase.Columns.Add(Me._columnstock_issued)
            Me.columnAssignedTo = New Global.System.Data.DataColumn("AssignedTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignedTo)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnIsArchived = New Global.System.Data.DataColumn("IsArchived", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsArchived)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.columnHasAuditProblem = New Global.System.Data.DataColumn("HasAuditProblem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHasAuditProblem)
            Me.columnReqPasswords = New Global.System.Data.DataColumn("ReqPasswords", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReqPasswords)
            Me.columnReportsPath = New Global.System.Data.DataColumn("ReportsPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportsPath)
            Me.columnArchivesPath = New Global.System.Data.DataColumn("ArchivesPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchivesPath)
            Me.columnDemoDeadline = New Global.System.Data.DataColumn("DemoDeadline", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemoDeadline)
            Me.columnNumAllowed = New Global.System.Data.DataColumn("NumAllowed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumAllowed)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustID}, true))
            Me.columncustID.AutoIncrement = true
            Me.columncustID.AllowDBNull = false
            Me.columncustID.ReadOnly = true
            Me.columncustID.Unique = true
            Me.columnbizname.MaxLength = 255
            Me.columndba.MaxLength = 255
            Me._columnprimary_street.MaxLength = 255
            Me._columnprimary_street2.MaxLength = 255
            Me._columnprimary_city.MaxLength = 255
            Me._columnprimary_state.MaxLength = 255
            Me._columnprimary_zip.MaxLength = 255
            Me._columnprimary_phone.MaxLength = 255
            Me._columnprimary_fax.MaxLength = 255
            Me._columnprimary_email.MaxLength = 255
            Me._columnprimary_manager.MaxLength = 255
            Me._columnprimary_contact.MaxLength = 255
            Me._columnbiz_type.MaxLength = 255
            Me._columnPres_name.MaxLength = 255
            Me.columnnotary1.MaxLength = 255
            Me.columnnotary2.MaxLength = 255
            Me.columnnotary3.MaxLength = 255
            Me._columnduration_of_company.MaxLength = 255
            Me._columnstock_par_value.MaxLength = 50
            Me._columnstates_to_license.MaxLength = 50
            Me._column800_.MaxLength = 50
            Me.columncounty.MaxLength = 255
            Me.columnstockclass.MaxLength = 50
            Me.columnstockseries.MaxLength = 50
            Me._columnstock_authorized.MaxLength = 20
            Me._columnstock_issued.MaxLength = 20
            Me.columnAssignedTo.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnReportsPath.MaxLength = 255
            Me.columnArchivesPath.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCompanyRow() As CompanyRow
            Return CType(Me.NewRow,CompanyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CompanyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CompanyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanyRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanyRowChanged(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanyRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanyRowChanging(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanyRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanyRowDeleted(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanyRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanyRowDeleting(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCompanyRow(ByVal row As CompanyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CompanyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rmServiceItemDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        Private columnCustID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDesc As Global.System.Data.DataColumn
        
        Private columnDateBegin As Global.System.Data.DataColumn
        
        Private columnDateEnd As Global.System.Data.DataColumn
        
        Private columnDateRemind As Global.System.Data.DataColumn
        
        Private columnSatisfied As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnApplies As Global.System.Data.DataColumn
        
        Private columnDateRenewal As Global.System.Data.DataColumn
        
        Private columnDateExpiration As Global.System.Data.DataColumn
        
        Private columnCurrentStatus As Global.System.Data.DataColumn
        
        Private columnCurrentProcess As Global.System.Data.DataColumn
        
        Private columnIsBondItem As Global.System.Data.DataColumn
        
        Private columnBondNumber As Global.System.Data.DataColumn
        
        Private columnBondState As Global.System.Data.DataColumn
        
        Private columnBondAmount As Global.System.Data.DataColumn
        
        Private columnBondAgencyName As Global.System.Data.DataColumn
        
        Private columnAssignedTo As Global.System.Data.DataColumn
        
        Private columnAtClient As Global.System.Data.DataColumn
        
        Private columnAtState As Global.System.Data.DataColumn
        
        Private columnTenDaySent As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnAtCornerstone As Global.System.Data.DataColumn
        
        Private columnbizname As Global.System.Data.DataColumn
        
        Private columnIsRenewalItem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rmServiceItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateBeginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateBegin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRemindColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRemind
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SatisfiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSatisfied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApplies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRenewalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRenewal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExpirationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExpiration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentProcessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentProcess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsBondItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsBondItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondAgencyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondAgencyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignedToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignedTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TenDaySentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTenDaySent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtCornerstoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtCornerstone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property biznameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbizname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsRenewalItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsRenewalItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rmServiceItemRow
            Get
                Return CType(Me.Rows(index),rmServiceItemRow)
            End Get
        End Property
        
        Public Event rmServiceItemRowChanging As rmServiceItemRowChangeEventHandler
        
        Public Event rmServiceItemRowChanged As rmServiceItemRowChangeEventHandler
        
        Public Event rmServiceItemRowDeleting As rmServiceItemRowChangeEventHandler
        
        Public Event rmServiceItemRowDeleted As rmServiceItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrmServiceItemRow(ByVal row As rmServiceItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrmServiceItemRow( _
                    ByVal DateCreated As Date,  _
                    ByVal parentCompanyRowByCompany_rmServiceItem As CompanyRow,  _
                    ByVal Name As String,  _
                    ByVal Desc As String,  _
                    ByVal DateBegin As Date,  _
                    ByVal DateEnd As Date,  _
                    ByVal DateRemind As Date,  _
                    ByVal Satisfied As Boolean,  _
                    ByVal Cost As Decimal,  _
                    ByVal Applies As Boolean,  _
                    ByVal DateRenewal As Date,  _
                    ByVal DateExpiration As Date,  _
                    ByVal CurrentStatus As String,  _
                    ByVal CurrentProcess As String,  _
                    ByVal IsBondItem As Boolean,  _
                    ByVal BondNumber As Integer,  _
                    ByVal BondState As String,  _
                    ByVal BondAmount As Decimal,  _
                    ByVal BondAgencyName As String,  _
                    ByVal AssignedTo As String,  _
                    ByVal AtClient As Boolean,  _
                    ByVal AtState As Boolean,  _
                    ByVal TenDaySent As Boolean,  _
                    ByVal Status As String,  _
                    ByVal AtCornerstone As Boolean,  _
                    ByVal bizname As String,  _
                    ByVal IsRenewalItem As Boolean) As rmServiceItemRow
            Dim rowrmServiceItemRow As rmServiceItemRow = CType(Me.NewRow,rmServiceItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DateCreated, Nothing, Name, Desc, DateBegin, DateEnd, DateRemind, Satisfied, Cost, Applies, DateRenewal, DateExpiration, CurrentStatus, CurrentProcess, IsBondItem, BondNumber, BondState, BondAmount, BondAgencyName, AssignedTo, AtClient, AtState, TenDaySent, Status, AtCornerstone, bizname, IsRenewalItem}
            If (Not (parentCompanyRowByCompany_rmServiceItem) Is Nothing) Then
                columnValuesArray(2) = parentCompanyRowByCompany_rmServiceItem(1)
            End If
            rowrmServiceItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrmServiceItemRow)
            Return rowrmServiceItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As rmServiceItemRow
            Return CType(Me.Rows.Find(New Object() {ID}),rmServiceItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rmServiceItemDataTable = CType(MyBase.Clone,rmServiceItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rmServiceItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
            Me.columnCustID = MyBase.Columns("CustID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDesc = MyBase.Columns("Desc")
            Me.columnDateBegin = MyBase.Columns("DateBegin")
            Me.columnDateEnd = MyBase.Columns("DateEnd")
            Me.columnDateRemind = MyBase.Columns("DateRemind")
            Me.columnSatisfied = MyBase.Columns("Satisfied")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnApplies = MyBase.Columns("Applies")
            Me.columnDateRenewal = MyBase.Columns("DateRenewal")
            Me.columnDateExpiration = MyBase.Columns("DateExpiration")
            Me.columnCurrentStatus = MyBase.Columns("CurrentStatus")
            Me.columnCurrentProcess = MyBase.Columns("CurrentProcess")
            Me.columnIsBondItem = MyBase.Columns("IsBondItem")
            Me.columnBondNumber = MyBase.Columns("BondNumber")
            Me.columnBondState = MyBase.Columns("BondState")
            Me.columnBondAmount = MyBase.Columns("BondAmount")
            Me.columnBondAgencyName = MyBase.Columns("BondAgencyName")
            Me.columnAssignedTo = MyBase.Columns("AssignedTo")
            Me.columnAtClient = MyBase.Columns("AtClient")
            Me.columnAtState = MyBase.Columns("AtState")
            Me.columnTenDaySent = MyBase.Columns("TenDaySent")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnAtCornerstone = MyBase.Columns("AtCornerstone")
            Me.columnbizname = MyBase.Columns("bizname")
            Me.columnIsRenewalItem = MyBase.Columns("IsRenewalItem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.columnCustID = New Global.System.Data.DataColumn("CustID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDesc = New Global.System.Data.DataColumn("Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc)
            Me.columnDateBegin = New Global.System.Data.DataColumn("DateBegin", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateBegin)
            Me.columnDateEnd = New Global.System.Data.DataColumn("DateEnd", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEnd)
            Me.columnDateRemind = New Global.System.Data.DataColumn("DateRemind", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRemind)
            Me.columnSatisfied = New Global.System.Data.DataColumn("Satisfied", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSatisfied)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnApplies = New Global.System.Data.DataColumn("Applies", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApplies)
            Me.columnDateRenewal = New Global.System.Data.DataColumn("DateRenewal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRenewal)
            Me.columnDateExpiration = New Global.System.Data.DataColumn("DateExpiration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExpiration)
            Me.columnCurrentStatus = New Global.System.Data.DataColumn("CurrentStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentStatus)
            Me.columnCurrentProcess = New Global.System.Data.DataColumn("CurrentProcess", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentProcess)
            Me.columnIsBondItem = New Global.System.Data.DataColumn("IsBondItem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsBondItem)
            Me.columnBondNumber = New Global.System.Data.DataColumn("BondNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondNumber)
            Me.columnBondState = New Global.System.Data.DataColumn("BondState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondState)
            Me.columnBondAmount = New Global.System.Data.DataColumn("BondAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondAmount)
            Me.columnBondAgencyName = New Global.System.Data.DataColumn("BondAgencyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondAgencyName)
            Me.columnAssignedTo = New Global.System.Data.DataColumn("AssignedTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignedTo)
            Me.columnAtClient = New Global.System.Data.DataColumn("AtClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtClient)
            Me.columnAtState = New Global.System.Data.DataColumn("AtState", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtState)
            Me.columnTenDaySent = New Global.System.Data.DataColumn("TenDaySent", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTenDaySent)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnAtCornerstone = New Global.System.Data.DataColumn("AtCornerstone", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtCornerstone)
            Me.columnbizname = New Global.System.Data.DataColumn("bizname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbizname)
            Me.columnIsRenewalItem = New Global.System.Data.DataColumn("IsRenewalItem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsRenewalItem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 255
            Me.columnDesc.MaxLength = 1073741823
            Me.columnCurrentStatus.MaxLength = 1073741823
            Me.columnCurrentProcess.MaxLength = 50
            Me.columnBondState.MaxLength = 50
            Me.columnBondAgencyName.MaxLength = 255
            Me.columnAssignedTo.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnbizname.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrmServiceItemRow() As rmServiceItemRow
            Return CType(Me.NewRow,rmServiceItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rmServiceItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rmServiceItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rmServiceItemRowChangedEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowChanged(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rmServiceItemRowChangingEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowChanging(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rmServiceItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowDeleted(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rmServiceItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent rmServiceItemRowDeleting(Me, New rmServiceItemRowChangeEvent(CType(e.Row,rmServiceItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovermServiceItemRow(ByVal row As rmServiceItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rmServiceItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rmUsersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rmUsers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rmUsersRow
            Get
                Return CType(Me.Rows(index),rmUsersRow)
            End Get
        End Property
        
        Public Event rmUsersRowChanging As rmUsersRowChangeEventHandler
        
        Public Event rmUsersRowChanged As rmUsersRowChangeEventHandler
        
        Public Event rmUsersRowDeleting As rmUsersRowChangeEventHandler
        
        Public Event rmUsersRowDeleted As rmUsersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrmUsersRow(ByVal row As rmUsersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrmUsersRow(ByVal Name As String) As rmUsersRow
            Dim rowrmUsersRow As rmUsersRow = CType(Me.NewRow,rmUsersRow)
            Dim columnValuesArray() As Object = New Object() {Name}
            rowrmUsersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrmUsersRow)
            Return rowrmUsersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rmUsersDataTable = CType(MyBase.Clone,rmUsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rmUsersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnName.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrmUsersRow() As rmUsersRow
            Return CType(Me.NewRow,rmUsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rmUsersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rmUsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rmUsersRowChangedEvent) Is Nothing) Then
                RaiseEvent rmUsersRowChanged(Me, New rmUsersRowChangeEvent(CType(e.Row,rmUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rmUsersRowChangingEvent) Is Nothing) Then
                RaiseEvent rmUsersRowChanging(Me, New rmUsersRowChangeEvent(CType(e.Row,rmUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rmUsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent rmUsersRowDeleted(Me, New rmUsersRowChangeEvent(CType(e.Row,rmUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rmUsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent rmUsersRowDeleting(Me, New rmUsersRowChangeEvent(CType(e.Row,rmUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovermUsersRow(ByVal row As rmUsersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rmUsersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StatesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnstate As Global.System.Data.DataColumn
        
        Private columnslot1 As Global.System.Data.DataColumn
        
        Private columnPhone1 As Global.System.Data.DataColumn
        
        Private columnPhone2 As Global.System.Data.DataColumn
        
        Private columnPhone3 As Global.System.Data.DataColumn
        
        Private columnPhone4 As Global.System.Data.DataColumn
        
        Private columnPhone5 As Global.System.Data.DataColumn
        
        Private columnCOAToWhom1 As Global.System.Data.DataColumn
        
        Private columnCOAToWhom2 As Global.System.Data.DataColumn
        
        Private columnCOAToWhom3 As Global.System.Data.DataColumn
        
        Private columnCOAstreet As Global.System.Data.DataColumn
        
        Private columnCOAcsz As Global.System.Data.DataColumn
        
        Private columnLICToWhom1 As Global.System.Data.DataColumn
        
        Private columnLICToWhom2 As Global.System.Data.DataColumn
        
        Private columnLICToWhom3 As Global.System.Data.DataColumn
        
        Private columnLICstreet As Global.System.Data.DataColumn
        
        Private columnLICcsz As Global.System.Data.DataColumn
        
        Private columnnotes As Global.System.Data.DataColumn
        
        Private columnCOArecordset As Global.System.Data.DataColumn
        
        Private columnLICrecordset As Global.System.Data.DataColumn
        
        Private columnLOGSline1 As Global.System.Data.DataColumn
        
        Private columnLOGSline2 As Global.System.Data.DataColumn
        
        Private columnLOGSline3 As Global.System.Data.DataColumn
        
        Private columnLOGSline4 As Global.System.Data.DataColumn
        
        Private columnLOGSline5 As Global.System.Data.DataColumn
        
        Private columnWebAddress As Global.System.Data.DataColumn
        
        Private columnPriorityServiceInfo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "States"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property slot1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnslot1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Phone5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAToWhom1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAToWhom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAToWhom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAToWhom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAToWhom3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAToWhom3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAstreetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAstreet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COAcszColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOAcsz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICToWhom1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICToWhom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICToWhom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICToWhom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICToWhom3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICToWhom3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICstreetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICstreet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICcszColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICcsz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COArecordsetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOArecordset
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LICrecordsetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLICrecordset
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOGSline1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOGSline1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOGSline2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOGSline2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOGSline3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOGSline3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOGSline4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOGSline4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOGSline5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOGSline5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WebAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWebAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriorityServiceInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriorityServiceInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StatesRow
            Get
                Return CType(Me.Rows(index),StatesRow)
            End Get
        End Property
        
        Public Event StatesRowChanging As StatesRowChangeEventHandler
        
        Public Event StatesRowChanged As StatesRowChangeEventHandler
        
        Public Event StatesRowDeleting As StatesRowChangeEventHandler
        
        Public Event StatesRowDeleted As StatesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStatesRow(ByVal row As StatesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStatesRow( _
                    ByVal state As String,  _
                    ByVal slot1 As String,  _
                    ByVal Phone1 As String,  _
                    ByVal Phone2 As String,  _
                    ByVal Phone3 As String,  _
                    ByVal Phone4 As String,  _
                    ByVal Phone5 As String,  _
                    ByVal COAToWhom1 As String,  _
                    ByVal COAToWhom2 As String,  _
                    ByVal COAToWhom3 As String,  _
                    ByVal COAstreet As String,  _
                    ByVal COAcsz As String,  _
                    ByVal LICToWhom1 As String,  _
                    ByVal LICToWhom2 As String,  _
                    ByVal LICToWhom3 As String,  _
                    ByVal LICstreet As String,  _
                    ByVal LICcsz As String,  _
                    ByVal notes As String,  _
                    ByVal COArecordset As Boolean,  _
                    ByVal LICrecordset As Boolean,  _
                    ByVal LOGSline1 As String,  _
                    ByVal LOGSline2 As String,  _
                    ByVal LOGSline3 As String,  _
                    ByVal LOGSline4 As String,  _
                    ByVal LOGSline5 As String,  _
                    ByVal WebAddress As String,  _
                    ByVal PriorityServiceInfo As String) As StatesRow
            Dim rowStatesRow As StatesRow = CType(Me.NewRow,StatesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, state, slot1, Phone1, Phone2, Phone3, Phone4, Phone5, COAToWhom1, COAToWhom2, COAToWhom3, COAstreet, COAcsz, LICToWhom1, LICToWhom2, LICToWhom3, LICstreet, LICcsz, notes, COArecordset, LICrecordset, LOGSline1, LOGSline2, LOGSline3, LOGSline4, LOGSline5, WebAddress, PriorityServiceInfo}
            rowStatesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStatesRow)
            Return rowStatesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As StatesRow
            Return CType(Me.Rows.Find(New Object() {ID}),StatesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StatesDataTable = CType(MyBase.Clone,StatesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StatesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnstate = MyBase.Columns("state")
            Me.columnslot1 = MyBase.Columns("slot1")
            Me.columnPhone1 = MyBase.Columns("Phone1")
            Me.columnPhone2 = MyBase.Columns("Phone2")
            Me.columnPhone3 = MyBase.Columns("Phone3")
            Me.columnPhone4 = MyBase.Columns("Phone4")
            Me.columnPhone5 = MyBase.Columns("Phone5")
            Me.columnCOAToWhom1 = MyBase.Columns("COAToWhom1")
            Me.columnCOAToWhom2 = MyBase.Columns("COAToWhom2")
            Me.columnCOAToWhom3 = MyBase.Columns("COAToWhom3")
            Me.columnCOAstreet = MyBase.Columns("COAstreet")
            Me.columnCOAcsz = MyBase.Columns("COAcsz")
            Me.columnLICToWhom1 = MyBase.Columns("LICToWhom1")
            Me.columnLICToWhom2 = MyBase.Columns("LICToWhom2")
            Me.columnLICToWhom3 = MyBase.Columns("LICToWhom3")
            Me.columnLICstreet = MyBase.Columns("LICstreet")
            Me.columnLICcsz = MyBase.Columns("LICcsz")
            Me.columnnotes = MyBase.Columns("notes")
            Me.columnCOArecordset = MyBase.Columns("COArecordset")
            Me.columnLICrecordset = MyBase.Columns("LICrecordset")
            Me.columnLOGSline1 = MyBase.Columns("LOGSline1")
            Me.columnLOGSline2 = MyBase.Columns("LOGSline2")
            Me.columnLOGSline3 = MyBase.Columns("LOGSline3")
            Me.columnLOGSline4 = MyBase.Columns("LOGSline4")
            Me.columnLOGSline5 = MyBase.Columns("LOGSline5")
            Me.columnWebAddress = MyBase.Columns("WebAddress")
            Me.columnPriorityServiceInfo = MyBase.Columns("PriorityServiceInfo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnstate = New Global.System.Data.DataColumn("state", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstate)
            Me.columnslot1 = New Global.System.Data.DataColumn("slot1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnslot1)
            Me.columnPhone1 = New Global.System.Data.DataColumn("Phone1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone1)
            Me.columnPhone2 = New Global.System.Data.DataColumn("Phone2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone2)
            Me.columnPhone3 = New Global.System.Data.DataColumn("Phone3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone3)
            Me.columnPhone4 = New Global.System.Data.DataColumn("Phone4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone4)
            Me.columnPhone5 = New Global.System.Data.DataColumn("Phone5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone5)
            Me.columnCOAToWhom1 = New Global.System.Data.DataColumn("COAToWhom1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAToWhom1)
            Me.columnCOAToWhom2 = New Global.System.Data.DataColumn("COAToWhom2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAToWhom2)
            Me.columnCOAToWhom3 = New Global.System.Data.DataColumn("COAToWhom3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAToWhom3)
            Me.columnCOAstreet = New Global.System.Data.DataColumn("COAstreet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAstreet)
            Me.columnCOAcsz = New Global.System.Data.DataColumn("COAcsz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOAcsz)
            Me.columnLICToWhom1 = New Global.System.Data.DataColumn("LICToWhom1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICToWhom1)
            Me.columnLICToWhom2 = New Global.System.Data.DataColumn("LICToWhom2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICToWhom2)
            Me.columnLICToWhom3 = New Global.System.Data.DataColumn("LICToWhom3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICToWhom3)
            Me.columnLICstreet = New Global.System.Data.DataColumn("LICstreet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICstreet)
            Me.columnLICcsz = New Global.System.Data.DataColumn("LICcsz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICcsz)
            Me.columnnotes = New Global.System.Data.DataColumn("notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotes)
            Me.columnCOArecordset = New Global.System.Data.DataColumn("COArecordset", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOArecordset)
            Me.columnLICrecordset = New Global.System.Data.DataColumn("LICrecordset", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLICrecordset)
            Me.columnLOGSline1 = New Global.System.Data.DataColumn("LOGSline1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOGSline1)
            Me.columnLOGSline2 = New Global.System.Data.DataColumn("LOGSline2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOGSline2)
            Me.columnLOGSline3 = New Global.System.Data.DataColumn("LOGSline3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOGSline3)
            Me.columnLOGSline4 = New Global.System.Data.DataColumn("LOGSline4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOGSline4)
            Me.columnLOGSline5 = New Global.System.Data.DataColumn("LOGSline5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOGSline5)
            Me.columnWebAddress = New Global.System.Data.DataColumn("WebAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebAddress)
            Me.columnPriorityServiceInfo = New Global.System.Data.DataColumn("PriorityServiceInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriorityServiceInfo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnstate.MaxLength = 255
            Me.columnslot1.MaxLength = 255
            Me.columnPhone1.MaxLength = 255
            Me.columnPhone2.MaxLength = 255
            Me.columnPhone3.MaxLength = 255
            Me.columnPhone4.MaxLength = 255
            Me.columnPhone5.MaxLength = 255
            Me.columnCOAToWhom1.MaxLength = 255
            Me.columnCOAToWhom2.MaxLength = 255
            Me.columnCOAToWhom3.MaxLength = 255
            Me.columnCOAstreet.MaxLength = 255
            Me.columnCOAcsz.MaxLength = 255
            Me.columnLICToWhom1.MaxLength = 255
            Me.columnLICToWhom2.MaxLength = 255
            Me.columnLICToWhom3.MaxLength = 255
            Me.columnLICstreet.MaxLength = 255
            Me.columnLICcsz.MaxLength = 255
            Me.columnnotes.MaxLength = 1073741823
            Me.columnLOGSline1.MaxLength = 255
            Me.columnLOGSline2.MaxLength = 255
            Me.columnLOGSline3.MaxLength = 255
            Me.columnLOGSline4.MaxLength = 255
            Me.columnLOGSline5.MaxLength = 255
            Me.columnWebAddress.MaxLength = 1073741823
            Me.columnPriorityServiceInfo.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStatesRow() As StatesRow
            Return CType(Me.NewRow,StatesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StatesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StatesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StatesRowChangedEvent) Is Nothing) Then
                RaiseEvent StatesRowChanged(Me, New StatesRowChangeEvent(CType(e.Row,StatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StatesRowChangingEvent) Is Nothing) Then
                RaiseEvent StatesRowChanging(Me, New StatesRowChangeEvent(CType(e.Row,StatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StatesRowDeletedEvent) Is Nothing) Then
                RaiseEvent StatesRowDeleted(Me, New StatesRowChangeEvent(CType(e.Row,StatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StatesRowDeletingEvent) Is Nothing) Then
                RaiseEvent StatesRowDeleting(Me, New StatesRowChangeEvent(CType(e.Row,StatesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStatesRow(ByVal row As StatesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StatesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rmListServiceItemsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDesc As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnDuration As Global.System.Data.DataColumn
        
        Private columnFirstReminder As Global.System.Data.DataColumn
        
        Private columnIsRenewalItem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rmListServiceItems"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstReminderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstReminder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsRenewalItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsRenewalItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rmListServiceItemsRow
            Get
                Return CType(Me.Rows(index),rmListServiceItemsRow)
            End Get
        End Property
        
        Public Event rmListServiceItemsRowChanging As rmListServiceItemsRowChangeEventHandler
        
        Public Event rmListServiceItemsRowChanged As rmListServiceItemsRowChangeEventHandler
        
        Public Event rmListServiceItemsRowDeleting As rmListServiceItemsRowChangeEventHandler
        
        Public Event rmListServiceItemsRowDeleted As rmListServiceItemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrmListServiceItemsRow(ByVal row As rmListServiceItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrmListServiceItemsRow(ByVal Name As String, ByVal Desc As String, ByVal Cost As Decimal, ByVal Duration As Integer, ByVal FirstReminder As Integer, ByVal IsRenewalItem As Boolean) As rmListServiceItemsRow
            Dim rowrmListServiceItemsRow As rmListServiceItemsRow = CType(Me.NewRow,rmListServiceItemsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name, Desc, Cost, Duration, FirstReminder, IsRenewalItem}
            rowrmListServiceItemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrmListServiceItemsRow)
            Return rowrmListServiceItemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As rmListServiceItemsRow
            Return CType(Me.Rows.Find(New Object() {ID}),rmListServiceItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rmListServiceItemsDataTable = CType(MyBase.Clone,rmListServiceItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rmListServiceItemsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDesc = MyBase.Columns("Desc")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnDuration = MyBase.Columns("Duration")
            Me.columnFirstReminder = MyBase.Columns("FirstReminder")
            Me.columnIsRenewalItem = MyBase.Columns("IsRenewalItem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDesc = New Global.System.Data.DataColumn("Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnDuration = New Global.System.Data.DataColumn("Duration", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDuration)
            Me.columnFirstReminder = New Global.System.Data.DataColumn("FirstReminder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstReminder)
            Me.columnIsRenewalItem = New Global.System.Data.DataColumn("IsRenewalItem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsRenewalItem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 255
            Me.columnDesc.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrmListServiceItemsRow() As rmListServiceItemsRow
            Return CType(Me.NewRow,rmListServiceItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rmListServiceItemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rmListServiceItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rmListServiceItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent rmListServiceItemsRowChanged(Me, New rmListServiceItemsRowChangeEvent(CType(e.Row,rmListServiceItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rmListServiceItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent rmListServiceItemsRowChanging(Me, New rmListServiceItemsRowChangeEvent(CType(e.Row,rmListServiceItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rmListServiceItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent rmListServiceItemsRowDeleted(Me, New rmListServiceItemsRowChangeEvent(CType(e.Row,rmListServiceItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rmListServiceItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent rmListServiceItemsRowDeleting(Me, New rmListServiceItemsRowChangeEvent(CType(e.Row,rmListServiceItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovermListServiceItemsRow(ByVal row As rmListServiceItemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rmListServiceItemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientProjectItemsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        Private columnCustID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDesc As Global.System.Data.DataColumn
        
        Private columnDateBegin As Global.System.Data.DataColumn
        
        Private columnDateEnd As Global.System.Data.DataColumn
        
        Private columnDateRemind As Global.System.Data.DataColumn
        
        Private columnSatisfied As Global.System.Data.DataColumn
        
        Private columnCost As Global.System.Data.DataColumn
        
        Private columnApplies As Global.System.Data.DataColumn
        
        Private columnDateRenewal As Global.System.Data.DataColumn
        
        Private columnDateExpiration As Global.System.Data.DataColumn
        
        Private columnCurrentStatus As Global.System.Data.DataColumn
        
        Private columnCurrentProcess As Global.System.Data.DataColumn
        
        Private columnIsBondItem As Global.System.Data.DataColumn
        
        Private columnBondNumber As Global.System.Data.DataColumn
        
        Private columnBondState As Global.System.Data.DataColumn
        
        Private columnBondAmount As Global.System.Data.DataColumn
        
        Private columnBondAgencyName As Global.System.Data.DataColumn
        
        Private columnAssignedTo As Global.System.Data.DataColumn
        
        Private columnAtClient As Global.System.Data.DataColumn
        
        Private columnAtState As Global.System.Data.DataColumn
        
        Private columnTenDaySent As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClientProjectItems"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateBeginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateBegin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateEndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateEnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRemindColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRemind
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SatisfiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSatisfied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApplies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRenewalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRenewal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExpirationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExpiration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentProcessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentProcess
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsBondItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsBondItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BondAgencyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBondAgencyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignedToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignedTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TenDaySentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTenDaySent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientProjectItemsRow
            Get
                Return CType(Me.Rows(index),ClientProjectItemsRow)
            End Get
        End Property
        
        Public Event ClientProjectItemsRowChanging As ClientProjectItemsRowChangeEventHandler
        
        Public Event ClientProjectItemsRowChanged As ClientProjectItemsRowChangeEventHandler
        
        Public Event ClientProjectItemsRowDeleting As ClientProjectItemsRowChangeEventHandler
        
        Public Event ClientProjectItemsRowDeleted As ClientProjectItemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientProjectItemsRow(ByVal row As ClientProjectItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientProjectItemsRow( _
                    ByVal DateCreated As Date,  _
                    ByVal CustID As Integer,  _
                    ByVal Name As String,  _
                    ByVal Desc As String,  _
                    ByVal DateBegin As Date,  _
                    ByVal DateEnd As Date,  _
                    ByVal DateRemind As Date,  _
                    ByVal Satisfied As Boolean,  _
                    ByVal Cost As Decimal,  _
                    ByVal Applies As Boolean,  _
                    ByVal DateRenewal As Date,  _
                    ByVal DateExpiration As Date,  _
                    ByVal CurrentStatus As String,  _
                    ByVal CurrentProcess As String,  _
                    ByVal IsBondItem As Boolean,  _
                    ByVal BondNumber As Integer,  _
                    ByVal BondState As String,  _
                    ByVal BondAmount As Decimal,  _
                    ByVal BondAgencyName As String,  _
                    ByVal AssignedTo As String,  _
                    ByVal AtClient As Boolean,  _
                    ByVal AtState As Boolean,  _
                    ByVal TenDaySent As Boolean) As ClientProjectItemsRow
            Dim rowClientProjectItemsRow As ClientProjectItemsRow = CType(Me.NewRow,ClientProjectItemsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DateCreated, CustID, Name, Desc, DateBegin, DateEnd, DateRemind, Satisfied, Cost, Applies, DateRenewal, DateExpiration, CurrentStatus, CurrentProcess, IsBondItem, BondNumber, BondState, BondAmount, BondAgencyName, AssignedTo, AtClient, AtState, TenDaySent}
            rowClientProjectItemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientProjectItemsRow)
            Return rowClientProjectItemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As ClientProjectItemsRow
            Return CType(Me.Rows.Find(New Object() {ID}),ClientProjectItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientProjectItemsDataTable = CType(MyBase.Clone,ClientProjectItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientProjectItemsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
            Me.columnCustID = MyBase.Columns("CustID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDesc = MyBase.Columns("Desc")
            Me.columnDateBegin = MyBase.Columns("DateBegin")
            Me.columnDateEnd = MyBase.Columns("DateEnd")
            Me.columnDateRemind = MyBase.Columns("DateRemind")
            Me.columnSatisfied = MyBase.Columns("Satisfied")
            Me.columnCost = MyBase.Columns("Cost")
            Me.columnApplies = MyBase.Columns("Applies")
            Me.columnDateRenewal = MyBase.Columns("DateRenewal")
            Me.columnDateExpiration = MyBase.Columns("DateExpiration")
            Me.columnCurrentStatus = MyBase.Columns("CurrentStatus")
            Me.columnCurrentProcess = MyBase.Columns("CurrentProcess")
            Me.columnIsBondItem = MyBase.Columns("IsBondItem")
            Me.columnBondNumber = MyBase.Columns("BondNumber")
            Me.columnBondState = MyBase.Columns("BondState")
            Me.columnBondAmount = MyBase.Columns("BondAmount")
            Me.columnBondAgencyName = MyBase.Columns("BondAgencyName")
            Me.columnAssignedTo = MyBase.Columns("AssignedTo")
            Me.columnAtClient = MyBase.Columns("AtClient")
            Me.columnAtState = MyBase.Columns("AtState")
            Me.columnTenDaySent = MyBase.Columns("TenDaySent")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.columnCustID = New Global.System.Data.DataColumn("CustID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDesc = New Global.System.Data.DataColumn("Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc)
            Me.columnDateBegin = New Global.System.Data.DataColumn("DateBegin", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateBegin)
            Me.columnDateEnd = New Global.System.Data.DataColumn("DateEnd", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEnd)
            Me.columnDateRemind = New Global.System.Data.DataColumn("DateRemind", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRemind)
            Me.columnSatisfied = New Global.System.Data.DataColumn("Satisfied", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSatisfied)
            Me.columnCost = New Global.System.Data.DataColumn("Cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCost)
            Me.columnApplies = New Global.System.Data.DataColumn("Applies", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApplies)
            Me.columnDateRenewal = New Global.System.Data.DataColumn("DateRenewal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRenewal)
            Me.columnDateExpiration = New Global.System.Data.DataColumn("DateExpiration", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExpiration)
            Me.columnCurrentStatus = New Global.System.Data.DataColumn("CurrentStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentStatus)
            Me.columnCurrentProcess = New Global.System.Data.DataColumn("CurrentProcess", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentProcess)
            Me.columnIsBondItem = New Global.System.Data.DataColumn("IsBondItem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsBondItem)
            Me.columnBondNumber = New Global.System.Data.DataColumn("BondNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondNumber)
            Me.columnBondState = New Global.System.Data.DataColumn("BondState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondState)
            Me.columnBondAmount = New Global.System.Data.DataColumn("BondAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondAmount)
            Me.columnBondAgencyName = New Global.System.Data.DataColumn("BondAgencyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBondAgencyName)
            Me.columnAssignedTo = New Global.System.Data.DataColumn("AssignedTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignedTo)
            Me.columnAtClient = New Global.System.Data.DataColumn("AtClient", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtClient)
            Me.columnAtState = New Global.System.Data.DataColumn("AtState", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtState)
            Me.columnTenDaySent = New Global.System.Data.DataColumn("TenDaySent", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTenDaySent)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 255
            Me.columnDesc.MaxLength = 1073741823
            Me.columnCurrentStatus.MaxLength = 1073741823
            Me.columnCurrentProcess.MaxLength = 50
            Me.columnBondState.MaxLength = 50
            Me.columnBondAgencyName.MaxLength = 255
            Me.columnAssignedTo.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientProjectItemsRow() As ClientProjectItemsRow
            Return CType(Me.NewRow,ClientProjectItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientProjectItemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientProjectItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientProjectItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientProjectItemsRowChanged(Me, New ClientProjectItemsRowChangeEvent(CType(e.Row,ClientProjectItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientProjectItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientProjectItemsRowChanging(Me, New ClientProjectItemsRowChangeEvent(CType(e.Row,ClientProjectItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientProjectItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientProjectItemsRowDeleted(Me, New ClientProjectItemsRowChangeEvent(CType(e.Row,ClientProjectItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientProjectItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientProjectItemsRowDeleting(Me, New ClientProjectItemsRowChangeEvent(CType(e.Row,ClientProjectItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientProjectItemsRow(ByVal row As ClientProjectItemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientProjectItemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RenewalQueueDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnQueueName As Global.System.Data.DataColumn
        
        Private columnSQLstmt As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RenewalQueue"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QueueNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQueueName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SQLstmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSQLstmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RenewalQueueRow
            Get
                Return CType(Me.Rows(index),RenewalQueueRow)
            End Get
        End Property
        
        Public Event RenewalQueueRowChanging As RenewalQueueRowChangeEventHandler
        
        Public Event RenewalQueueRowChanged As RenewalQueueRowChangeEventHandler
        
        Public Event RenewalQueueRowDeleting As RenewalQueueRowChangeEventHandler
        
        Public Event RenewalQueueRowDeleted As RenewalQueueRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRenewalQueueRow(ByVal row As RenewalQueueRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRenewalQueueRow(ByVal QueueName As String, ByVal SQLstmt As String, ByVal Description As String) As RenewalQueueRow
            Dim rowRenewalQueueRow As RenewalQueueRow = CType(Me.NewRow,RenewalQueueRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, QueueName, SQLstmt, Description}
            rowRenewalQueueRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRenewalQueueRow)
            Return rowRenewalQueueRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As RenewalQueueRow
            Return CType(Me.Rows.Find(New Object() {ID}),RenewalQueueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RenewalQueueDataTable = CType(MyBase.Clone,RenewalQueueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RenewalQueueDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnQueueName = MyBase.Columns("QueueName")
            Me.columnSQLstmt = MyBase.Columns("SQLstmt")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnQueueName = New Global.System.Data.DataColumn("QueueName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQueueName)
            Me.columnSQLstmt = New Global.System.Data.DataColumn("SQLstmt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSQLstmt)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnQueueName.MaxLength = 255
            Me.columnSQLstmt.MaxLength = 2147483647
            Me.columnDescription.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRenewalQueueRow() As RenewalQueueRow
            Return CType(Me.NewRow,RenewalQueueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RenewalQueueRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RenewalQueueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RenewalQueueRowChangedEvent) Is Nothing) Then
                RaiseEvent RenewalQueueRowChanged(Me, New RenewalQueueRowChangeEvent(CType(e.Row,RenewalQueueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RenewalQueueRowChangingEvent) Is Nothing) Then
                RaiseEvent RenewalQueueRowChanging(Me, New RenewalQueueRowChangeEvent(CType(e.Row,RenewalQueueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RenewalQueueRowDeletedEvent) Is Nothing) Then
                RaiseEvent RenewalQueueRowDeleted(Me, New RenewalQueueRowChangeEvent(CType(e.Row,RenewalQueueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RenewalQueueRowDeletingEvent) Is Nothing) Then
                RaiseEvent RenewalQueueRowDeleting(Me, New RenewalQueueRowChangeEvent(CType(e.Row,RenewalQueueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRenewalQueueRow(ByVal row As RenewalQueueRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RenewalQueueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RenewalFeesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columncustID As Global.System.Data.DataColumn
        
        Private columnAnnualRenewalFee As Global.System.Data.DataColumn
        
        Private columnbizname As Global.System.Data.DataColumn
        
        Private columnAssignee As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RenewalFees"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnnualRenewalFeeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnnualRenewalFee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property biznameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbizname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssigneeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RenewalFeesRow
            Get
                Return CType(Me.Rows(index),RenewalFeesRow)
            End Get
        End Property
        
        Public Event RenewalFeesRowChanging As RenewalFeesRowChangeEventHandler
        
        Public Event RenewalFeesRowChanged As RenewalFeesRowChangeEventHandler
        
        Public Event RenewalFeesRowDeleting As RenewalFeesRowChangeEventHandler
        
        Public Event RenewalFeesRowDeleted As RenewalFeesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRenewalFeesRow(ByVal row As RenewalFeesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRenewalFeesRow(ByVal custID As Integer, ByVal AnnualRenewalFee As Integer, ByVal bizname As String, ByVal Assignee As String) As RenewalFeesRow
            Dim rowRenewalFeesRow As RenewalFeesRow = CType(Me.NewRow,RenewalFeesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, custID, AnnualRenewalFee, bizname, Assignee}
            rowRenewalFeesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRenewalFeesRow)
            Return rowRenewalFeesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As RenewalFeesRow
            Return CType(Me.Rows.Find(New Object() {ID}),RenewalFeesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RenewalFeesDataTable = CType(MyBase.Clone,RenewalFeesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RenewalFeesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columncustID = MyBase.Columns("custID")
            Me.columnAnnualRenewalFee = MyBase.Columns("AnnualRenewalFee")
            Me.columnbizname = MyBase.Columns("bizname")
            Me.columnAssignee = MyBase.Columns("Assignee")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columncustID = New Global.System.Data.DataColumn("custID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustID)
            Me.columnAnnualRenewalFee = New Global.System.Data.DataColumn("AnnualRenewalFee", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnnualRenewalFee)
            Me.columnbizname = New Global.System.Data.DataColumn("bizname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbizname)
            Me.columnAssignee = New Global.System.Data.DataColumn("Assignee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignee)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnbizname.MaxLength = 255
            Me.columnAssignee.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRenewalFeesRow() As RenewalFeesRow
            Return CType(Me.NewRow,RenewalFeesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RenewalFeesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RenewalFeesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RenewalFeesRowChangedEvent) Is Nothing) Then
                RaiseEvent RenewalFeesRowChanged(Me, New RenewalFeesRowChangeEvent(CType(e.Row,RenewalFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RenewalFeesRowChangingEvent) Is Nothing) Then
                RaiseEvent RenewalFeesRowChanging(Me, New RenewalFeesRowChangeEvent(CType(e.Row,RenewalFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RenewalFeesRowDeletedEvent) Is Nothing) Then
                RaiseEvent RenewalFeesRowDeleted(Me, New RenewalFeesRowChangeEvent(CType(e.Row,RenewalFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RenewalFeesRowDeletingEvent) Is Nothing) Then
                RaiseEvent RenewalFeesRowDeleting(Me, New RenewalFeesRowChangeEvent(CType(e.Row,RenewalFeesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRenewalFeesRow(ByVal row As RenewalFeesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RenewalFeesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SIAuditDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSIid As Global.System.Data.DataColumn
        
        Private columnDateAC As Global.System.Data.DataColumn
        
        Private columnDateUC As Global.System.Data.DataColumn
        
        Private columnDateAS As Global.System.Data.DataColumn
        
        Private columnDateSat As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SIAudit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SIidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateUCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateUC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateSatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateSat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SIAuditRow
            Get
                Return CType(Me.Rows(index),SIAuditRow)
            End Get
        End Property
        
        Public Event SIAuditRowChanging As SIAuditRowChangeEventHandler
        
        Public Event SIAuditRowChanged As SIAuditRowChangeEventHandler
        
        Public Event SIAuditRowDeleting As SIAuditRowChangeEventHandler
        
        Public Event SIAuditRowDeleted As SIAuditRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSIAuditRow(ByVal row As SIAuditRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSIAuditRow(ByVal parentrmServiceItemRowByrmServiceItem_SIAudit As rmServiceItemRow, ByVal DateAC As Date, ByVal DateUC As Date, ByVal DateAS As Date, ByVal DateSat As Date) As SIAuditRow
            Dim rowSIAuditRow As SIAuditRow = CType(Me.NewRow,SIAuditRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, DateAC, DateUC, DateAS, DateSat}
            If (Not (parentrmServiceItemRowByrmServiceItem_SIAudit) Is Nothing) Then
                columnValuesArray(1) = parentrmServiceItemRowByrmServiceItem_SIAudit(0)
            End If
            rowSIAuditRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSIAuditRow)
            Return rowSIAuditRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As SIAuditRow
            Return CType(Me.Rows.Find(New Object() {ID}),SIAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SIAuditDataTable = CType(MyBase.Clone,SIAuditDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SIAuditDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSIid = MyBase.Columns("SIid")
            Me.columnDateAC = MyBase.Columns("DateAC")
            Me.columnDateUC = MyBase.Columns("DateUC")
            Me.columnDateAS = MyBase.Columns("DateAS")
            Me.columnDateSat = MyBase.Columns("DateSat")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSIid = New Global.System.Data.DataColumn("SIid", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIid)
            Me.columnDateAC = New Global.System.Data.DataColumn("DateAC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAC)
            Me.columnDateUC = New Global.System.Data.DataColumn("DateUC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateUC)
            Me.columnDateAS = New Global.System.Data.DataColumn("DateAS", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAS)
            Me.columnDateSat = New Global.System.Data.DataColumn("DateSat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateSat)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnSIid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSIAuditRow() As SIAuditRow
            Return CType(Me.NewRow,SIAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SIAuditRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SIAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SIAuditRowChangedEvent) Is Nothing) Then
                RaiseEvent SIAuditRowChanged(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SIAuditRowChangingEvent) Is Nothing) Then
                RaiseEvent SIAuditRowChanging(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SIAuditRowDeletedEvent) Is Nothing) Then
                RaiseEvent SIAuditRowDeleted(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SIAuditRowDeletingEvent) Is Nothing) Then
                RaiseEvent SIAuditRowDeleting(Me, New SIAuditRowChangeEvent(CType(e.Row,SIAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSIAuditRow(ByVal row As SIAuditRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SIAuditDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RenewalQueueHistoryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnQueueID As Global.System.Data.DataColumn
        
        Private columnDateRan As Global.System.Data.DataColumn
        
        Private columnTheCount As Global.System.Data.DataColumn
        
        Private columnQueueName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RenewalQueueHistory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QueueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQueueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TheCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTheCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QueueNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQueueName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RenewalQueueHistoryRow
            Get
                Return CType(Me.Rows(index),RenewalQueueHistoryRow)
            End Get
        End Property
        
        Public Event RenewalQueueHistoryRowChanging As RenewalQueueHistoryRowChangeEventHandler
        
        Public Event RenewalQueueHistoryRowChanged As RenewalQueueHistoryRowChangeEventHandler
        
        Public Event RenewalQueueHistoryRowDeleting As RenewalQueueHistoryRowChangeEventHandler
        
        Public Event RenewalQueueHistoryRowDeleted As RenewalQueueHistoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRenewalQueueHistoryRow(ByVal row As RenewalQueueHistoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRenewalQueueHistoryRow(ByVal QueueID As Integer, ByVal DateRan As Date, ByVal TheCount As Integer, ByVal QueueName As String) As RenewalQueueHistoryRow
            Dim rowRenewalQueueHistoryRow As RenewalQueueHistoryRow = CType(Me.NewRow,RenewalQueueHistoryRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, QueueID, DateRan, TheCount, QueueName}
            rowRenewalQueueHistoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRenewalQueueHistoryRow)
            Return rowRenewalQueueHistoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Long) As RenewalQueueHistoryRow
            Return CType(Me.Rows.Find(New Object() {ID}),RenewalQueueHistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RenewalQueueHistoryDataTable = CType(MyBase.Clone,RenewalQueueHistoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RenewalQueueHistoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnQueueID = MyBase.Columns("QueueID")
            Me.columnDateRan = MyBase.Columns("DateRan")
            Me.columnTheCount = MyBase.Columns("TheCount")
            Me.columnQueueName = MyBase.Columns("QueueName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnQueueID = New Global.System.Data.DataColumn("QueueID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQueueID)
            Me.columnDateRan = New Global.System.Data.DataColumn("DateRan", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRan)
            Me.columnTheCount = New Global.System.Data.DataColumn("TheCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTheCount)
            Me.columnQueueName = New Global.System.Data.DataColumn("QueueName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQueueName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnQueueID.AllowDBNull = false
            Me.columnDateRan.AllowDBNull = false
            Me.columnTheCount.AllowDBNull = false
            Me.columnQueueName.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRenewalQueueHistoryRow() As RenewalQueueHistoryRow
            Return CType(Me.NewRow,RenewalQueueHistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RenewalQueueHistoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RenewalQueueHistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RenewalQueueHistoryRowChangedEvent) Is Nothing) Then
                RaiseEvent RenewalQueueHistoryRowChanged(Me, New RenewalQueueHistoryRowChangeEvent(CType(e.Row,RenewalQueueHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RenewalQueueHistoryRowChangingEvent) Is Nothing) Then
                RaiseEvent RenewalQueueHistoryRowChanging(Me, New RenewalQueueHistoryRowChangeEvent(CType(e.Row,RenewalQueueHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RenewalQueueHistoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent RenewalQueueHistoryRowDeleted(Me, New RenewalQueueHistoryRowChangeEvent(CType(e.Row,RenewalQueueHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RenewalQueueHistoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent RenewalQueueHistoryRowDeleting(Me, New RenewalQueueHistoryRowChangeEvent(CType(e.Row,RenewalQueueHistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRenewalQueueHistoryRow(ByVal row As RenewalQueueHistoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RenewalQueueHistoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RenewalAssigneesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columncustID As Global.System.Data.DataColumn
        
        Private columnAssignee As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RenewalAssignees"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssigneeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RenewalAssigneesRow
            Get
                Return CType(Me.Rows(index),RenewalAssigneesRow)
            End Get
        End Property
        
        Public Event RenewalAssigneesRowChanging As RenewalAssigneesRowChangeEventHandler
        
        Public Event RenewalAssigneesRowChanged As RenewalAssigneesRowChangeEventHandler
        
        Public Event RenewalAssigneesRowDeleting As RenewalAssigneesRowChangeEventHandler
        
        Public Event RenewalAssigneesRowDeleted As RenewalAssigneesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRenewalAssigneesRow(ByVal row As RenewalAssigneesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRenewalAssigneesRow(ByVal parentCompanyRowByCompany_RenewalAssignees As CompanyRow, ByVal Assignee As String) As RenewalAssigneesRow
            Dim rowRenewalAssigneesRow As RenewalAssigneesRow = CType(Me.NewRow,RenewalAssigneesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Assignee}
            If (Not (parentCompanyRowByCompany_RenewalAssignees) Is Nothing) Then
                columnValuesArray(1) = parentCompanyRowByCompany_RenewalAssignees(1)
            End If
            rowRenewalAssigneesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRenewalAssigneesRow)
            Return rowRenewalAssigneesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As RenewalAssigneesRow
            Return CType(Me.Rows.Find(New Object() {ID}),RenewalAssigneesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RenewalAssigneesDataTable = CType(MyBase.Clone,RenewalAssigneesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RenewalAssigneesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columncustID = MyBase.Columns("custID")
            Me.columnAssignee = MyBase.Columns("Assignee")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columncustID = New Global.System.Data.DataColumn("custID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustID)
            Me.columnAssignee = New Global.System.Data.DataColumn("Assignee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignee)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnAssignee.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRenewalAssigneesRow() As RenewalAssigneesRow
            Return CType(Me.NewRow,RenewalAssigneesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RenewalAssigneesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RenewalAssigneesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RenewalAssigneesRowChangedEvent) Is Nothing) Then
                RaiseEvent RenewalAssigneesRowChanged(Me, New RenewalAssigneesRowChangeEvent(CType(e.Row,RenewalAssigneesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RenewalAssigneesRowChangingEvent) Is Nothing) Then
                RaiseEvent RenewalAssigneesRowChanging(Me, New RenewalAssigneesRowChangeEvent(CType(e.Row,RenewalAssigneesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RenewalAssigneesRowDeletedEvent) Is Nothing) Then
                RaiseEvent RenewalAssigneesRowDeleted(Me, New RenewalAssigneesRowChangeEvent(CType(e.Row,RenewalAssigneesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RenewalAssigneesRowDeletingEvent) Is Nothing) Then
                RaiseEvent RenewalAssigneesRowDeleting(Me, New RenewalAssigneesRowChangeEvent(CType(e.Row,RenewalAssigneesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRenewalAssigneesRow(ByVal row As RenewalAssigneesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CornerstoneSQLRenewalQueue = New CornerstoneSQLRenewalQueue
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RenewalAssigneesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CompanyRow
        Inherits Global.System.Data.DataRow
        
        Private tableCompany As CompanyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompany = CType(Me.Table,CompanyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custID() As Integer
            Get
                Return CType(Me(Me.tableCompany.custIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCompany.custIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bizname() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.biznameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bizname' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.biznameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dba() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.dbaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dba' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.dbaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_street() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_streetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-street' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_streetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_street2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_street2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-street2' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_street2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_city() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_cityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-city' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_cityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_state() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_stateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-state' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_stateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_zip() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_zipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-zip' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_zipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_phone() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_phoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-phone' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_faxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-fax' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_email() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-email' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_manager() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_managerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-manager' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_managerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _primary_contact() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._primary_contactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'primary-contact' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._primary_contactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _biz_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._biz_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'biz-type' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._biz_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Pres_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._Pres_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pres-name' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._Pres_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notary1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.notary1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notary1' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.notary1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notary2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.notary2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notary2' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.notary2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notary3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.notary3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notary3' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.notary3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _duration_of_company() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._duration_of_companyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'duration-of-company' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._duration_of_companyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _percent_biz_retail() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany._percent_biz_retailColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'percent-biz-retail' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._percent_biz_retailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _percent_biz_commercial() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany._percent_biz_commercialColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'percent-biz-commercial' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._percent_biz_commercialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _stock_par_value() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._stock_par_valueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stock-par-value' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._stock_par_valueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _states_to_license() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._states_to_licenseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'states-to-license' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._states_to_licenseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _800_() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._800_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '800#' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._800_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property county() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.countyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'county' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.countyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockclass() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.stockclassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stockclass' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.stockclassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockseries() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.stockseriesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stockseries' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.stockseriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _stock_authorized() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._stock_authorizedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stock#authorized' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._stock_authorizedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _stock_issued() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._stock_issuedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stock#issued' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._stock_issuedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignedTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.AssignedToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedTo' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.AssignedToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsArchived() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompany.IsArchivedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsArchived' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.IsArchivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompany.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HasAuditProblem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompany.HasAuditProblemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HasAuditProblem' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.HasAuditProblemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReqPasswords() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCompany.ReqPasswordsColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReqPasswords' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.ReqPasswordsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReportsPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.ReportsPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReportsPath' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.ReportsPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArchivesPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.ArchivesPathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArchivesPath' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.ArchivesPathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemoDeadline() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompany.DemoDeadlineColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DemoDeadline' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.DemoDeadlineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumAllowed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany.NumAllowedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumAllowed' in table 'Company' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.NumAllowedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableCompany.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableCompany.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbiznameNull() As Boolean
            Return Me.IsNull(Me.tableCompany.biznameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbiznameNull()
            Me(Me.tableCompany.biznameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdbaNull() As Boolean
            Return Me.IsNull(Me.tableCompany.dbaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdbaNull()
            Me(Me.tableCompany.dbaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_streetNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_streetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_streetNull()
            Me(Me.tableCompany._primary_streetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_street2Null() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_street2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_street2Null()
            Me(Me.tableCompany._primary_street2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_cityNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_cityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_cityNull()
            Me(Me.tableCompany._primary_cityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_stateNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_stateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_stateNull()
            Me(Me.tableCompany._primary_stateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_zipNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_zipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_zipNull()
            Me(Me.tableCompany._primary_zipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_phoneNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_phoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_phoneNull()
            Me(Me.tableCompany._primary_phoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_faxNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_faxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_faxNull()
            Me(Me.tableCompany._primary_faxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_emailNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_emailNull()
            Me(Me.tableCompany._primary_emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_managerNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_managerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_managerNull()
            Me(Me.tableCompany._primary_managerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_primary_contactNull() As Boolean
            Return Me.IsNull(Me.tableCompany._primary_contactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_primary_contactNull()
            Me(Me.tableCompany._primary_contactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_biz_typeNull() As Boolean
            Return Me.IsNull(Me.tableCompany._biz_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_biz_typeNull()
            Me(Me.tableCompany._biz_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Pres_nameNull() As Boolean
            Return Me.IsNull(Me.tableCompany._Pres_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Pres_nameNull()
            Me(Me.tableCompany._Pres_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnotary1Null() As Boolean
            Return Me.IsNull(Me.tableCompany.notary1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnotary1Null()
            Me(Me.tableCompany.notary1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnotary2Null() As Boolean
            Return Me.IsNull(Me.tableCompany.notary2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnotary2Null()
            Me(Me.tableCompany.notary2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnotary3Null() As Boolean
            Return Me.IsNull(Me.tableCompany.notary3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnotary3Null()
            Me(Me.tableCompany.notary3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_duration_of_companyNull() As Boolean
            Return Me.IsNull(Me.tableCompany._duration_of_companyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_duration_of_companyNull()
            Me(Me.tableCompany._duration_of_companyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_percent_biz_retailNull() As Boolean
            Return Me.IsNull(Me.tableCompany._percent_biz_retailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_percent_biz_retailNull()
            Me(Me.tableCompany._percent_biz_retailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_percent_biz_commercialNull() As Boolean
            Return Me.IsNull(Me.tableCompany._percent_biz_commercialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_percent_biz_commercialNull()
            Me(Me.tableCompany._percent_biz_commercialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_stock_par_valueNull() As Boolean
            Return Me.IsNull(Me.tableCompany._stock_par_valueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_stock_par_valueNull()
            Me(Me.tableCompany._stock_par_valueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_states_to_licenseNull() As Boolean
            Return Me.IsNull(Me.tableCompany._states_to_licenseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_states_to_licenseNull()
            Me(Me.tableCompany._states_to_licenseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_800_Null() As Boolean
            Return Me.IsNull(Me.tableCompany._800_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_800_Null()
            Me(Me.tableCompany._800_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscountyNull() As Boolean
            Return Me.IsNull(Me.tableCompany.countyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcountyNull()
            Me(Me.tableCompany.countyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockclassNull() As Boolean
            Return Me.IsNull(Me.tableCompany.stockclassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockclassNull()
            Me(Me.tableCompany.stockclassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockseriesNull() As Boolean
            Return Me.IsNull(Me.tableCompany.stockseriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockseriesNull()
            Me(Me.tableCompany.stockseriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_stock_authorizedNull() As Boolean
            Return Me.IsNull(Me.tableCompany._stock_authorizedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_stock_authorizedNull()
            Me(Me.tableCompany._stock_authorizedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_stock_issuedNull() As Boolean
            Return Me.IsNull(Me.tableCompany._stock_issuedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_stock_issuedNull()
            Me(Me.tableCompany._stock_issuedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssignedToNull() As Boolean
            Return Me.IsNull(Me.tableCompany.AssignedToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssignedToNull()
            Me(Me.tableCompany.AssignedToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableCompany.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableCompany.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsArchivedNull() As Boolean
            Return Me.IsNull(Me.tableCompany.IsArchivedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsArchivedNull()
            Me(Me.tableCompany.IsArchivedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableCompany.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tableCompany.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHasAuditProblemNull() As Boolean
            Return Me.IsNull(Me.tableCompany.HasAuditProblemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHasAuditProblemNull()
            Me(Me.tableCompany.HasAuditProblemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReqPasswordsNull() As Boolean
            Return Me.IsNull(Me.tableCompany.ReqPasswordsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReqPasswordsNull()
            Me(Me.tableCompany.ReqPasswordsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReportsPathNull() As Boolean
            Return Me.IsNull(Me.tableCompany.ReportsPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReportsPathNull()
            Me(Me.tableCompany.ReportsPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArchivesPathNull() As Boolean
            Return Me.IsNull(Me.tableCompany.ArchivesPathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArchivesPathNull()
            Me(Me.tableCompany.ArchivesPathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemoDeadlineNull() As Boolean
            Return Me.IsNull(Me.tableCompany.DemoDeadlineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemoDeadlineNull()
            Me(Me.tableCompany.DemoDeadlineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumAllowedNull() As Boolean
            Return Me.IsNull(Me.tableCompany.NumAllowedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumAllowedNull()
            Me(Me.tableCompany.NumAllowedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetrmServiceItemRows() As rmServiceItemRow()
            If (Me.Table.ChildRelations("Company_rmServiceItem") Is Nothing) Then
                Return New rmServiceItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Company_rmServiceItem")),rmServiceItemRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRenewalAssigneesRows() As RenewalAssigneesRow()
            If (Me.Table.ChildRelations("Company_RenewalAssignees") Is Nothing) Then
                Return New RenewalAssigneesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Company_RenewalAssignees")),RenewalAssigneesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rmServiceItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablermServiceItem As rmServiceItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablermServiceItem = CType(Me.Table,rmServiceItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tablermServiceItem.IDColumn),Long)
            End Get
            Set
                Me(Me.tablermServiceItem.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CustIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustID' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Desc' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateBegin() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateBeginColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateBegin' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateBeginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEnd() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateEndColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEnd' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateEndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRemind() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateRemindColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRemind' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateRemindColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Satisfied() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.SatisfiedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Satisfied' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.SatisfiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Applies() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AppliesColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Applies' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AppliesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRenewal() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateRenewalColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRenewal' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateRenewalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExpiration() As Date
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.DateExpirationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExpiration' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.DateExpirationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CurrentStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentStatus' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CurrentStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentProcess() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.CurrentProcessColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentProcess' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.CurrentProcessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsBondItem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.IsBondItemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsBondItem' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.IsBondItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondNumber' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondState() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondState' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondAmount' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondAgencyName() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.BondAgencyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondAgencyName' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.BondAgencyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignedTo() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AssignedToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedTo' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AssignedToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtClient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AtClientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtClient' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AtClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtState() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AtStateColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtState' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AtStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TenDaySent() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.TenDaySentColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TenDaySent' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.TenDaySentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtCornerstone() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.AtCornerstoneColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtCornerstone' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.AtCornerstoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bizname() As String
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.biznameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bizname' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.biznameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsRenewalItem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermServiceItem.IsRenewalItemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsRenewalItem' in table 'rmServiceItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermServiceItem.IsRenewalItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyRow() As CompanyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Company_rmServiceItem")),CompanyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Company_rmServiceItem"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tablermServiceItem.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustIDNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CustIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustIDNull()
            Me(Me.tablermServiceItem.CustIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablermServiceItem.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescNull()
            Me(Me.tablermServiceItem.DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateBeginNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateBeginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateBeginNull()
            Me(Me.tablermServiceItem.DateBeginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEndNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateEndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEndNull()
            Me(Me.tablermServiceItem.DateEndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRemindNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateRemindColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRemindNull()
            Me(Me.tablermServiceItem.DateRemindColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSatisfiedNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.SatisfiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSatisfiedNull()
            Me(Me.tablermServiceItem.SatisfiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNull()
            Me(Me.tablermServiceItem.CostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliesNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AppliesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliesNull()
            Me(Me.tablermServiceItem.AppliesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRenewalNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateRenewalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRenewalNull()
            Me(Me.tablermServiceItem.DateRenewalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExpirationNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.DateExpirationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExpirationNull()
            Me(Me.tablermServiceItem.DateExpirationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentStatusNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CurrentStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentStatusNull()
            Me(Me.tablermServiceItem.CurrentStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentProcessNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.CurrentProcessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentProcessNull()
            Me(Me.tablermServiceItem.CurrentProcessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsBondItemNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.IsBondItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsBondItemNull()
            Me(Me.tablermServiceItem.IsBondItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondNumberNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondNumberNull()
            Me(Me.tablermServiceItem.BondNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondStateNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondStateNull()
            Me(Me.tablermServiceItem.BondStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondAmountNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondAmountNull()
            Me(Me.tablermServiceItem.BondAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondAgencyNameNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.BondAgencyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondAgencyNameNull()
            Me(Me.tablermServiceItem.BondAgencyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssignedToNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AssignedToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssignedToNull()
            Me(Me.tablermServiceItem.AssignedToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtClientNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AtClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtClientNull()
            Me(Me.tablermServiceItem.AtClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtStateNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AtStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtStateNull()
            Me(Me.tablermServiceItem.AtStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTenDaySentNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.TenDaySentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTenDaySentNull()
            Me(Me.tablermServiceItem.TenDaySentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tablermServiceItem.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtCornerstoneNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.AtCornerstoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtCornerstoneNull()
            Me(Me.tablermServiceItem.AtCornerstoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbiznameNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.biznameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbiznameNull()
            Me(Me.tablermServiceItem.biznameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsRenewalItemNull() As Boolean
            Return Me.IsNull(Me.tablermServiceItem.IsRenewalItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsRenewalItemNull()
            Me(Me.tablermServiceItem.IsRenewalItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSIAuditRows() As SIAuditRow()
            If (Me.Table.ChildRelations("rmServiceItem_SIAudit") Is Nothing) Then
                Return New SIAuditRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("rmServiceItem_SIAudit")),SIAuditRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rmUsersRow
        Inherits Global.System.Data.DataRow
        
        Private tablermUsers As rmUsersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablermUsers = CType(Me.Table,rmUsersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablermUsers.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'rmUsers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermUsers.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablermUsers.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablermUsers.NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StatesRow
        Inherits Global.System.Data.DataRow
        
        Private tableStates As StatesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStates = CType(Me.Table,StatesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableStates.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableStates.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property state() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.stateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'state' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.stateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property slot1() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.slot1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'slot1' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.slot1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone1() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.Phone1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone1' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.Phone1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone2() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.Phone2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone2' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.Phone2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone3() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.Phone3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone3' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.Phone3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone4() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.Phone4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone4' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.Phone4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.Phone5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone5' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.Phone5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAToWhom1() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.COAToWhom1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAToWhom1' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.COAToWhom1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAToWhom2() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.COAToWhom2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAToWhom2' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.COAToWhom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAToWhom3() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.COAToWhom3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAToWhom3' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.COAToWhom3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAstreet() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.COAstreetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAstreet' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.COAstreetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COAcsz() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.COAcszColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COAcsz' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.COAcszColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICToWhom1() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LICToWhom1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICToWhom1' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LICToWhom1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICToWhom2() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LICToWhom2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICToWhom2' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LICToWhom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICToWhom3() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LICToWhom3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICToWhom3' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LICToWhom3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICstreet() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LICstreetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICstreet' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LICstreetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICcsz() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LICcszColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICcsz' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LICcszColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.notesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notes' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.notesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COArecordset() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStates.COArecordsetColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COArecordset' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.COArecordsetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LICrecordset() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStates.LICrecordsetColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LICrecordset' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LICrecordsetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOGSline1() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LOGSline1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOGSline1' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LOGSline1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOGSline2() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LOGSline2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOGSline2' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LOGSline2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOGSline3() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LOGSline3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOGSline3' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LOGSline3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOGSline4() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LOGSline4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOGSline4' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LOGSline4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOGSline5() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.LOGSline5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOGSline5' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.LOGSline5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WebAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.WebAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WebAddress' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.WebAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PriorityServiceInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableStates.PriorityServiceInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PriorityServiceInfo' in table 'States' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStates.PriorityServiceInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tableStates.stateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstateNull()
            Me(Me.tableStates.stateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isslot1Null() As Boolean
            Return Me.IsNull(Me.tableStates.slot1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setslot1Null()
            Me(Me.tableStates.slot1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone1Null() As Boolean
            Return Me.IsNull(Me.tableStates.Phone1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone1Null()
            Me(Me.tableStates.Phone1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone2Null() As Boolean
            Return Me.IsNull(Me.tableStates.Phone2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone2Null()
            Me(Me.tableStates.Phone2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone3Null() As Boolean
            Return Me.IsNull(Me.tableStates.Phone3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone3Null()
            Me(Me.tableStates.Phone3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone4Null() As Boolean
            Return Me.IsNull(Me.tableStates.Phone4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone4Null()
            Me(Me.tableStates.Phone4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhone5Null() As Boolean
            Return Me.IsNull(Me.tableStates.Phone5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhone5Null()
            Me(Me.tableStates.Phone5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAToWhom1Null() As Boolean
            Return Me.IsNull(Me.tableStates.COAToWhom1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAToWhom1Null()
            Me(Me.tableStates.COAToWhom1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAToWhom2Null() As Boolean
            Return Me.IsNull(Me.tableStates.COAToWhom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAToWhom2Null()
            Me(Me.tableStates.COAToWhom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAToWhom3Null() As Boolean
            Return Me.IsNull(Me.tableStates.COAToWhom3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAToWhom3Null()
            Me(Me.tableStates.COAToWhom3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAstreetNull() As Boolean
            Return Me.IsNull(Me.tableStates.COAstreetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAstreetNull()
            Me(Me.tableStates.COAstreetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOAcszNull() As Boolean
            Return Me.IsNull(Me.tableStates.COAcszColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOAcszNull()
            Me(Me.tableStates.COAcszColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICToWhom1Null() As Boolean
            Return Me.IsNull(Me.tableStates.LICToWhom1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICToWhom1Null()
            Me(Me.tableStates.LICToWhom1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICToWhom2Null() As Boolean
            Return Me.IsNull(Me.tableStates.LICToWhom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICToWhom2Null()
            Me(Me.tableStates.LICToWhom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICToWhom3Null() As Boolean
            Return Me.IsNull(Me.tableStates.LICToWhom3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICToWhom3Null()
            Me(Me.tableStates.LICToWhom3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICstreetNull() As Boolean
            Return Me.IsNull(Me.tableStates.LICstreetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICstreetNull()
            Me(Me.tableStates.LICstreetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICcszNull() As Boolean
            Return Me.IsNull(Me.tableStates.LICcszColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICcszNull()
            Me(Me.tableStates.LICcszColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tableStates.notesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnotesNull()
            Me(Me.tableStates.notesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOArecordsetNull() As Boolean
            Return Me.IsNull(Me.tableStates.COArecordsetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOArecordsetNull()
            Me(Me.tableStates.COArecordsetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLICrecordsetNull() As Boolean
            Return Me.IsNull(Me.tableStates.LICrecordsetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLICrecordsetNull()
            Me(Me.tableStates.LICrecordsetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOGSline1Null() As Boolean
            Return Me.IsNull(Me.tableStates.LOGSline1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOGSline1Null()
            Me(Me.tableStates.LOGSline1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOGSline2Null() As Boolean
            Return Me.IsNull(Me.tableStates.LOGSline2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOGSline2Null()
            Me(Me.tableStates.LOGSline2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOGSline3Null() As Boolean
            Return Me.IsNull(Me.tableStates.LOGSline3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOGSline3Null()
            Me(Me.tableStates.LOGSline3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOGSline4Null() As Boolean
            Return Me.IsNull(Me.tableStates.LOGSline4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOGSline4Null()
            Me(Me.tableStates.LOGSline4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOGSline5Null() As Boolean
            Return Me.IsNull(Me.tableStates.LOGSline5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOGSline5Null()
            Me(Me.tableStates.LOGSline5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWebAddressNull() As Boolean
            Return Me.IsNull(Me.tableStates.WebAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWebAddressNull()
            Me(Me.tableStates.WebAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriorityServiceInfoNull() As Boolean
            Return Me.IsNull(Me.tableStates.PriorityServiceInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriorityServiceInfoNull()
            Me(Me.tableStates.PriorityServiceInfoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rmListServiceItemsRow
        Inherits Global.System.Data.DataRow
        
        Private tablermListServiceItems As rmListServiceItemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablermListServiceItems = CType(Me.Table,rmListServiceItemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tablermListServiceItems.IDColumn),Long)
            End Get
            Set
                Me(Me.tablermListServiceItems.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablermListServiceItems.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'rmListServiceItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermListServiceItems.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tablermListServiceItems.DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Desc' in table 'rmListServiceItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermListServiceItems.DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablermListServiceItems.CostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'rmListServiceItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermListServiceItems.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Duration() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablermListServiceItems.DurationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Duration' in table 'rmListServiceItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermListServiceItems.DurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstReminder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablermListServiceItems.FirstReminderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstReminder' in table 'rmListServiceItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermListServiceItems.FirstReminderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsRenewalItem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablermListServiceItems.IsRenewalItemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsRenewalItem' in table 'rmListServiceItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablermListServiceItems.IsRenewalItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablermListServiceItems.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tablermListServiceItems.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tablermListServiceItems.DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescNull()
            Me(Me.tablermListServiceItems.DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tablermListServiceItems.CostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNull()
            Me(Me.tablermListServiceItems.CostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tablermListServiceItems.DurationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurationNull()
            Me(Me.tablermListServiceItems.DurationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstReminderNull() As Boolean
            Return Me.IsNull(Me.tablermListServiceItems.FirstReminderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstReminderNull()
            Me(Me.tablermListServiceItems.FirstReminderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsRenewalItemNull() As Boolean
            Return Me.IsNull(Me.tablermListServiceItems.IsRenewalItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsRenewalItemNull()
            Me(Me.tablermListServiceItems.IsRenewalItemColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientProjectItemsRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientProjectItems As ClientProjectItemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientProjectItems = CType(Me.Table,ClientProjectItemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableClientProjectItems.IDColumn),Long)
            End Get
            Set
                Me(Me.tableClientProjectItems.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.DateCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateCreated' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.CustIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustID' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.CustIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Desc' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateBegin() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.DateBeginColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateBegin' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.DateBeginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEnd() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.DateEndColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateEnd' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.DateEndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRemind() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.DateRemindColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRemind' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.DateRemindColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Satisfied() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.SatisfiedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Satisfied' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.SatisfiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.CostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cost' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.CostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Applies() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.AppliesColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Applies' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.AppliesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRenewal() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.DateRenewalColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRenewal' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.DateRenewalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExpiration() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.DateExpirationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExpiration' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.DateExpirationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.CurrentStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentStatus' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.CurrentStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentProcess() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.CurrentProcessColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentProcess' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.CurrentProcessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsBondItem() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.IsBondItemColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsBondItem' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.IsBondItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.BondNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondNumber' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.BondNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondState() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.BondStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondState' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.BondStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.BondAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondAmount' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.BondAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BondAgencyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.BondAgencyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BondAgencyName' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.BondAgencyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignedTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.AssignedToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedTo' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.AssignedToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtClient() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.AtClientColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtClient' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.AtClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AtState() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.AtStateColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AtState' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.AtStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TenDaySent() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientProjectItems.TenDaySentColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TenDaySent' in table 'ClientProjectItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientProjectItems.TenDaySentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.DateCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tableClientProjectItems.DateCreatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustIDNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.CustIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustIDNull()
            Me(Me.tableClientProjectItems.CustIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tableClientProjectItems.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescNull()
            Me(Me.tableClientProjectItems.DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateBeginNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.DateBeginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateBeginNull()
            Me(Me.tableClientProjectItems.DateBeginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEndNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.DateEndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEndNull()
            Me(Me.tableClientProjectItems.DateEndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRemindNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.DateRemindColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRemindNull()
            Me(Me.tableClientProjectItems.DateRemindColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSatisfiedNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.SatisfiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSatisfiedNull()
            Me(Me.tableClientProjectItems.SatisfiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.CostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostNull()
            Me(Me.tableClientProjectItems.CostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliesNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.AppliesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliesNull()
            Me(Me.tableClientProjectItems.AppliesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRenewalNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.DateRenewalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRenewalNull()
            Me(Me.tableClientProjectItems.DateRenewalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExpirationNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.DateExpirationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExpirationNull()
            Me(Me.tableClientProjectItems.DateExpirationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentStatusNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.CurrentStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentStatusNull()
            Me(Me.tableClientProjectItems.CurrentStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentProcessNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.CurrentProcessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentProcessNull()
            Me(Me.tableClientProjectItems.CurrentProcessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsBondItemNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.IsBondItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsBondItemNull()
            Me(Me.tableClientProjectItems.IsBondItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondNumberNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.BondNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondNumberNull()
            Me(Me.tableClientProjectItems.BondNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondStateNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.BondStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondStateNull()
            Me(Me.tableClientProjectItems.BondStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondAmountNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.BondAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondAmountNull()
            Me(Me.tableClientProjectItems.BondAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBondAgencyNameNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.BondAgencyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBondAgencyNameNull()
            Me(Me.tableClientProjectItems.BondAgencyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssignedToNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.AssignedToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssignedToNull()
            Me(Me.tableClientProjectItems.AssignedToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtClientNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.AtClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtClientNull()
            Me(Me.tableClientProjectItems.AtClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtStateNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.AtStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtStateNull()
            Me(Me.tableClientProjectItems.AtStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTenDaySentNull() As Boolean
            Return Me.IsNull(Me.tableClientProjectItems.TenDaySentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTenDaySentNull()
            Me(Me.tableClientProjectItems.TenDaySentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RenewalQueueRow
        Inherits Global.System.Data.DataRow
        
        Private tableRenewalQueue As RenewalQueueDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRenewalQueue = CType(Me.Table,RenewalQueueDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRenewalQueue.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRenewalQueue.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QueueName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRenewalQueue.QueueNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QueueName' in table 'RenewalQueue' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalQueue.QueueNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SQLstmt() As String
            Get
                Try 
                    Return CType(Me(Me.tableRenewalQueue.SQLstmtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SQLstmt' in table 'RenewalQueue' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalQueue.SQLstmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableRenewalQueue.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'RenewalQueue' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalQueue.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQueueNameNull() As Boolean
            Return Me.IsNull(Me.tableRenewalQueue.QueueNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQueueNameNull()
            Me(Me.tableRenewalQueue.QueueNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSQLstmtNull() As Boolean
            Return Me.IsNull(Me.tableRenewalQueue.SQLstmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSQLstmtNull()
            Me(Me.tableRenewalQueue.SQLstmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRenewalQueue.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableRenewalQueue.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RenewalFeesRow
        Inherits Global.System.Data.DataRow
        
        Private tableRenewalFees As RenewalFeesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRenewalFees = CType(Me.Table,RenewalFeesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRenewalFees.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRenewalFees.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRenewalFees.custIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'custID' in table 'RenewalFees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalFees.custIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnnualRenewalFee() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRenewalFees.AnnualRenewalFeeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnnualRenewalFee' in table 'RenewalFees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalFees.AnnualRenewalFeeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bizname() As String
            Get
                Try 
                    Return CType(Me(Me.tableRenewalFees.biznameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bizname' in table 'RenewalFees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalFees.biznameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assignee() As String
            Get
                Try 
                    Return CType(Me(Me.tableRenewalFees.AssigneeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assignee' in table 'RenewalFees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalFees.AssigneeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustIDNull() As Boolean
            Return Me.IsNull(Me.tableRenewalFees.custIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustIDNull()
            Me(Me.tableRenewalFees.custIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnnualRenewalFeeNull() As Boolean
            Return Me.IsNull(Me.tableRenewalFees.AnnualRenewalFeeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnnualRenewalFeeNull()
            Me(Me.tableRenewalFees.AnnualRenewalFeeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbiznameNull() As Boolean
            Return Me.IsNull(Me.tableRenewalFees.biznameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbiznameNull()
            Me(Me.tableRenewalFees.biznameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssigneeNull() As Boolean
            Return Me.IsNull(Me.tableRenewalFees.AssigneeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssigneeNull()
            Me(Me.tableRenewalFees.AssigneeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SIAuditRow
        Inherits Global.System.Data.DataRow
        
        Private tableSIAudit As SIAuditDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSIAudit = CType(Me.Table,SIAuditDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableSIAudit.IDColumn),Long)
            End Get
            Set
                Me(Me.tableSIAudit.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SIid() As Long
            Get
                Return CType(Me(Me.tableSIAudit.SIidColumn),Long)
            End Get
            Set
                Me(Me.tableSIAudit.SIidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateAC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateACColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateAC' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateUC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateUCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateUC' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateUCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateAS() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateASColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateAS' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateSat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSIAudit.DateSatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateSat' in table 'SIAudit' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSIAudit.DateSatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rmServiceItemRow() As rmServiceItemRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("rmServiceItem_SIAudit")),rmServiceItemRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("rmServiceItem_SIAudit"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateACNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateACNull()
            Me(Me.tableSIAudit.DateACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateUCNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateUCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateUCNull()
            Me(Me.tableSIAudit.DateUCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateASNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateASNull()
            Me(Me.tableSIAudit.DateASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateSatNull() As Boolean
            Return Me.IsNull(Me.tableSIAudit.DateSatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateSatNull()
            Me(Me.tableSIAudit.DateSatColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RenewalQueueHistoryRow
        Inherits Global.System.Data.DataRow
        
        Private tableRenewalQueueHistory As RenewalQueueHistoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRenewalQueueHistory = CType(Me.Table,RenewalQueueHistoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableRenewalQueueHistory.IDColumn),Long)
            End Get
            Set
                Me(Me.tableRenewalQueueHistory.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QueueID() As Integer
            Get
                Return CType(Me(Me.tableRenewalQueueHistory.QueueIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRenewalQueueHistory.QueueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRan() As Date
            Get
                Return CType(Me(Me.tableRenewalQueueHistory.DateRanColumn),Date)
            End Get
            Set
                Me(Me.tableRenewalQueueHistory.DateRanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TheCount() As Integer
            Get
                Return CType(Me(Me.tableRenewalQueueHistory.TheCountColumn),Integer)
            End Get
            Set
                Me(Me.tableRenewalQueueHistory.TheCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QueueName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRenewalQueueHistory.QueueNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QueueName' in table 'RenewalQueueHistory' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalQueueHistory.QueueNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQueueNameNull() As Boolean
            Return Me.IsNull(Me.tableRenewalQueueHistory.QueueNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQueueNameNull()
            Me(Me.tableRenewalQueueHistory.QueueNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RenewalAssigneesRow
        Inherits Global.System.Data.DataRow
        
        Private tableRenewalAssignees As RenewalAssigneesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRenewalAssignees = CType(Me.Table,RenewalAssigneesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableRenewalAssignees.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableRenewalAssignees.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRenewalAssignees.custIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'custID' in table 'RenewalAssignees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalAssignees.custIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assignee() As String
            Get
                Try 
                    Return CType(Me(Me.tableRenewalAssignees.AssigneeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Assignee' in table 'RenewalAssignees' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRenewalAssignees.AssigneeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompanyRow() As CompanyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Company_RenewalAssignees")),CompanyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Company_RenewalAssignees"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustIDNull() As Boolean
            Return Me.IsNull(Me.tableRenewalAssignees.custIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustIDNull()
            Me(Me.tableRenewalAssignees.custIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssigneeNull() As Boolean
            Return Me.IsNull(Me.tableRenewalAssignees.AssigneeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssigneeNull()
            Me(Me.tableRenewalAssignees.AssigneeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CompanyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CompanyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CompanyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CompanyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rmServiceItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rmServiceItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rmServiceItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rmServiceItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rmUsersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rmUsersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rmUsersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rmUsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StatesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StatesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StatesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StatesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rmListServiceItemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rmListServiceItemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rmListServiceItemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rmListServiceItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientProjectItemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientProjectItemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientProjectItemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientProjectItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RenewalQueueRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RenewalQueueRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RenewalQueueRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RenewalQueueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RenewalFeesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RenewalFeesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RenewalFeesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RenewalFeesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SIAuditRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SIAuditRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SIAuditRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SIAuditRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RenewalQueueHistoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RenewalQueueHistoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RenewalQueueHistoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RenewalQueueHistoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RenewalAssigneesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RenewalAssigneesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RenewalAssigneesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RenewalAssigneesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CornerstoneSQLRenewalQueueTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CompanyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Company"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("custID", "custID")
            tableMapping.ColumnMappings.Add("bizname", "bizname")
            tableMapping.ColumnMappings.Add("dba", "dba")
            tableMapping.ColumnMappings.Add("primary-street", "primary-street")
            tableMapping.ColumnMappings.Add("primary-street2", "primary-street2")
            tableMapping.ColumnMappings.Add("primary-city", "primary-city")
            tableMapping.ColumnMappings.Add("primary-state", "primary-state")
            tableMapping.ColumnMappings.Add("primary-zip", "primary-zip")
            tableMapping.ColumnMappings.Add("primary-phone", "primary-phone")
            tableMapping.ColumnMappings.Add("primary-fax", "primary-fax")
            tableMapping.ColumnMappings.Add("primary-email", "primary-email")
            tableMapping.ColumnMappings.Add("primary-manager", "primary-manager")
            tableMapping.ColumnMappings.Add("primary-contact", "primary-contact")
            tableMapping.ColumnMappings.Add("biz-type", "biz-type")
            tableMapping.ColumnMappings.Add("Pres-name", "Pres-name")
            tableMapping.ColumnMappings.Add("notary1", "notary1")
            tableMapping.ColumnMappings.Add("notary2", "notary2")
            tableMapping.ColumnMappings.Add("notary3", "notary3")
            tableMapping.ColumnMappings.Add("duration-of-company", "duration-of-company")
            tableMapping.ColumnMappings.Add("percent-biz-retail", "percent-biz-retail")
            tableMapping.ColumnMappings.Add("percent-biz-commercial", "percent-biz-commercial")
            tableMapping.ColumnMappings.Add("stock-par-value", "stock-par-value")
            tableMapping.ColumnMappings.Add("states-to-license", "states-to-license")
            tableMapping.ColumnMappings.Add("800#", "800#")
            tableMapping.ColumnMappings.Add("county", "county")
            tableMapping.ColumnMappings.Add("stockclass", "stockclass")
            tableMapping.ColumnMappings.Add("stockseries", "stockseries")
            tableMapping.ColumnMappings.Add("stock#authorized", "stock#authorized")
            tableMapping.ColumnMappings.Add("stock#issued", "stock#issued")
            tableMapping.ColumnMappings.Add("AssignedTo", "AssignedTo")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("IsArchived", "IsArchived")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            tableMapping.ColumnMappings.Add("HasAuditProblem", "HasAuditProblem")
            tableMapping.ColumnMappings.Add("ReqPasswords", "ReqPasswords")
            tableMapping.ColumnMappings.Add("ReportsPath", "ReportsPath")
            tableMapping.ColumnMappings.Add("ArchivesPath", "ArchivesPath")
            tableMapping.ColumnMappings.Add("DemoDeadline", "DemoDeadline")
            tableMapping.ColumnMappings.Add("NumAllowed", "NumAllowed")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Company] ([ID], [bizname], [dba], [primary-street], [primary-s"& _ 
                "treet2], [primary-city], [primary-state], [primary-zip], [primary-phone], [prima"& _ 
                "ry-fax], [primary-email], [primary-manager], [primary-contact], [biz-type], [Pre"& _ 
                "s-name], [notary1], [notary2], [notary3], [duration-of-company], [percent-biz-re"& _ 
                "tail], [percent-biz-commercial], [stock-par-value], [states-to-license], [800#],"& _ 
                " [county], [stockclass], [stockseries], [stock#authorized], [stock#issued], [Ass"& _ 
                "ignedTo], [Status], [IsArchived], [DateCreated], [HasAuditProblem], [ReqPassword"& _ 
                "s], [ReportsPath], [ArchivesPath], [DemoDeadline], [NumAllowed]) VALUES (@ID, @b"& _ 
                "izname, @dba, @p1, @p4, @p7, @p10, @p13, @p16, @p19, @p22, @p25, @p28, @p31, @p3"& _ 
                "4, @notary1, @notary2, @notary3, @p37, @p40, @p43, @p46, @p49, @p52, @county, @s"& _ 
                "tockclass, @stockseries, @stock#authorized, @stock#issued, @AssignedTo, @Status,"& _ 
                " @IsArchived, @DateCreated, @HasAuditProblem, @ReqPasswords, @ReportsPath, @Arch"& _ 
                "ivesPath, @DemoDeadline, @NumAllowed);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, custID, bizname, dba, [primar"& _ 
                "y-street], [primary-street2], [primary-city], [primary-state], [primary-zip], [p"& _ 
                "rimary-phone], [primary-fax], [primary-email], [primary-manager], [primary-conta"& _ 
                "ct], [biz-type], [Pres-name], notary1, notary2, notary3, [duration-of-company], "& _ 
                "[percent-biz-retail], [percent-biz-commercial], [stock-par-value], [states-to-li"& _ 
                "cense], [800#], county, stockclass, stockseries, stock#authorized, stock#issued,"& _ 
                " AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem, ReqPasswords, Rep"& _ 
                "ortsPath, ArchivesPath, DemoDeadline, NumAllowed FROM Company WHERE (custID = SC"& _ 
                "OPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bizname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dba", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p19", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p22", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p25", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p28", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p31", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p34", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p37", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p40", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p43", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p46", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p49", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p52", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@county", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockclass", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockseries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#authorized", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#issued", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsArchived", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HasAuditProblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqPasswords", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportsPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArchivesPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DemoDeadline", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Company] SET [ID] = @ID, [bizname] = @bizname, [dba] = @dba, [prima"& _ 
                "ry-street] = @p1, [primary-street2] = @p4, [primary-city] = @p7, [primary-state]"& _ 
                " = @p10, [primary-zip] = @p13, [primary-phone] = @p16, [primary-fax] = @p19, [pr"& _ 
                "imary-email] = @p22, [primary-manager] = @p25, [primary-contact] = @p28, [biz-ty"& _ 
                "pe] = @p31, [Pres-name] = @p34, [notary1] = @notary1, [notary2] = @notary2, [not"& _ 
                "ary3] = @notary3, [duration-of-company] = @p37, [percent-biz-retail] = @p40, [pe"& _ 
                "rcent-biz-commercial] = @p43, [stock-par-value] = @p46, [states-to-license] = @p"& _ 
                "49, [800#] = @p52, [county] = @county, [stockclass] = @stockclass, [stockseries]"& _ 
                " = @stockseries, [stock#authorized] = @stock#authorized, [stock#issued] = @stock"& _ 
                "#issued, [AssignedTo] = @AssignedTo, [Status] = @Status, [IsArchived] = @IsArchi"& _ 
                "ved, [DateCreated] = @DateCreated, [HasAuditProblem] = @HasAuditProblem, [ReqPas"& _ 
                "swords] = @ReqPasswords, [ReportsPath] = @ReportsPath, [ArchivesPath] = @Archive"& _ 
                "sPath, [DemoDeadline] = @DemoDeadline, [NumAllowed] = @NumAllowed WHERE (((@IsNu"& _ 
                "ll_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ([custID] = @Original_"& _ 
                "custID) AND ((@IsNull_bizname = 1 AND [bizname] IS NULL) OR ([bizname] = @Origin"& _ 
                "al_bizname)) AND ((@IsNull_dba = 1 AND [dba] IS NULL) OR ([dba] = @Original_dba)"& _ 
                ") AND ((@p3 = 1 AND [primary-street] IS NULL) OR ([primary-street] = @p2)) AND ("& _ 
                "(@p6 = 1 AND [primary-street2] IS NULL) OR ([primary-street2] = @p5)) AND ((@p9 "& _ 
                "= 1 AND [primary-city] IS NULL) OR ([primary-city] = @p8)) AND ((@p12 = 1 AND [p"& _ 
                "rimary-state] IS NULL) OR ([primary-state] = @p11)) AND ((@p15 = 1 AND [primary-"& _ 
                "zip] IS NULL) OR ([primary-zip] = @p14)) AND ((@p18 = 1 AND [primary-phone] IS N"& _ 
                "ULL) OR ([primary-phone] = @p17)) AND ((@p21 = 1 AND [primary-fax] IS NULL) OR ("& _ 
                "[primary-fax] = @p20)) AND ((@p24 = 1 AND [primary-email] IS NULL) OR ([primary-"& _ 
                "email] = @p23)) AND ((@p27 = 1 AND [primary-manager] IS NULL) OR ([primary-manag"& _ 
                "er] = @p26)) AND ((@p30 = 1 AND [primary-contact] IS NULL) OR ([primary-contact]"& _ 
                " = @p29)) AND ((@p33 = 1 AND [biz-type] IS NULL) OR ([biz-type] = @p32)) AND ((@"& _ 
                "p36 = 1 AND [Pres-name] IS NULL) OR ([Pres-name] = @p35)) AND ((@IsNull_notary1 "& _ 
                "= 1 AND [notary1] IS NULL) OR ([notary1] = @Original_notary1)) AND ((@IsNull_not"& _ 
                "ary2 = 1 AND [notary2] IS NULL) OR ([notary2] = @Original_notary2)) AND ((@IsNul"& _ 
                "l_notary3 = 1 AND [notary3] IS NULL) OR ([notary3] = @Original_notary3)) AND ((@"& _ 
                "p39 = 1 AND [duration-of-company] IS NULL) OR ([duration-of-company] = @p38)) AN"& _ 
                "D ((@p42 = 1 AND [percent-biz-retail] IS NULL) OR ([percent-biz-retail] = @p41))"& _ 
                " AND ((@p45 = 1 AND [percent-biz-commercial] IS NULL) OR ([percent-biz-commercia"& _ 
                "l] = @p44)) AND ((@p48 = 1 AND [stock-par-value] IS NULL) OR ([stock-par-value] "& _ 
                "= @p47)) AND ((@p51 = 1 AND [states-to-license] IS NULL) OR ([states-to-license]"& _ 
                " = @p50)) AND ((@p54 = 1 AND [800#] IS NULL) OR ([800#] = @p53)) AND ((@IsNull_c"& _ 
                "ounty = 1 AND [county] IS NULL) OR ([county] = @Original_county)) AND ((@IsNull_"& _ 
                "stockclass = 1 AND [stockclass] IS NULL) OR ([stockclass] = @Original_stockclass"& _ 
                ")) AND ((@IsNull_stockseries = 1 AND [stockseries] IS NULL) OR ([stockseries] = "& _ 
                "@Original_stockseries)) AND ((@IsNull_stock#authorized = 1 AND [stock#authorized"& _ 
                "] IS NULL) OR ([stock#authorized] = @Original_stock#authorized)) AND ((@IsNull_s"& _ 
                "tock#issued = 1 AND [stock#issued] IS NULL) OR ([stock#issued] = @Original_stock"& _ 
                "#issued)) AND ((@IsNull_AssignedTo = 1 AND [AssignedTo] IS NULL) OR ([AssignedTo"& _ 
                "] = @Original_AssignedTo)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([S"& _ 
                "tatus] = @Original_Status)) AND ((@IsNull_IsArchived = 1 AND [IsArchived] IS NUL"& _ 
                "L) OR ([IsArchived] = @Original_IsArchived)) AND ((@IsNull_DateCreated = 1 AND ["& _ 
                "DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreated)) AND ((@IsNull_"& _ 
                "HasAuditProblem = 1 AND [HasAuditProblem] IS NULL) OR ([HasAuditProblem] = @Orig"& _ 
                "inal_HasAuditProblem)) AND ((@IsNull_ReqPasswords = 1 AND [ReqPasswords] IS NULL"& _ 
                ") OR ([ReqPasswords] = @Original_ReqPasswords)) AND ((@IsNull_ReportsPath = 1 AN"& _ 
                "D [ReportsPath] IS NULL) OR ([ReportsPath] = @Original_ReportsPath)) AND ((@IsNu"& _ 
                "ll_ArchivesPath = 1 AND [ArchivesPath] IS NULL) OR ([ArchivesPath] = @Original_A"& _ 
                "rchivesPath)) AND ((@IsNull_DemoDeadline = 1 AND [DemoDeadline] IS NULL) OR ([De"& _ 
                "moDeadline] = @Original_DemoDeadline)) AND ((@IsNull_NumAllowed = 1 AND [NumAllo"& _ 
                "wed] IS NULL) OR ([NumAllowed] = @Original_NumAllowed)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, custID, bi"& _ 
                "zname, dba, [primary-street], [primary-street2], [primary-city], [primary-state]"& _ 
                ", [primary-zip], [primary-phone], [primary-fax], [primary-email], [primary-manag"& _ 
                "er], [primary-contact], [biz-type], [Pres-name], notary1, notary2, notary3, [dur"& _ 
                "ation-of-company], [percent-biz-retail], [percent-biz-commercial], [stock-par-va"& _ 
                "lue], [states-to-license], [800#], county, stockclass, stockseries, stock#author"& _ 
                "ized, stock#issued, AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem"& _ 
                ", ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, NumAllowed FROM Company"& _ 
                " WHERE (custID = @custID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bizname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dba", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p13", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p16", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p19", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p22", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p25", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p28", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p31", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p34", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notary3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p37", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p40", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p43", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p46", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p49", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p52", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@county", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockclass", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockseries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#authorized", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stock#issued", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsArchived", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HasAuditProblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqPasswords", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReportsPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ArchivesPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DemoDeadline", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bizname", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bizname", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_dba", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dba", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dba", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-street2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-city", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-state", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p15", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p14", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-zip", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p18", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p17", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-phone", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p21", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p20", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-fax", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p24", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p23", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p27", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p26", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-manager", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p30", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p29", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "primary-contact", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p33", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p32", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "biz-type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p36", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p35", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pres-name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_notary3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_notary3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notary3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p39", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p38", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "duration-of-company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p42", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p41", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-retail", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p45", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p44", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "percent-biz-commercial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p48", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p47", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock-par-value", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p51", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p50", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "states-to-license", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p54", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p53", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "800#", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_county", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_county", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "county", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stockclass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stockclass", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockclass", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stockseries", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stockseries", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockseries", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stock#authorized", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stock#authorized", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#authorized", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stock#issued", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stock#issued", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stock#issued", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssignedTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssignedTo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsArchived", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsArchived", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsArchived", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HasAuditProblem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HasAuditProblem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HasAuditProblem", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqPasswords", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqPasswords", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqPasswords", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReportsPath", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReportsPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReportsPath", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ArchivesPath", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ArchivesPath", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ArchivesPath", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DemoDeadline", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DemoDeadline", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DemoDeadline", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumAllowed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumAllowed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, custID, bizname, dba, [primary-street], [primary-street2], [primary-ci" & _
                "ty], [primary-state], [primary-zip], [primary-phone], [primary-fax], [primary-em" & _
                "ail], [primary-manager], [primary-contact], [biz-type], [Pres-name], notary1, no" & _
                "tary2, notary3, [duration-of-company], [percent-biz-retail], [percent-biz-commer" & _
                "cial], [stock-par-value], [states-to-license], [800#], county, stockclass, stock" & _
                "series, stock#authorized, stock#issued, AssignedTo, Status, IsArchived, DateCrea" & _
                "ted, HasAuditProblem, ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, Num" & _
                "Allowed FROM dbo.Company"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ' ALL' as Status, 0 as custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT     Status, custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM     " & _
                "    Company" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (HasAuditProblem = 1)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Status"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     ' ALL' AS Status, 0 AS custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT DISTINCT Company.Status, " & _
                "Company.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         Company INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmService" & _
                "Item ON Company.custID = rmServiceItem.CustID INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      " & _
                "rmListServiceItems ON rmServiceItem.Name = rmListServiceItems.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (r" & _
                "mServiceItem.Satisfied = 0) AND (rmListServiceItems.IsRenewalItem = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY" & _
                " Status"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.CompanyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.CompanyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.CompanyDataTable = New CornerstoneSQLRenewalQueue.CompanyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByStatus(ByVal dataTable As CornerstoneSQLRenewalQueue.CompanyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillOLagencies(ByVal dataTable As CornerstoneSQLRenewalQueue.CompanyDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.CompanyDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "Company")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Integer), _
                    ByVal bizname As String, _
                    ByVal dba As String, _
                    ByVal p1 As String, _
                    ByVal p4 As String, _
                    ByVal p7 As String, _
                    ByVal p10 As String, _
                    ByVal p13 As String, _
                    ByVal p16 As String, _
                    ByVal p19 As String, _
                    ByVal p22 As String, _
                    ByVal p25 As String, _
                    ByVal p28 As String, _
                    ByVal p31 As String, _
                    ByVal p34 As String, _
                    ByVal notary1 As String, _
                    ByVal notary2 As String, _
                    ByVal notary3 As String, _
                    ByVal p37 As String, _
                    ByVal p40 As Global.System.Nullable(Of Integer), _
                    ByVal p43 As Global.System.Nullable(Of Integer), _
                    ByVal p46 As String, _
                    ByVal p49 As String, _
                    ByVal p52 As String, _
                    ByVal county As String, _
                    ByVal stockclass As String, _
                    ByVal stockseries As String, _
                    ByVal _stock_authorized As String, _
                    ByVal _stock_issued As String, _
                    ByVal AssignedTo As String, _
                    ByVal Status As String, _
                    ByVal IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal ReportsPath As String, _
                    ByVal ArchivesPath As String, _
                    ByVal DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal NumAllowed As Global.System.Nullable(Of Integer)) As Integer
            If (ID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (bizname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(bizname, String)
            End If
            If (dba Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(dba, String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p1, String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p4, String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p7, String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p10, String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p13, String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p16, String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p19, String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p22, String)
            End If
            If (p25 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p25, String)
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p28, String)
            End If
            If (p31 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p31, String)
            End If
            If (p34 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p34, String)
            End If
            If (notary1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(notary1, String)
            End If
            If (notary2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(notary2, String)
            End If
            If (notary3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(notary3, String)
            End If
            If (p37 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p37, String)
            End If
            If (p40.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p40.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p43.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p43.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p46 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p46, String)
            End If
            If (p49 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p49, String)
            End If
            If (p52 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p52, String)
            End If
            If (county Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(county, String)
            End If
            If (stockclass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(stockclass, String)
            End If
            If (stockseries Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(stockseries, String)
            End If
            If (_stock_authorized Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(_stock_authorized, String)
            End If
            If (_stock_issued Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(_stock_issued, String)
            End If
            If (AssignedTo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(AssignedTo, String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Status, String)
            End If
            If (IsArchived.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(IsArchived.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(DateCreated.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (HasAuditProblem.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(HasAuditProblem.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ReqPasswords.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(ReqPasswords.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ReportsPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(ReportsPath, String)
            End If
            If (ArchivesPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(ArchivesPath, String)
            End If
            If (DemoDeadline.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(DemoDeadline.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (NumAllowed.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(NumAllowed.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal ID As Global.System.Nullable(Of Integer), _
                    ByVal bizname As String, _
                    ByVal dba As String, _
                    ByVal p1 As String, _
                    ByVal p4 As String, _
                    ByVal p7 As String, _
                    ByVal p10 As String, _
                    ByVal p13 As String, _
                    ByVal p16 As String, _
                    ByVal p19 As String, _
                    ByVal p22 As String, _
                    ByVal p25 As String, _
                    ByVal p28 As String, _
                    ByVal p31 As String, _
                    ByVal p34 As String, _
                    ByVal notary1 As String, _
                    ByVal notary2 As String, _
                    ByVal notary3 As String, _
                    ByVal p37 As String, _
                    ByVal p40 As Global.System.Nullable(Of Integer), _
                    ByVal p43 As Global.System.Nullable(Of Integer), _
                    ByVal p46 As String, _
                    ByVal p49 As String, _
                    ByVal p52 As String, _
                    ByVal county As String, _
                    ByVal stockclass As String, _
                    ByVal stockseries As String, _
                    ByVal _stock_authorized As String, _
                    ByVal _stock_issued As String, _
                    ByVal AssignedTo As String, _
                    ByVal Status As String, _
                    ByVal IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal ReportsPath As String, _
                    ByVal ArchivesPath As String, _
                    ByVal DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal NumAllowed As Global.System.Nullable(Of Integer), _
                    ByVal Original_ID As Global.System.Nullable(Of Integer), _
                    ByVal Original_custID As Integer, _
                    ByVal Original_bizname As String, _
                    ByVal Original_dba As String, _
                    ByVal p2 As String, _
                    ByVal p5 As String, _
                    ByVal p8 As String, _
                    ByVal p11 As String, _
                    ByVal p14 As String, _
                    ByVal p17 As String, _
                    ByVal p20 As String, _
                    ByVal p23 As String, _
                    ByVal p26 As String, _
                    ByVal p29 As String, _
                    ByVal p32 As String, _
                    ByVal p35 As String, _
                    ByVal Original_notary1 As String, _
                    ByVal Original_notary2 As String, _
                    ByVal Original_notary3 As String, _
                    ByVal p38 As String, _
                    ByVal p41 As Global.System.Nullable(Of Integer), _
                    ByVal p44 As Global.System.Nullable(Of Integer), _
                    ByVal p47 As String, _
                    ByVal p50 As String, _
                    ByVal p53 As String, _
                    ByVal Original_county As String, _
                    ByVal Original_stockclass As String, _
                    ByVal Original_stockseries As String, _
                    ByVal _Original_stock_authorized As String, _
                    ByVal _Original_stock_issued As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_Status As String, _
                    ByVal Original_IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReportsPath As String, _
                    ByVal Original_ArchivesPath As String, _
                    ByVal Original_DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal Original_NumAllowed As Global.System.Nullable(Of Integer), _
                    ByVal custID As Integer) As Integer
            If (ID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (bizname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(bizname, String)
            End If
            If (dba Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(dba, String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p1, String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p4, String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p7, String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p10, String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p13, String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p16, String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p19, String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p22, String)
            End If
            If (p25 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p25, String)
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p28, String)
            End If
            If (p31 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p31, String)
            End If
            If (p34 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p34, String)
            End If
            If (notary1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(notary1, String)
            End If
            If (notary2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(notary2, String)
            End If
            If (notary3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(notary3, String)
            End If
            If (p37 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p37, String)
            End If
            If (p40.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p40.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p43.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p43.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p46 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p46, String)
            End If
            If (p49 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p49, String)
            End If
            If (p52 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p52, String)
            End If
            If (county Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(county, String)
            End If
            If (stockclass Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(stockclass, String)
            End If
            If (stockseries Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(stockseries, String)
            End If
            If (_stock_authorized Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(_stock_authorized, String)
            End If
            If (_stock_issued Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(_stock_issued, String)
            End If
            If (AssignedTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(AssignedTo, String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Status, String)
            End If
            If (IsArchived.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(IsArchived.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (DateCreated.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(DateCreated.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (HasAuditProblem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(HasAuditProblem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ReqPasswords.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(ReqPasswords.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ReportsPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(ReportsPath, String)
            End If
            If (ArchivesPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(ArchivesPath, String)
            End If
            If (DemoDeadline.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(DemoDeadline.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (NumAllowed.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(NumAllowed.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_ID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_ID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_custID, Integer)
            If (Original_bizname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_bizname, String)
            End If
            If (Original_dba Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_dba, String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(p2, String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(p5, String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(p8, String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(p11, String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(p14, String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(p17, String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(p20, String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(p23, String)
            End If
            If (p26 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(p26, String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(p29, String)
            End If
            If (p32 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(p32, String)
            End If
            If (p35 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(p35, String)
            End If
            If (Original_notary1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_notary1, String)
            End If
            If (Original_notary2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_notary2, String)
            End If
            If (Original_notary3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_notary3, String)
            End If
            If (p38 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(p38, String)
            End If
            If (p41.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(p41.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (p44.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(p44.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (p47 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(p47, String)
            End If
            If (p50 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(p50, String)
            End If
            If (p53 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(p53, String)
            End If
            If (Original_county Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_county, String)
            End If
            If (Original_stockclass Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_stockclass, String)
            End If
            If (Original_stockseries Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_stockseries, String)
            End If
            If (_Original_stock_authorized Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(_Original_stock_authorized, String)
            End If
            If (_Original_stock_issued Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(_Original_stock_issued, String)
            End If
            If (Original_AssignedTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_AssignedTo, String)
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_Status, String)
            End If
            If (Original_IsArchived.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_IsArchived.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_DateCreated.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_DateCreated.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_HasAuditProblem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_HasAuditProblem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_ReqPasswords.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_ReqPasswords.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            If (Original_ReportsPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_ReportsPath, String)
            End If
            If (Original_ArchivesPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_ArchivesPath, String)
            End If
            If (Original_DemoDeadline.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_DemoDeadline.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_NumAllowed.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_NumAllowed.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(118).Value = CType(custID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal ID As Global.System.Nullable(Of Integer), _
                    ByVal bizname As String, _
                    ByVal dba As String, _
                    ByVal p1 As String, _
                    ByVal p4 As String, _
                    ByVal p7 As String, _
                    ByVal p10 As String, _
                    ByVal p13 As String, _
                    ByVal p16 As String, _
                    ByVal p19 As String, _
                    ByVal p22 As String, _
                    ByVal p25 As String, _
                    ByVal p28 As String, _
                    ByVal p31 As String, _
                    ByVal p34 As String, _
                    ByVal notary1 As String, _
                    ByVal notary2 As String, _
                    ByVal notary3 As String, _
                    ByVal p37 As String, _
                    ByVal p40 As Global.System.Nullable(Of Integer), _
                    ByVal p43 As Global.System.Nullable(Of Integer), _
                    ByVal p46 As String, _
                    ByVal p49 As String, _
                    ByVal p52 As String, _
                    ByVal county As String, _
                    ByVal stockclass As String, _
                    ByVal stockseries As String, _
                    ByVal _stock_authorized As String, _
                    ByVal _stock_issued As String, _
                    ByVal AssignedTo As String, _
                    ByVal Status As String, _
                    ByVal IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal ReportsPath As String, _
                    ByVal ArchivesPath As String, _
                    ByVal DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal NumAllowed As Global.System.Nullable(Of Integer), _
                    ByVal Original_ID As Global.System.Nullable(Of Integer), _
                    ByVal Original_custID As Integer, _
                    ByVal Original_bizname As String, _
                    ByVal Original_dba As String, _
                    ByVal p2 As String, _
                    ByVal p5 As String, _
                    ByVal p8 As String, _
                    ByVal p11 As String, _
                    ByVal p14 As String, _
                    ByVal p17 As String, _
                    ByVal p20 As String, _
                    ByVal p23 As String, _
                    ByVal p26 As String, _
                    ByVal p29 As String, _
                    ByVal p32 As String, _
                    ByVal p35 As String, _
                    ByVal Original_notary1 As String, _
                    ByVal Original_notary2 As String, _
                    ByVal Original_notary3 As String, _
                    ByVal p38 As String, _
                    ByVal p41 As Global.System.Nullable(Of Integer), _
                    ByVal p44 As Global.System.Nullable(Of Integer), _
                    ByVal p47 As String, _
                    ByVal p50 As String, _
                    ByVal p53 As String, _
                    ByVal Original_county As String, _
                    ByVal Original_stockclass As String, _
                    ByVal Original_stockseries As String, _
                    ByVal _Original_stock_authorized As String, _
                    ByVal _Original_stock_issued As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_Status As String, _
                    ByVal Original_IsArchived As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_HasAuditProblem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReqPasswords As Global.System.Nullable(Of Boolean), _
                    ByVal Original_ReportsPath As String, _
                    ByVal Original_ArchivesPath As String, _
                    ByVal Original_DemoDeadline As Global.System.Nullable(Of Date), _
                    ByVal Original_NumAllowed As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(ID, bizname, dba, p1, p4, p7, p10, p13, p16, p19, p22, p25, p28, p31, p34, notary1, notary2, notary3, p37, p40, p43, p46, p49, p52, county, stockclass, stockseries, _stock_authorized, _stock_issued, AssignedTo, Status, IsArchived, DateCreated, HasAuditProblem, ReqPasswords, ReportsPath, ArchivesPath, DemoDeadline, NumAllowed, Original_ID, Original_custID, Original_bizname, Original_dba, p2, p5, p8, p11, p14, p17, p20, p23, p26, p29, p32, p35, Original_notary1, Original_notary2, Original_notary3, p38, p41, p44, p47, p50, p53, Original_county, Original_stockclass, Original_stockseries, _Original_stock_authorized, _Original_stock_issued, Original_AssignedTo, Original_Status, Original_IsArchived, Original_DateCreated, Original_HasAuditProblem, Original_ReqPasswords, Original_ReportsPath, Original_ArchivesPath, Original_DemoDeadline, Original_NumAllowed, Original_custID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class rmServiceItemTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rmServiceItem"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            tableMapping.ColumnMappings.Add("CustID", "CustID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Desc", "Desc")
            tableMapping.ColumnMappings.Add("DateBegin", "DateBegin")
            tableMapping.ColumnMappings.Add("DateEnd", "DateEnd")
            tableMapping.ColumnMappings.Add("DateRemind", "DateRemind")
            tableMapping.ColumnMappings.Add("Satisfied", "Satisfied")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Applies", "Applies")
            tableMapping.ColumnMappings.Add("DateRenewal", "DateRenewal")
            tableMapping.ColumnMappings.Add("DateExpiration", "DateExpiration")
            tableMapping.ColumnMappings.Add("CurrentStatus", "CurrentStatus")
            tableMapping.ColumnMappings.Add("CurrentProcess", "CurrentProcess")
            tableMapping.ColumnMappings.Add("IsBondItem", "IsBondItem")
            tableMapping.ColumnMappings.Add("BondNumber", "BondNumber")
            tableMapping.ColumnMappings.Add("BondState", "BondState")
            tableMapping.ColumnMappings.Add("BondAmount", "BondAmount")
            tableMapping.ColumnMappings.Add("BondAgencyName", "BondAgencyName")
            tableMapping.ColumnMappings.Add("AssignedTo", "AssignedTo")
            tableMapping.ColumnMappings.Add("AtClient", "AtClient")
            tableMapping.ColumnMappings.Add("AtState", "AtState")
            tableMapping.ColumnMappings.Add("TenDaySent", "TenDaySent")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("AtCornerstone", "AtCornerstone")
            tableMapping.ColumnMappings.Add("bizname", "bizname")
            tableMapping.ColumnMappings.Add("IsRenewalItem", "IsRenewalItem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              DateRemind = @DateRemind, Satisfied = @" & _
                "Satisfied, DateExpiration = @DateExpiration, AtClient = @AtClient, AtState = @At" & _
                "State, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      TenDaySent = @TenDaySent, AtCornerstone = @AtCorn" & _
                "erstone" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (ID = @Original_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRemind", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Satisfied", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpiration", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtClient", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtState", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TenDaySent", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtCornerstone", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "AtCornerstone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(29) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        rmServiceItem.ID, rmServiceItem.DateCreated, rmServiceItem.CustID, " & _
                "rmServiceItem.Name, rmServiceItem.[Desc], rmServiceItem.DateBegin, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "           " & _
                "              rmServiceItem.DateEnd, rmServiceItem.DateRemind, rmServiceItem.Sat" & _
                "isfied, rmServiceItem.Cost, rmServiceItem.Applies, rmServiceItem.DateRenewal, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "                         rmServiceItem.DateExpiration, rmServiceItem.CurrentStat" & _
                "us, rmServiceItem.CurrentProcess, rmServiceItem.IsBondItem, rmServiceItem.BondNu" & _
                "mber, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         rmServiceItem.BondState, rmServiceItem.BondAmou" & _
                "nt, rmServiceItem.BondAgencyName, rmServiceItem.AssignedTo, rmServiceItem.AtClie" & _
                "nt, rmServiceItem.AtState, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         rmServiceItem.TenDaySent, " & _
                "rmServiceItem.AtCornerstone, Company.Status, Company.bizname, rmServiceItem.IsRe" & _
                "newalItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Co" & _
                "mpany ON rmServiceItem.ID = Company.ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE    rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              [Desc] = 'l'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (ID = @TheServi" & _
                "ceID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheServiceID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE    rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              [Desc] = 'Vanessa reviewed recent appro" & _
                "val'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (ID = @TheServiceID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheServiceID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     rmServiceItem.ID, rmServiceItem.CustID, rmServiceItem.Name, rmServiceI" & _
                "tem.DateRemind, rmServiceItem.Satisfied, rmServiceItem.DateRenewal, rmServiceIte" & _
                "m.DateExpiration, rmServiceItem.AssignedTo, rmServiceItem.AtClient, rmServiceIte" & _
                "m.AtState, rmServiceItem.TenDaySent, Company.Status" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem " & _
                "INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServiceItem.CustID = Company.cust" & _
                "ID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (Company.custID = @CustID) AND rmServiceItem.Satisfied = 0 AND c" & _
                "ompany.hasauditproblem = 1 AND Company.IsArchived = 0 AND rmServiceItem.isRenewa" & _
                "lItem = 1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER By Company.Status"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     rmServiceItem.ID, rmServiceItem.CustID, rmServiceItem.Name, rmServiceI" & _
                "tem.DateRemind, rmServiceItem.Satisfied, rmServiceItem.DateRenewal, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "          " & _
                "            rmServiceItem.DateExpiration, rmServiceItem.AssignedTo, rmServiceIte" & _
                "m.AtClient, rmServiceItem.AtCornerstone, rmServiceItem.AtState, rmServiceItem.Te" & _
                "nDaySent, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company.Status" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem INN" & _
                "ER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServiceItem.CustID = Company.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmServiceItem.AssignedTo LIKE @theAssignee) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (rmServiceItem.Dat" & _
                "eExpiration < @Deadline)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (rmServiceItem.Name LIKE @ServiceName) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND  (Com" & _
                "pany.Status LIKE @TheAgency) AND (rmServiceItem.Satisfied = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND  (Company.Ha" & _
                "sAuditProblem = 1) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (Company.IsArchived = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND rmServiceItem.IsRenewalIt" & _
                "em = 1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Company.Status"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deadline", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ServiceName", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheAgency", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     rmServiceItem.ID, rmServiceItem.CustID, rmServiceItem.Name, rmServiceI" & _
                "tem.DateRemind, rmServiceItem.Satisfied, rmServiceItem.DateRenewal, rmServiceIte" & _
                "m.DateExpiration, rmServiceItem.AssignedTo, rmServiceItem.AtClient, rmServiceIte" & _
                "m.AtState, rmServiceItem.TenDaySent, rmServiceItem.AtCornerstone," & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Company.Statu" & _
                "s" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmSer" & _
                "viceItem.CustID = Company.custID " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmServiceItem.DateExpiration < @De" & _
                "adline) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (rmServiceItem.Name LIKE @ServiceName) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (Company.Status LIKE " & _
                "@TheAgency) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND rmServiceItem.IsRenewalItem = 1 " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (rmServiceItem.Satisfied" & _
                " = 0) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (Company.HasAuditProblem = 1) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (Company.IsArchived = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER " & _
                "BY Company.Status"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deadline", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ServiceName", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheAgency", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT    rmServiceItem.ID, rmServiceItem.CustID, rmServiceItem.Name, rmServiceIt" & _
                "em.DateRemind, rmServiceItem.Satisfied, rmServiceItem.DateRenewal, rmServiceItem" & _
                ".DateExpiration, rmServiceItem.AssignedTo, rmServiceItem.AtClient, rmServiceItem" & _
                ".AtState, rmServiceItem.TenDaySent, Company.Status" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem I" & _
                "NNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServiceItem.CustID = Company.custI" & _
                "D" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmServiceItem.AssignedTo = @theAssignee) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND rmServiceItem.IsRen" & _
                "ewalItem = 1 " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND rmServiceItem.Satisfied = 0 " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND Company.HasAuditProblem = 1" & _
                " " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND Company.IsArchived = 0" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER By Company.Status"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     rmServiceItem.CustID, rmServiceItem.Name, rmServiceItem.DateRemind, rm" & _
                "ServiceItem.Satisfied," & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmServiceItem.DateRenewal, rmServi" & _
                "ceItem.DateExpiration, rmServiceItem.AssignedTo, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmServi" & _
                "ceItem.AtClient, rmServiceItem.AtState, rmServiceItem.TenDaySent, Company.Status" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServ" & _
                "iceItem.CustID = Company.custID " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmServiceItem.DateExpiration < @Dea" & _
                "dline) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND rmServiceItem.IsRenewalItem = 1 " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND (rmServiceItem.Satisfied = 0)" & _
                " " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND Company.HasAuditProblem = 1 " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND Company.IsArchived = 0" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Compan" & _
                "y.Status" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deadline", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT     rmServiceItem.CustID, rmServiceItem.Name, rmServiceItem.DateRemind, rm" & _
                "ServiceItem.Satisfied, rmServiceItem.DateRenewal, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmServ" & _
                "iceItem.DateExpiration, rmServiceItem.AssignedTo, rmServiceItem.AtClient, rmServ" & _
                "iceItem.AtState, rmServiceItem.TenDaySent, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company.Statu" & _
                "s" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmSer" & _
                "viceItem.CustID = Company.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmServiceItem.Name = @TheServiceIte" & _
                "mName) AND rmServiceItem.IsRenewalItem = 1 AND (Company.IsArchived = 0)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheServiceItemName", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT     DISTINCT rmServiceItem.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IsRene" & _
                "walItem = 1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER By rmServiceItem.Name"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT DISTINCT rmServiceItem.AssignedTo" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (" & _
                "rmServiceItem.Satisfied = 0) AND rmServiceItem.IsRenewalItem = 0"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT     IDENT_CURRENT('rmServiceItem') AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem"
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "dbo.GetNumAC"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(13) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(13).Connection = Me.Connection
            Me._commandCollection(13).CommandText = "dbo.GetNumAS"
            Me._commandCollection(13).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(14) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(14).Connection = Me.Connection
            Me._commandCollection(14).CommandText = "dbo.GetNumofAtClientsByAssignee"
            Me._commandCollection(14).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(15) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(15).Connection = Me.Connection
            Me._commandCollection(15).CommandText = "dbo.GetNumOfAtCornerstoneByAssignee"
            Me._commandCollection(15).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(16) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(16).Connection = Me.Connection
            Me._commandCollection(16).CommandText = "dbo.GetnumOfAtStateByAssignee"
            Me._commandCollection(16).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(17) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(17).Connection = Me.Connection
            Me._commandCollection(17).CommandText = "SELECT        COUNT(*) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "      " & _
                "                   rmListServiceItems ON rmServiceItem.Name = rmListServiceItems" & _
                ".Name INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Company ON rmServiceItem.CustID = Com" & _
                "pany.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (rmListServiceItems.IsRenewalItem = 1) AND (rmServiceI" & _
                "tem.Satisfied = 0) AND (rmServiceItem.Name LIKE '%License%') AND (Company.IsArch" & _
                "ived = 0)"
            Me._commandCollection(17).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(18) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(18).Connection = Me.Connection
            Me._commandCollection(18).CommandText = "SELECT        COUNT(*) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "      " & _
                "                   rmListServiceItems ON rmServiceItem.Name = rmListServiceItems" & _
                ".Name INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Company ON rmServiceItem.CustID = Com" & _
                "pany.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (rmListServiceItems.IsRenewalItem = 1) AND (rmServiceI" & _
                "tem.Satisfied = 0) AND (rmServiceItem.Name NOT LIKE '%License%') AND (Company.Is" & _
                "Archived = 0)"
            Me._commandCollection(18).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(19) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(19).Connection = Me.Connection
            Me._commandCollection(19).CommandText = "SELECT     COUNT(*) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "            " & _
                "          Company ON rmServiceItem.CustID = Company.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmService" & _
                "Item.AssignedTo = @theAssignee) AND rmServiceItem.IsRenewalItem = 1 AND (rmServi" & _
                "ceItem.Satisfied = 0) AND " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      (Company.HasAuditProblem = 1) " & _
                "AND (Company.IsArchived = 0) AND (rmServiceItem.DateExpiration IS NULL)"
            Me._commandCollection(19).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(19).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(20) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(20).Connection = Me.Connection
            Me._commandCollection(20).CommandText = "SELECT     COUNT(*) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE   rmServiceItem.I" & _
                "sRenewalItem = 1 AND (rmServiceItem.Satisfied = 0) AND (rmServiceItem.Name LIKE " & _
                "'%License%') AND rmServiceItem.custID = @theCustID"
            Me._commandCollection(20).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(20).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(21) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(21).Connection = Me.Connection
            Me._commandCollection(21).CommandText = "SELECT     COUNT(*) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE    rmServiceItem." & _
                "IsRenewalItem = 1 AND (rmServiceItem.Satisfied = 0) AND (rmServiceItem.Name NOT " & _
                "LIKE '%License%') AND rmServiceItem.custID = @theCustID"
            Me._commandCollection(21).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(21).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(22) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(22).Connection = Me.Connection
            Me._commandCollection(22).CommandText = "dbo.GetNumUC"
            Me._commandCollection(22).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(22).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(22).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(23) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(23).Connection = Me.Connection
            Me._commandCollection(23).CommandText = "SELECT DISTINCT Company.custID, Company.Status,Company.bizname" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmSe" & _
                "rviceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServiceItem.CustID = Co" & _
                "mpany.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE    rmServiceItem.IsRenewalItem = 1 AND (rmServiceItem.Satisf" & _
                "ied = 0) AND (Company.HasAuditProblem = 1) AND (Company.IsArchived = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER B" & _
                "Y Company.Status"
            Me._commandCollection(23).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(24) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(24).Connection = Me.Connection
            Me._commandCollection(24).CommandText = "SELECT     COUNT(*) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem INNER JOIN Company on rm" & _
                "SErviceItem.custID = Company.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE    rmServiceItem.IsRenewalItem = 1 AN" & _
                "D (rmServiceItem.Satisfied = 0)   AND Company.isArchived = 0" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " AND Company.bizna" & _
                "me = @theBizName"
            Me._commandCollection(24).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(24).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theBizName", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "bizname", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(25) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(25).Connection = Me.Connection
            Me._commandCollection(25).CommandText = "SELECT     rmServiceItem.ID, rmServiceItem.CustID, rmServiceItem.Name, rmServiceI" & _
                "tem.DateRemind, rmServiceItem.Satisfied, rmServiceItem.DateRenewal, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "          " & _
                "            rmServiceItem.DateExpiration, rmServiceItem.AssignedTo, rmServiceIte" & _
                "m.AtClient, rmServiceItem.AtState, rmServiceItem.TenDaySent, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                 " & _
                "     Company.Status, rmServiceItem.DateBegin, rmServiceItem.AtCornerstone" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM " & _
                "        rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServiceItem" & _
                ".CustID = Company.custID " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmServiceItem.Name LIKE @ServiceName) AND " & _
                "(Company.Status LIKE @TheAgency) AND rmServiceItem.IsRenewalItem <> 1 AND " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "    " & _
                "                  (rmServiceItem.Satisfied <> 1)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Company.Status, rmSer" & _
                "viceItem.Name"
            Me._commandCollection(25).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(25).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ServiceName", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(25).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheAgency", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(26) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(26).Connection = Me.Connection
            Me._commandCollection(26).CommandText = "SELECT     rmServiceItem.ID, rmServiceItem.CustID, rmServiceItem.Name, rmServiceI" & _
                "tem.DateRemind, rmServiceItem.Satisfied, rmServiceItem.DateRenewal, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "          " & _
                "            rmServiceItem.DateExpiration, rmServiceItem.AssignedTo, rmServiceIte" & _
                "m.AtClient, rmServiceItem.AtState, rmServiceItem.TenDaySent, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                 " & _
                "     Company.Status, rmServiceItem.DateBegin, rmServiceItem.AtCornerstone" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM " & _
                "        rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServiceItem" & _
                ".CustID = Company.custID " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmServiceItem.AssignedTo LIKE @theAssignee" & _
                ") AND (rmServiceItem.Name LIKE @ServiceName) AND (Company.Status LIKE @TheAgency" & _
                ") AND " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      (rmServiceItem.Satisfied = 0) AND rmServiceItem.Is" & _
                "RenewalItem = 0" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Company.Status, rmServiceItem.Name"
            Me._commandCollection(26).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(26).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(26).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ServiceName", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(26).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheAgency", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(27) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(27).Connection = Me.Connection
            Me._commandCollection(27).CommandText = "UPDATE    rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              [Desc] = 'Reviewed Customer Call'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHER" & _
                "E     (ID = @TheServiceID)"
            Me._commandCollection(27).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(27).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheServiceID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._commandCollection(28) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(28).Connection = Me.Connection
            Me._commandCollection(28).CommandText = "UPDATE    rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              [Desc] = 'Reviewed Stalled For Three Mo" & _
                "nths'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (ID = @TheServiceID)"
            Me._commandCollection(28).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(28).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheServiceID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._commandCollection(29) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(29).Connection = Me.Connection
            Me._commandCollection(29).CommandText = "SELECT        COUNT(DISTINCT Company.bizname) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            rmService" & _
                "Item INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Company ON rmServiceItem.CustID = Comp" & _
                "any.custID " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE       rmServiceItem.IsRenewalItem = 1 AND (rmServiceItem.Sati" & _
                "sfied = 0) AND (Company.HasAuditProblem = 1) AND (Company.IsArchived = 0)"
            Me._commandCollection(29).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByAgency(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal CustID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CustID, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByAgencyAssigneeSname(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal theAssignee As String, ByVal Deadline As Global.System.Nullable(Of Date), ByVal ServiceName As String, ByVal TheAgency As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (theAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theAssignee, String)
            End If
            If (Deadline.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Deadline.Value, Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TheAgency, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy3(ByVal theAssignee As String, ByVal Deadline As Global.System.Nullable(Of Date), ByVal ServiceName As String, ByVal TheAgency As String) As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (theAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theAssignee, String)
            End If
            If (Deadline.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Deadline.Value, Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TheAgency, String)
            End If
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByAllbutassignee(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal Deadline As Global.System.Nullable(Of Date), ByVal ServiceName As String, ByVal TheAgency As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (Deadline.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Deadline.Value, Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(TheAgency, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy4(ByVal Deadline As Global.System.Nullable(Of Date), ByVal ServiceName As String, ByVal TheAgency As String) As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (Deadline.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Deadline.Value, Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(TheAgency, String)
            End If
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByAssignee(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal theAssignee As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (theAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theAssignee, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy41(ByVal theAssignee As String) As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (theAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theAssignee, String)
            End If
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByDeadline(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal Deadline As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (Deadline.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Deadline.Value, Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillBySI(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal TheServiceItemName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (TheServiceItemName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TheServiceItemName, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillSI(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy31() As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function GetDistinctOLUsers(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function GetRenewalCompanyIDStatus(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(23)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetRenewalCompanyIDStatusDataTable() As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(23)
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function OLFillBySname(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal ServiceName As String, ByVal TheAgency As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(25)
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TheAgency, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy101(ByVal ServiceName As String, ByVal TheAgency As String) As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(25)
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TheAgency, String)
            End If
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function OLFillUseAssignee(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable, ByVal theAssignee As String, ByVal ServiceName As String, ByVal TheAgency As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(26)
            If (theAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theAssignee, String)
            End If
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(TheAgency, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy111(ByVal theAssignee As String, ByVal ServiceName As String, ByVal TheAgency As String) As CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(26)
            If (theAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theAssignee, String)
            End If
            If (ServiceName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ServiceName, String)
            End If
            If (TheAgency Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(TheAgency, String)
            End If
            Dim dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable = New CornerstoneSQLRenewalQueue.rmServiceItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.rmServiceItemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "rmServiceItem")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function AddBlankReviewedToDesc(ByVal TheServiceID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(TheServiceID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function AddVanessaReviewedToDesc(ByVal TheServiceID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(TheServiceID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetLastID() As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(11)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue, Decimal))
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumAC(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(12)
            If (theAssignee Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumAS(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(13)
            If (theAssignee Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumofAtClientsByAssignee(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(14)
            If (theAssignee Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumOfAtCornerstoneByAssignee(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(15)
            If (theAssignee Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetnumOfAtStateByAssignee(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(16)
            If (theAssignee Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetnumOfRenewalItemsAreLicense() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(17)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue, Integer))
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumOfRenewalItemsNotLicenses() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(18)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue, Integer))
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumRenewalItemsByAssigneeNoExpDate(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(19)
            If (theAssignee Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumRenItemsByCompanyLicItems(ByVal theCustID As Global.System.Nullable(Of Integer)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(20)
            If (theCustID.HasValue = True) Then
                command.Parameters(0).Value = CType(theCustID.Value, Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumRenItemsByCompanyNotLicItems(ByVal theCustID As Global.System.Nullable(Of Integer)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(21)
            If (theCustID.HasValue = True) Then
                command.Parameters(0).Value = CType(theCustID.Value, Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetNumUC(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(22)
            If (theAssignee Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetTotalNumberofRenewalItemsForCompany(ByVal theBizName As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(24)
            If (theBizName Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(theBizName, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function ReviewedCustomerCall(ByVal TheServiceID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(27)
            command.Parameters(0).Value = CType(TheServiceID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function ReviewedStalledForThreeMonths(ByVal TheServiceID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(28)
            command.Parameters(0).Value = CType(TheServiceID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function ScalarQuery() As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(29)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class rmUsersTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rmUsers"
            tableMapping.ColumnMappings.Add("Name", "Name")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ' ALL' as Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT DISTINCT rmUsers.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmUsers " & _
                "INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmServiceItem ON rmUsers.Name = rmServiceItem." & _
                "AssignedTo INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmListServiceItems ON rmListService" & _
                "Items.Name = rmServiceItem.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmListServiceItems.IsRenewalItem = 1" & _
                ") AND (rmServiceItem.Satisfied = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ' ALL' as Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT DISTINCT rmUsers.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmUsers " & _
                "INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmServiceItem ON rmUsers.Name = rmServiceItem." & _
                "AssignedTo INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmListServiceItems ON rmListService" & _
                "Items.Name = rmServiceItem.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmListServiceItems.IsRenewalItem = 0" & _
                ") AND (rmServiceItem.Satisfied = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET AssignedTo = @User2" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE AssignedTo LIKE @User1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User2", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User1", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function FillRenewalUsers(ByVal dataTable As CornerstoneSQLRenewalQueue.rmUsersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillOLUsers(ByVal dataTable As CornerstoneSQLRenewalQueue.rmUsersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function TransferAssigments(ByVal User2 As String, ByVal User1 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (User2 Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(User2, String)
            End If
            If (User1 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(User1, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class StatesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "States"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("state", "state")
            tableMapping.ColumnMappings.Add("slot1", "slot1")
            tableMapping.ColumnMappings.Add("Phone1", "Phone1")
            tableMapping.ColumnMappings.Add("Phone2", "Phone2")
            tableMapping.ColumnMappings.Add("Phone3", "Phone3")
            tableMapping.ColumnMappings.Add("Phone4", "Phone4")
            tableMapping.ColumnMappings.Add("Phone5", "Phone5")
            tableMapping.ColumnMappings.Add("COAToWhom1", "COAToWhom1")
            tableMapping.ColumnMappings.Add("COAToWhom2", "COAToWhom2")
            tableMapping.ColumnMappings.Add("COAToWhom3", "COAToWhom3")
            tableMapping.ColumnMappings.Add("COAstreet", "COAstreet")
            tableMapping.ColumnMappings.Add("COAcsz", "COAcsz")
            tableMapping.ColumnMappings.Add("LICToWhom1", "LICToWhom1")
            tableMapping.ColumnMappings.Add("LICToWhom2", "LICToWhom2")
            tableMapping.ColumnMappings.Add("LICToWhom3", "LICToWhom3")
            tableMapping.ColumnMappings.Add("LICstreet", "LICstreet")
            tableMapping.ColumnMappings.Add("LICcsz", "LICcsz")
            tableMapping.ColumnMappings.Add("notes", "notes")
            tableMapping.ColumnMappings.Add("COArecordset", "COArecordset")
            tableMapping.ColumnMappings.Add("LICrecordset", "LICrecordset")
            tableMapping.ColumnMappings.Add("LOGSline1", "LOGSline1")
            tableMapping.ColumnMappings.Add("LOGSline2", "LOGSline2")
            tableMapping.ColumnMappings.Add("LOGSline3", "LOGSline3")
            tableMapping.ColumnMappings.Add("LOGSline4", "LOGSline4")
            tableMapping.ColumnMappings.Add("LOGSline5", "LOGSline5")
            tableMapping.ColumnMappings.Add("WebAddress", "WebAddress")
            tableMapping.ColumnMappings.Add("PriorityServiceInfo", "PriorityServiceInfo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[States] WHERE (([ID] = @Original_ID) AND ((@IsNull_state = 1 A" & _
                "ND [state] IS NULL) OR ([state] = @Original_state)) AND ((@IsNull_slot1 = 1 AND " & _
                "[slot1] IS NULL) OR ([slot1] = @Original_slot1)) AND ((@IsNull_Phone1 = 1 AND [P" & _
                "hone1] IS NULL) OR ([Phone1] = @Original_Phone1)) AND ((@IsNull_Phone2 = 1 AND [" & _
                "Phone2] IS NULL) OR ([Phone2] = @Original_Phone2)) AND ((@IsNull_Phone3 = 1 AND " & _
                "[Phone3] IS NULL) OR ([Phone3] = @Original_Phone3)) AND ((@IsNull_Phone4 = 1 AND" & _
                " [Phone4] IS NULL) OR ([Phone4] = @Original_Phone4)) AND ((@IsNull_Phone5 = 1 AN" & _
                "D [Phone5] IS NULL) OR ([Phone5] = @Original_Phone5)) AND ((@IsNull_COAToWhom1 =" & _
                " 1 AND [COAToWhom1] IS NULL) OR ([COAToWhom1] = @Original_COAToWhom1)) AND ((@Is" & _
                "Null_COAToWhom2 = 1 AND [COAToWhom2] IS NULL) OR ([COAToWhom2] = @Original_COATo" & _
                "Whom2)) AND ((@IsNull_COAToWhom3 = 1 AND [COAToWhom3] IS NULL) OR ([COAToWhom3] " & _
                "= @Original_COAToWhom3)) AND ((@IsNull_COAstreet = 1 AND [COAstreet] IS NULL) OR" & _
                " ([COAstreet] = @Original_COAstreet)) AND ((@IsNull_COAcsz = 1 AND [COAcsz] IS N" & _
                "ULL) OR ([COAcsz] = @Original_COAcsz)) AND ((@IsNull_LICToWhom1 = 1 AND [LICToWh" & _
                "om1] IS NULL) OR ([LICToWhom1] = @Original_LICToWhom1)) AND ((@IsNull_LICToWhom2" & _
                " = 1 AND [LICToWhom2] IS NULL) OR ([LICToWhom2] = @Original_LICToWhom2)) AND ((@" & _
                "IsNull_LICToWhom3 = 1 AND [LICToWhom3] IS NULL) OR ([LICToWhom3] = @Original_LIC" & _
                "ToWhom3)) AND ((@IsNull_LICstreet = 1 AND [LICstreet] IS NULL) OR ([LICstreet] =" & _
                " @Original_LICstreet)) AND ((@IsNull_LICcsz = 1 AND [LICcsz] IS NULL) OR ([LICcs" & _
                "z] = @Original_LICcsz)) AND ((@IsNull_COArecordset = 1 AND [COArecordset] IS NUL" & _
                "L) OR ([COArecordset] = @Original_COArecordset)) AND ((@IsNull_LICrecordset = 1 " & _
                "AND [LICrecordset] IS NULL) OR ([LICrecordset] = @Original_LICrecordset)) AND ((" & _
                "@IsNull_LOGSline1 = 1 AND [LOGSline1] IS NULL) OR ([LOGSline1] = @Original_LOGSl" & _
                "ine1)) AND ((@IsNull_LOGSline2 = 1 AND [LOGSline2] IS NULL) OR ([LOGSline2] = @O" & _
                "riginal_LOGSline2)) AND ((@IsNull_LOGSline3 = 1 AND [LOGSline3] IS NULL) OR ([LO" & _
                "GSline3] = @Original_LOGSline3)) AND ((@IsNull_LOGSline4 = 1 AND [LOGSline4] IS " & _
                "NULL) OR ([LOGSline4] = @Original_LOGSline4)) AND ((@IsNull_LOGSline5 = 1 AND [L" & _
                "OGSline5] IS NULL) OR ([LOGSline5] = @Original_LOGSline5)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_state", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "state", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_state", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "state", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_slot1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "slot1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_slot1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "slot1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAToWhom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAToWhom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAToWhom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAstreet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAstreet", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAstreet", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAcsz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAcsz", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAcsz", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICToWhom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICToWhom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICToWhom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICstreet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICstreet", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICstreet", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICcsz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICcsz", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICcsz", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COArecordset", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COArecordset", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COArecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COArecordset", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICrecordset", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICrecordset", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICrecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICrecordset", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[States] ([state], [slot1], [Phone1], [Phone2], [Phone3], [Phon" & _
                "e4], [Phone5], [COAToWhom1], [COAToWhom2], [COAToWhom3], [COAstreet], [COAcsz], " & _
                "[LICToWhom1], [LICToWhom2], [LICToWhom3], [LICstreet], [LICcsz], [notes], [COAre" & _
                "cordset], [LICrecordset], [LOGSline1], [LOGSline2], [LOGSline3], [LOGSline4], [L" & _
                "OGSline5], [WebAddress], [PriorityServiceInfo]) VALUES (@state, @slot1, @Phone1," & _
                " @Phone2, @Phone3, @Phone4, @Phone5, @COAToWhom1, @COAToWhom2, @COAToWhom3, @COA" & _
                "street, @COAcsz, @LICToWhom1, @LICToWhom2, @LICToWhom3, @LICstreet, @LICcsz, @no" & _
                "tes, @COArecordset, @LICrecordset, @LOGSline1, @LOGSline2, @LOGSline3, @LOGSline" & _
                "4, @LOGSline5, @WebAddress, @PriorityServiceInfo);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, state, slot1, Pho" & _
                "ne1, Phone2, Phone3, Phone4, Phone5, COAToWhom1, COAToWhom2, COAToWhom3, COAstre" & _
                "et, COAcsz, LICToWhom1, LICToWhom2, LICToWhom3, LICstreet, LICcsz, notes, COArec" & _
                "ordset, LICrecordset, LOGSline1, LOGSline2, LOGSline3, LOGSline4, LOGSline5, Web" & _
                "Address, PriorityServiceInfo FROM States WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@state", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "state", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@slot1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "slot1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAstreet", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAcsz", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICstreet", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICcsz", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notes", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notes", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COArecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COArecordset", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICrecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICrecordset", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WebAddress", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WebAddress", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PriorityServiceInfo", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PriorityServiceInfo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[States] SET [state] = @state, [slot1] = @slot1, [Phone1] = @Phone1," & _
                " [Phone2] = @Phone2, [Phone3] = @Phone3, [Phone4] = @Phone4, [Phone5] = @Phone5," & _
                " [COAToWhom1] = @COAToWhom1, [COAToWhom2] = @COAToWhom2, [COAToWhom3] = @COAToWh" & _
                "om3, [COAstreet] = @COAstreet, [COAcsz] = @COAcsz, [LICToWhom1] = @LICToWhom1, [" & _
                "LICToWhom2] = @LICToWhom2, [LICToWhom3] = @LICToWhom3, [LICstreet] = @LICstreet," & _
                " [LICcsz] = @LICcsz, [notes] = @notes, [COArecordset] = @COArecordset, [LICrecor" & _
                "dset] = @LICrecordset, [LOGSline1] = @LOGSline1, [LOGSline2] = @LOGSline2, [LOGS" & _
                "line3] = @LOGSline3, [LOGSline4] = @LOGSline4, [LOGSline5] = @LOGSline5, [WebAdd" & _
                "ress] = @WebAddress, [PriorityServiceInfo] = @PriorityServiceInfo WHERE (([ID] =" & _
                " @Original_ID) AND ((@IsNull_state = 1 AND [state] IS NULL) OR ([state] = @Origi" & _
                "nal_state)) AND ((@IsNull_slot1 = 1 AND [slot1] IS NULL) OR ([slot1] = @Original" & _
                "_slot1)) AND ((@IsNull_Phone1 = 1 AND [Phone1] IS NULL) OR ([Phone1] = @Original" & _
                "_Phone1)) AND ((@IsNull_Phone2 = 1 AND [Phone2] IS NULL) OR ([Phone2] = @Origina" & _
                "l_Phone2)) AND ((@IsNull_Phone3 = 1 AND [Phone3] IS NULL) OR ([Phone3] = @Origin" & _
                "al_Phone3)) AND ((@IsNull_Phone4 = 1 AND [Phone4] IS NULL) OR ([Phone4] = @Origi" & _
                "nal_Phone4)) AND ((@IsNull_Phone5 = 1 AND [Phone5] IS NULL) OR ([Phone5] = @Orig" & _
                "inal_Phone5)) AND ((@IsNull_COAToWhom1 = 1 AND [COAToWhom1] IS NULL) OR ([COAToW" & _
                "hom1] = @Original_COAToWhom1)) AND ((@IsNull_COAToWhom2 = 1 AND [COAToWhom2] IS " & _
                "NULL) OR ([COAToWhom2] = @Original_COAToWhom2)) AND ((@IsNull_COAToWhom3 = 1 AND" & _
                " [COAToWhom3] IS NULL) OR ([COAToWhom3] = @Original_COAToWhom3)) AND ((@IsNull_C" & _
                "OAstreet = 1 AND [COAstreet] IS NULL) OR ([COAstreet] = @Original_COAstreet)) AN" & _
                "D ((@IsNull_COAcsz = 1 AND [COAcsz] IS NULL) OR ([COAcsz] = @Original_COAcsz)) A" & _
                "ND ((@IsNull_LICToWhom1 = 1 AND [LICToWhom1] IS NULL) OR ([LICToWhom1] = @Origin" & _
                "al_LICToWhom1)) AND ((@IsNull_LICToWhom2 = 1 AND [LICToWhom2] IS NULL) OR ([LICT" & _
                "oWhom2] = @Original_LICToWhom2)) AND ((@IsNull_LICToWhom3 = 1 AND [LICToWhom3] I" & _
                "S NULL) OR ([LICToWhom3] = @Original_LICToWhom3)) AND ((@IsNull_LICstreet = 1 AN" & _
                "D [LICstreet] IS NULL) OR ([LICstreet] = @Original_LICstreet)) AND ((@IsNull_LIC" & _
                "csz = 1 AND [LICcsz] IS NULL) OR ([LICcsz] = @Original_LICcsz)) AND ((@IsNull_CO" & _
                "Arecordset = 1 AND [COArecordset] IS NULL) OR ([COArecordset] = @Original_COArec" & _
                "ordset)) AND ((@IsNull_LICrecordset = 1 AND [LICrecordset] IS NULL) OR ([LICreco" & _
                "rdset] = @Original_LICrecordset)) AND ((@IsNull_LOGSline1 = 1 AND [LOGSline1] IS" & _
                " NULL) OR ([LOGSline1] = @Original_LOGSline1)) AND ((@IsNull_LOGSline2 = 1 AND [" & _
                "LOGSline2] IS NULL) OR ([LOGSline2] = @Original_LOGSline2)) AND ((@IsNull_LOGSli" & _
                "ne3 = 1 AND [LOGSline3] IS NULL) OR ([LOGSline3] = @Original_LOGSline3)) AND ((@" & _
                "IsNull_LOGSline4 = 1 AND [LOGSline4] IS NULL) OR ([LOGSline4] = @Original_LOGSli" & _
                "ne4)) AND ((@IsNull_LOGSline5 = 1 AND [LOGSline5] IS NULL) OR ([LOGSline5] = @Or" & _
                "iginal_LOGSline5)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, state, slot1, Phone1, Phone2, Phone3, Phone4, P" & _
                "hone5, COAToWhom1, COAToWhom2, COAToWhom3, COAstreet, COAcsz, LICToWhom1, LICToW" & _
                "hom2, LICToWhom3, LICstreet, LICcsz, notes, COArecordset, LICrecordset, LOGSline" & _
                "1, LOGSline2, LOGSline3, LOGSline4, LOGSline5, WebAddress, PriorityServiceInfo F" & _
                "ROM States WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@state", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "state", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@slot1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "slot1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Phone5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAstreet", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COAcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAcsz", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICstreet", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICcsz", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notes", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notes", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COArecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COArecordset", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LICrecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICrecordset", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOGSline5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WebAddress", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WebAddress", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PriorityServiceInfo", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PriorityServiceInfo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_state", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "state", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_state", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "state", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_slot1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "slot1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_slot1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "slot1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Phone5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Phone5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Phone5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAToWhom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAToWhom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAToWhom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAToWhom3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAstreet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAstreet", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAstreet", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COAcsz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAcsz", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COAcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COAcsz", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICToWhom1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICToWhom1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICToWhom2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICToWhom2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICToWhom3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICToWhom3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICToWhom3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICstreet", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICstreet", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICstreet", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICstreet", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICcsz", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICcsz", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICcsz", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICcsz", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COArecordset", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COArecordset", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COArecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COArecordset", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LICrecordset", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICrecordset", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LICrecordset", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LICrecordset", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOGSline5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOGSline5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOGSline5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, state, slot1, Phone1, Phone2, Phone3, Phone4, Phone5, COAToWhom1, COAT" & _
                "oWhom2, COAToWhom3, COAstreet, COAcsz, LICToWhom1, LICToWhom2, LICToWhom3, LICst" & _
                "reet, LICcsz, notes, COArecordset, LICrecordset, LOGSline1, LOGSline2, LOGSline3" & _
                ", LOGSline4, LOGSline5, WebAddress, PriorityServiceInfo FROM dbo.States"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.StatesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.StatesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.StatesDataTable = New CornerstoneSQLRenewalQueue.StatesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.StatesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "States")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_ID As Integer, _
                    ByVal Original_state As String, _
                    ByVal Original_slot1 As String, _
                    ByVal Original_Phone1 As String, _
                    ByVal Original_Phone2 As String, _
                    ByVal Original_Phone3 As String, _
                    ByVal Original_Phone4 As String, _
                    ByVal Original_Phone5 As String, _
                    ByVal Original_COAToWhom1 As String, _
                    ByVal Original_COAToWhom2 As String, _
                    ByVal Original_COAToWhom3 As String, _
                    ByVal Original_COAstreet As String, _
                    ByVal Original_COAcsz As String, _
                    ByVal Original_LICToWhom1 As String, _
                    ByVal Original_LICToWhom2 As String, _
                    ByVal Original_LICToWhom3 As String, _
                    ByVal Original_LICstreet As String, _
                    ByVal Original_LICcsz As String, _
                    ByVal Original_COArecordset As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICrecordset As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LOGSline1 As String, _
                    ByVal Original_LOGSline2 As String, _
                    ByVal Original_LOGSline3 As String, _
                    ByVal Original_LOGSline4 As String, _
                    ByVal Original_LOGSline5 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Integer)
            If (Original_state Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_state, String)
            End If
            If (Original_slot1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_slot1, String)
            End If
            If (Original_Phone1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Phone1, String)
            End If
            If (Original_Phone2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Phone2, String)
            End If
            If (Original_Phone3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Phone3, String)
            End If
            If (Original_Phone4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Phone4, String)
            End If
            If (Original_Phone5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Phone5, String)
            End If
            If (Original_COAToWhom1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_COAToWhom1, String)
            End If
            If (Original_COAToWhom2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_COAToWhom2, String)
            End If
            If (Original_COAToWhom3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_COAToWhom3, String)
            End If
            If (Original_COAstreet Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_COAstreet, String)
            End If
            If (Original_COAcsz Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_COAcsz, String)
            End If
            If (Original_LICToWhom1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_LICToWhom1, String)
            End If
            If (Original_LICToWhom2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_LICToWhom2, String)
            End If
            If (Original_LICToWhom3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_LICToWhom3, String)
            End If
            If (Original_LICstreet Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_LICstreet, String)
            End If
            If (Original_LICcsz Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_LICcsz, String)
            End If
            If (Original_COArecordset.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_COArecordset.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_LICrecordset.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_LICrecordset.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_LOGSline1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_LOGSline1, String)
            End If
            If (Original_LOGSline2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_LOGSline2, String)
            End If
            If (Original_LOGSline3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_LOGSline3, String)
            End If
            If (Original_LOGSline4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_LOGSline4, String)
            End If
            If (Original_LOGSline5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_LOGSline5, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal state As String, _
                    ByVal slot1 As String, _
                    ByVal Phone1 As String, _
                    ByVal Phone2 As String, _
                    ByVal Phone3 As String, _
                    ByVal Phone4 As String, _
                    ByVal Phone5 As String, _
                    ByVal COAToWhom1 As String, _
                    ByVal COAToWhom2 As String, _
                    ByVal COAToWhom3 As String, _
                    ByVal COAstreet As String, _
                    ByVal COAcsz As String, _
                    ByVal LICToWhom1 As String, _
                    ByVal LICToWhom2 As String, _
                    ByVal LICToWhom3 As String, _
                    ByVal LICstreet As String, _
                    ByVal LICcsz As String, _
                    ByVal notes As String, _
                    ByVal COArecordset As Global.System.Nullable(Of Boolean), _
                    ByVal LICrecordset As Global.System.Nullable(Of Boolean), _
                    ByVal LOGSline1 As String, _
                    ByVal LOGSline2 As String, _
                    ByVal LOGSline3 As String, _
                    ByVal LOGSline4 As String, _
                    ByVal LOGSline5 As String, _
                    ByVal WebAddress As String, _
                    ByVal PriorityServiceInfo As String) As Integer
            If (state Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(state, String)
            End If
            If (slot1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(slot1, String)
            End If
            If (Phone1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Phone1, String)
            End If
            If (Phone2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Phone2, String)
            End If
            If (Phone3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Phone3, String)
            End If
            If (Phone4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Phone4, String)
            End If
            If (Phone5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Phone5, String)
            End If
            If (COAToWhom1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COAToWhom1, String)
            End If
            If (COAToWhom2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COAToWhom2, String)
            End If
            If (COAToWhom3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(COAToWhom3, String)
            End If
            If (COAstreet Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(COAstreet, String)
            End If
            If (COAcsz Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(COAcsz, String)
            End If
            If (LICToWhom1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(LICToWhom1, String)
            End If
            If (LICToWhom2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(LICToWhom2, String)
            End If
            If (LICToWhom3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(LICToWhom3, String)
            End If
            If (LICstreet Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(LICstreet, String)
            End If
            If (LICcsz Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(LICcsz, String)
            End If
            If (notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(notes, String)
            End If
            If (COArecordset.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(COArecordset.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (LICrecordset.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(LICrecordset.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LOGSline1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(LOGSline1, String)
            End If
            If (LOGSline2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(LOGSline2, String)
            End If
            If (LOGSline3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(LOGSline3, String)
            End If
            If (LOGSline4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(LOGSline4, String)
            End If
            If (LOGSline5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(LOGSline5, String)
            End If
            If (WebAddress Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(WebAddress, String)
            End If
            If (PriorityServiceInfo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(PriorityServiceInfo, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal state As String, _
                    ByVal slot1 As String, _
                    ByVal Phone1 As String, _
                    ByVal Phone2 As String, _
                    ByVal Phone3 As String, _
                    ByVal Phone4 As String, _
                    ByVal Phone5 As String, _
                    ByVal COAToWhom1 As String, _
                    ByVal COAToWhom2 As String, _
                    ByVal COAToWhom3 As String, _
                    ByVal COAstreet As String, _
                    ByVal COAcsz As String, _
                    ByVal LICToWhom1 As String, _
                    ByVal LICToWhom2 As String, _
                    ByVal LICToWhom3 As String, _
                    ByVal LICstreet As String, _
                    ByVal LICcsz As String, _
                    ByVal notes As String, _
                    ByVal COArecordset As Global.System.Nullable(Of Boolean), _
                    ByVal LICrecordset As Global.System.Nullable(Of Boolean), _
                    ByVal LOGSline1 As String, _
                    ByVal LOGSline2 As String, _
                    ByVal LOGSline3 As String, _
                    ByVal LOGSline4 As String, _
                    ByVal LOGSline5 As String, _
                    ByVal WebAddress As String, _
                    ByVal PriorityServiceInfo As String, _
                    ByVal Original_ID As Integer, _
                    ByVal Original_state As String, _
                    ByVal Original_slot1 As String, _
                    ByVal Original_Phone1 As String, _
                    ByVal Original_Phone2 As String, _
                    ByVal Original_Phone3 As String, _
                    ByVal Original_Phone4 As String, _
                    ByVal Original_Phone5 As String, _
                    ByVal Original_COAToWhom1 As String, _
                    ByVal Original_COAToWhom2 As String, _
                    ByVal Original_COAToWhom3 As String, _
                    ByVal Original_COAstreet As String, _
                    ByVal Original_COAcsz As String, _
                    ByVal Original_LICToWhom1 As String, _
                    ByVal Original_LICToWhom2 As String, _
                    ByVal Original_LICToWhom3 As String, _
                    ByVal Original_LICstreet As String, _
                    ByVal Original_LICcsz As String, _
                    ByVal Original_COArecordset As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICrecordset As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LOGSline1 As String, _
                    ByVal Original_LOGSline2 As String, _
                    ByVal Original_LOGSline3 As String, _
                    ByVal Original_LOGSline4 As String, _
                    ByVal Original_LOGSline5 As String, _
                    ByVal ID As Integer) As Integer
            If (state Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(state, String)
            End If
            If (slot1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(slot1, String)
            End If
            If (Phone1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Phone1, String)
            End If
            If (Phone2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Phone2, String)
            End If
            If (Phone3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Phone3, String)
            End If
            If (Phone4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Phone4, String)
            End If
            If (Phone5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Phone5, String)
            End If
            If (COAToWhom1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COAToWhom1, String)
            End If
            If (COAToWhom2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(COAToWhom2, String)
            End If
            If (COAToWhom3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(COAToWhom3, String)
            End If
            If (COAstreet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(COAstreet, String)
            End If
            If (COAcsz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(COAcsz, String)
            End If
            If (LICToWhom1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(LICToWhom1, String)
            End If
            If (LICToWhom2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(LICToWhom2, String)
            End If
            If (LICToWhom3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(LICToWhom3, String)
            End If
            If (LICstreet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(LICstreet, String)
            End If
            If (LICcsz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(LICcsz, String)
            End If
            If (notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(notes, String)
            End If
            If (COArecordset.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(COArecordset.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (LICrecordset.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LICrecordset.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LOGSline1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(LOGSline1, String)
            End If
            If (LOGSline2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(LOGSline2, String)
            End If
            If (LOGSline3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(LOGSline3, String)
            End If
            If (LOGSline4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(LOGSline4, String)
            End If
            If (LOGSline5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(LOGSline5, String)
            End If
            If (WebAddress Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(WebAddress, String)
            End If
            If (PriorityServiceInfo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(PriorityServiceInfo, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ID, Integer)
            If (Original_state Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_state, String)
            End If
            If (Original_slot1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_slot1, String)
            End If
            If (Original_Phone1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Phone1, String)
            End If
            If (Original_Phone2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Phone2, String)
            End If
            If (Original_Phone3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Phone3, String)
            End If
            If (Original_Phone4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Phone4, String)
            End If
            If (Original_Phone5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Phone5, String)
            End If
            If (Original_COAToWhom1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_COAToWhom1, String)
            End If
            If (Original_COAToWhom2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_COAToWhom2, String)
            End If
            If (Original_COAToWhom3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_COAToWhom3, String)
            End If
            If (Original_COAstreet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_COAstreet, String)
            End If
            If (Original_COAcsz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_COAcsz, String)
            End If
            If (Original_LICToWhom1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_LICToWhom1, String)
            End If
            If (Original_LICToWhom2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_LICToWhom2, String)
            End If
            If (Original_LICToWhom3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_LICToWhom3, String)
            End If
            If (Original_LICstreet Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_LICstreet, String)
            End If
            If (Original_LICcsz Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_LICcsz, String)
            End If
            If (Original_COArecordset.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_COArecordset.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_LICrecordset.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_LICrecordset.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_LOGSline1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_LOGSline1, String)
            End If
            If (Original_LOGSline2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_LOGSline2, String)
            End If
            If (Original_LOGSline3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_LOGSline3, String)
            End If
            If (Original_LOGSline4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_LOGSline4, String)
            End If
            If (Original_LOGSline5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_LOGSline5, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(76).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal state As String, _
                    ByVal slot1 As String, _
                    ByVal Phone1 As String, _
                    ByVal Phone2 As String, _
                    ByVal Phone3 As String, _
                    ByVal Phone4 As String, _
                    ByVal Phone5 As String, _
                    ByVal COAToWhom1 As String, _
                    ByVal COAToWhom2 As String, _
                    ByVal COAToWhom3 As String, _
                    ByVal COAstreet As String, _
                    ByVal COAcsz As String, _
                    ByVal LICToWhom1 As String, _
                    ByVal LICToWhom2 As String, _
                    ByVal LICToWhom3 As String, _
                    ByVal LICstreet As String, _
                    ByVal LICcsz As String, _
                    ByVal notes As String, _
                    ByVal COArecordset As Global.System.Nullable(Of Boolean), _
                    ByVal LICrecordset As Global.System.Nullable(Of Boolean), _
                    ByVal LOGSline1 As String, _
                    ByVal LOGSline2 As String, _
                    ByVal LOGSline3 As String, _
                    ByVal LOGSline4 As String, _
                    ByVal LOGSline5 As String, _
                    ByVal WebAddress As String, _
                    ByVal PriorityServiceInfo As String, _
                    ByVal Original_ID As Integer, _
                    ByVal Original_state As String, _
                    ByVal Original_slot1 As String, _
                    ByVal Original_Phone1 As String, _
                    ByVal Original_Phone2 As String, _
                    ByVal Original_Phone3 As String, _
                    ByVal Original_Phone4 As String, _
                    ByVal Original_Phone5 As String, _
                    ByVal Original_COAToWhom1 As String, _
                    ByVal Original_COAToWhom2 As String, _
                    ByVal Original_COAToWhom3 As String, _
                    ByVal Original_COAstreet As String, _
                    ByVal Original_COAcsz As String, _
                    ByVal Original_LICToWhom1 As String, _
                    ByVal Original_LICToWhom2 As String, _
                    ByVal Original_LICToWhom3 As String, _
                    ByVal Original_LICstreet As String, _
                    ByVal Original_LICcsz As String, _
                    ByVal Original_COArecordset As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LICrecordset As Global.System.Nullable(Of Boolean), _
                    ByVal Original_LOGSline1 As String, _
                    ByVal Original_LOGSline2 As String, _
                    ByVal Original_LOGSline3 As String, _
                    ByVal Original_LOGSline4 As String, _
                    ByVal Original_LOGSline5 As String) As Integer
            Return Me.Update(state, slot1, Phone1, Phone2, Phone3, Phone4, Phone5, COAToWhom1, COAToWhom2, COAToWhom3, COAstreet, COAcsz, LICToWhom1, LICToWhom2, LICToWhom3, LICstreet, LICcsz, notes, COArecordset, LICrecordset, LOGSline1, LOGSline2, LOGSline3, LOGSline4, LOGSline5, WebAddress, PriorityServiceInfo, Original_ID, Original_state, Original_slot1, Original_Phone1, Original_Phone2, Original_Phone3, Original_Phone4, Original_Phone5, Original_COAToWhom1, Original_COAToWhom2, Original_COAToWhom3, Original_COAstreet, Original_COAcsz, Original_LICToWhom1, Original_LICToWhom2, Original_LICToWhom3, Original_LICstreet, Original_LICcsz, Original_COArecordset, Original_LICrecordset, Original_LOGSline1, Original_LOGSline2, Original_LOGSline3, Original_LOGSline4, Original_LOGSline5, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class rmListServiceItemsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rmListServiceItems"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Desc", "Desc")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Duration", "Duration")
            tableMapping.ColumnMappings.Add("FirstReminder", "FirstReminder")
            tableMapping.ColumnMappings.Add("IsRenewalItem", "IsRenewalItem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[rmListServiceItems] WHERE (([ID] = @Original_ID) AND ((@IsNull" & _
                "_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_Cost =" & _
                " 1 AND [Cost] IS NULL) OR ([Cost] = @Original_Cost)) AND ((@IsNull_Duration = 1 " & _
                "AND [Duration] IS NULL) OR ([Duration] = @Original_Duration)) AND ((@IsNull_Firs" & _
                "tReminder = 1 AND [FirstReminder] IS NULL) OR ([FirstReminder] = @Original_First" & _
                "Reminder)) AND ((@IsNull_IsRenewalItem = 1 AND [IsRenewalItem] IS NULL) OR ([IsR" & _
                "enewalItem] = @Original_IsRenewalItem)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Duration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Duration", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Duration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Duration", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstReminder", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstReminder", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstReminder", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstReminder", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsRenewalItem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsRenewalItem", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsRenewalItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsRenewalItem", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[rmListServiceItems] ([Name], [Desc], [Cost], [Duration], [Firs" & _
                "tReminder], [IsRenewalItem]) VALUES (@Name, @Desc, @Cost, @Duration, @FirstRemin" & _
                "der, @IsRenewalItem);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, Name, [Desc], Cost, Duration, FirstReminder, I" & _
                "sRenewalItem FROM rmListServiceItems WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Desc", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Desc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Duration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Duration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstReminder", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstReminder", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsRenewalItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsRenewalItem", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[rmListServiceItems] SET [Name] = @Name, [Desc] = @Desc, [Cost] = @C" & _
                "ost, [Duration] = @Duration, [FirstReminder] = @FirstReminder, [IsRenewalItem] =" & _
                " @IsRenewalItem WHERE (([ID] = @Original_ID) AND ((@IsNull_Name = 1 AND [Name] I" & _
                "S NULL) OR ([Name] = @Original_Name)) AND ((@IsNull_Cost = 1 AND [Cost] IS NULL)" & _
                " OR ([Cost] = @Original_Cost)) AND ((@IsNull_Duration = 1 AND [Duration] IS NULL" & _
                ") OR ([Duration] = @Original_Duration)) AND ((@IsNull_FirstReminder = 1 AND [Fir" & _
                "stReminder] IS NULL) OR ([FirstReminder] = @Original_FirstReminder)) AND ((@IsNu" & _
                "ll_IsRenewalItem = 1 AND [IsRenewalItem] IS NULL) OR ([IsRenewalItem] = @Origina" & _
                "l_IsRenewalItem)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, Name, [Desc], Cost, Duration, FirstReminder, IsR" & _
                "enewalItem FROM rmListServiceItems WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Desc", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Desc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Duration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Duration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstReminder", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstReminder", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsRenewalItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsRenewalItem", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Duration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Duration", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Duration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Duration", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstReminder", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstReminder", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstReminder", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstReminder", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsRenewalItem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsRenewalItem", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsRenewalItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsRenewalItem", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Name, [Desc], Cost, Duration, FirstReminder, IsRenewalItem FROM dbo.rm" & _
                "ListServiceItems"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ' ALL' AS Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT DISTINCT rmListServiceItems.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM  " & _
                "       rmListServiceItems INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      rmServiceItem ON rmL" & _
                "istServiceItems.Name = rmServiceItem.Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmListServiceItems.IsRenew" & _
                "alItem = 0) AND (rmServiceItem.Satisfied = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Name"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ' ALL' as Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT  DISTINCT Name FROM dbo.rmListServiceItems W" & _
                "HERE IsRenewalItem = 1 " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.rmListServiceItemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.rmListServiceItemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.rmListServiceItemsDataTable = New CornerstoneSQLRenewalQueue.rmListServiceItemsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillUniqueOLItems(ByVal dataTable As CornerstoneSQLRenewalQueue.rmListServiceItemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillUniqueRenewalItems(ByVal dataTable As CornerstoneSQLRenewalQueue.rmListServiceItemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.rmListServiceItemsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "rmListServiceItems")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Long, ByVal Original_Name As String, ByVal Original_Cost As Global.System.Nullable(Of Decimal), ByVal Original_Duration As Global.System.Nullable(Of Integer), ByVal Original_FirstReminder As Global.System.Nullable(Of Integer), ByVal Original_IsRenewalItem As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Long)
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Name, String)
            End If
            If (Original_Cost.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Cost.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Duration.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Duration.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstReminder.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FirstReminder.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_IsRenewalItem.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_IsRenewalItem.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal Name As String, ByVal Desc As String, ByVal Cost As Global.System.Nullable(Of Decimal), ByVal Duration As Global.System.Nullable(Of Integer), ByVal FirstReminder As Global.System.Nullable(Of Integer), ByVal IsRenewalItem As Global.System.Nullable(Of Boolean)) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Name, String)
            End If
            If (Desc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Desc, String)
            End If
            If (Cost.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Cost.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Duration.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Duration.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FirstReminder.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FirstReminder.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IsRenewalItem.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IsRenewalItem.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Name As String, ByVal Desc As String, ByVal Cost As Global.System.Nullable(Of Decimal), ByVal Duration As Global.System.Nullable(Of Integer), ByVal FirstReminder As Global.System.Nullable(Of Integer), ByVal IsRenewalItem As Global.System.Nullable(Of Boolean), ByVal Original_ID As Long, ByVal Original_Name As String, ByVal Original_Cost As Global.System.Nullable(Of Decimal), ByVal Original_Duration As Global.System.Nullable(Of Integer), ByVal Original_FirstReminder As Global.System.Nullable(Of Integer), ByVal Original_IsRenewalItem As Global.System.Nullable(Of Boolean), ByVal ID As Integer) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Name, String)
            End If
            If (Desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Desc, String)
            End If
            If (Cost.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Cost.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Duration.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Duration.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FirstReminder.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FirstReminder.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IsRenewalItem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IsRenewalItem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID, Long)
            If (Original_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Name, String)
            End If
            If (Original_Cost.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Cost.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Duration.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Duration.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstReminder.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FirstReminder.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_IsRenewalItem.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_IsRenewalItem.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Name As String, ByVal Desc As String, ByVal Cost As Global.System.Nullable(Of Decimal), ByVal Duration As Global.System.Nullable(Of Integer), ByVal FirstReminder As Global.System.Nullable(Of Integer), ByVal IsRenewalItem As Global.System.Nullable(Of Boolean), ByVal Original_ID As Long, ByVal Original_Name As String, ByVal Original_Cost As Global.System.Nullable(Of Decimal), ByVal Original_Duration As Global.System.Nullable(Of Integer), ByVal Original_FirstReminder As Global.System.Nullable(Of Integer), ByVal Original_IsRenewalItem As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Name, Desc, Cost, Duration, FirstReminder, IsRenewalItem, Original_ID, Original_Name, Original_Cost, Original_Duration, Original_FirstReminder, Original_IsRenewalItem, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ClientProjectItemsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ClientProjectItems"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("DateCreated", "DateCreated")
            tableMapping.ColumnMappings.Add("CustID", "CustID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Desc", "Desc")
            tableMapping.ColumnMappings.Add("DateBegin", "DateBegin")
            tableMapping.ColumnMappings.Add("DateEnd", "DateEnd")
            tableMapping.ColumnMappings.Add("DateRemind", "DateRemind")
            tableMapping.ColumnMappings.Add("Satisfied", "Satisfied")
            tableMapping.ColumnMappings.Add("Cost", "Cost")
            tableMapping.ColumnMappings.Add("Applies", "Applies")
            tableMapping.ColumnMappings.Add("DateRenewal", "DateRenewal")
            tableMapping.ColumnMappings.Add("DateExpiration", "DateExpiration")
            tableMapping.ColumnMappings.Add("CurrentStatus", "CurrentStatus")
            tableMapping.ColumnMappings.Add("CurrentProcess", "CurrentProcess")
            tableMapping.ColumnMappings.Add("IsBondItem", "IsBondItem")
            tableMapping.ColumnMappings.Add("BondNumber", "BondNumber")
            tableMapping.ColumnMappings.Add("BondState", "BondState")
            tableMapping.ColumnMappings.Add("BondAmount", "BondAmount")
            tableMapping.ColumnMappings.Add("BondAgencyName", "BondAgencyName")
            tableMapping.ColumnMappings.Add("AssignedTo", "AssignedTo")
            tableMapping.ColumnMappings.Add("AtClient", "AtClient")
            tableMapping.ColumnMappings.Add("AtState", "AtState")
            tableMapping.ColumnMappings.Add("TenDaySent", "TenDaySent")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [rmServiceItem] WHERE (([ID] = @Original_ID) AND ((@IsNull_DateCreate" & _
                "d = 1 AND [DateCreated] IS NULL) OR ([DateCreated] = @Original_DateCreated)) AND" & _
                " ((@IsNull_CustID = 1 AND [CustID] IS NULL) OR ([CustID] = @Original_CustID)) AN" & _
                "D ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ((@Is" & _
                "Null_DateBegin = 1 AND [DateBegin] IS NULL) OR ([DateBegin] = @Original_DateBegi" & _
                "n)) AND ((@IsNull_DateEnd = 1 AND [DateEnd] IS NULL) OR ([DateEnd] = @Original_D" & _
                "ateEnd)) AND ((@IsNull_DateRemind = 1 AND [DateRemind] IS NULL) OR ([DateRemind]" & _
                " = @Original_DateRemind)) AND ((@IsNull_Satisfied = 1 AND [Satisfied] IS NULL) O" & _
                "R ([Satisfied] = @Original_Satisfied)) AND ((@IsNull_Cost = 1 AND [Cost] IS NULL" & _
                ") OR ([Cost] = @Original_Cost)) AND ((@IsNull_Applies = 1 AND [Applies] IS NULL)" & _
                " OR ([Applies] = @Original_Applies)) AND ((@IsNull_DateRenewal = 1 AND [DateRene" & _
                "wal] IS NULL) OR ([DateRenewal] = @Original_DateRenewal)) AND ((@IsNull_DateExpi" & _
                "ration = 1 AND [DateExpiration] IS NULL) OR ([DateExpiration] = @Original_DateEx" & _
                "piration)) AND ((@IsNull_CurrentProcess = 1 AND [CurrentProcess] IS NULL) OR ([C" & _
                "urrentProcess] = @Original_CurrentProcess)) AND ((@IsNull_IsBondItem = 1 AND [Is" & _
                "BondItem] IS NULL) OR ([IsBondItem] = @Original_IsBondItem)) AND ((@IsNull_BondN" & _
                "umber = 1 AND [BondNumber] IS NULL) OR ([BondNumber] = @Original_BondNumber)) AN" & _
                "D ((@IsNull_BondState = 1 AND [BondState] IS NULL) OR ([BondState] = @Original_B" & _
                "ondState)) AND ((@IsNull_BondAmount = 1 AND [BondAmount] IS NULL) OR ([BondAmoun" & _
                "t] = @Original_BondAmount)) AND ((@IsNull_BondAgencyName = 1 AND [BondAgencyName" & _
                "] IS NULL) OR ([BondAgencyName] = @Original_BondAgencyName)) AND ((@IsNull_Assig" & _
                "nedTo = 1 AND [AssignedTo] IS NULL) OR ([AssignedTo] = @Original_AssignedTo)) AN" & _
                "D ((@IsNull_AtClient = 1 AND [AtClient] IS NULL) OR ([AtClient] = @Original_AtCl" & _
                "ient)) AND ((@IsNull_AtState = 1 AND [AtState] IS NULL) OR ([AtState] = @Origina" & _
                "l_AtState)) AND ((@IsNull_TenDaySent = 1 AND [TenDaySent] IS NULL) OR ([TenDaySe" & _
                "nt] = @Original_TenDaySent)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateCreated", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Name", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateBegin", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateBegin", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateEnd", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateEnd", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRemind", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRemind", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Satisfied", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Satisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Applies", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Applies", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateRenewal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRenewal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExpiration", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExpiration", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CurrentProcess", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CurrentProcess", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsBondItem", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsBondItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondState", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondState", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BondAgencyName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BondAgencyName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssignedTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssignedTo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtClient", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AtState", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AtState", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TenDaySent", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TenDaySent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [rmServiceItem] ([DateCreated], [CustID], [Name], [Desc], [DateBegin]" & _
                ", [DateEnd], [DateRemind], [Satisfied], [Cost], [Applies], [DateRenewal], [DateE" & _
                "xpiration], [CurrentStatus], [CurrentProcess], [IsBondItem], [BondNumber], [Bond" & _
                "State], [BondAmount], [BondAgencyName], [AssignedTo], [AtClient], [AtState], [Te" & _
                "nDaySent]) VALUES (@DateCreated, @CustID, @Name, @Desc, @DateBegin, @DateEnd, @D" & _
                "ateRemind, @Satisfied, @Cost, @Applies, @DateRenewal, @DateExpiration, @CurrentS" & _
                "tatus, @CurrentProcess, @IsBondItem, @BondNumber, @BondState, @BondAmount, @Bond" & _
                "AgencyName, @AssignedTo, @AtClient, @AtState, @TenDaySent);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, DateCrea" & _
                "ted, CustID, Name, [Desc], DateBegin, DateEnd, DateRemind, Satisfied, Cost, Appl" & _
                "ies, DateRenewal, DateExpiration, CurrentStatus, CurrentProcess, IsBondItem, Bon" & _
                "dNumber, BondState, BondAmount, BondAgencyName, AssignedTo, AtClient, AtState, T" & _
                "enDaySent FROM rmServiceItem WHERE (ID = SCOPE_IDENTITY()) ORDER BY Name"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateCreated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateCreated", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Desc", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Desc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateBegin", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateBegin", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateEnd", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateEnd", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRemind", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRemind", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Satisfied", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Satisfied", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cost", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Applies", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Applies", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRenewal", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRenewal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpiration", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpiration", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentStatus", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentStatus", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentProcess", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentProcess", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsBondItem", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsBondItem", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondState", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondState", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondAmount", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAmount", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BondAgencyName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BondAgencyName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedTo", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtClient", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtClient", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AtState", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AtState", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TenDaySent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TenDaySent", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              Name = @Name" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (ID = @Original" & _
                "_ID);  " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, DateCreated, CustID, Name, [Desc], DateBegin, DateEnd, DateR" & _
                "emind, Satisfied, Cost, Applies, DateRenewal, DateExpiration, CurrentStatus, Cur" & _
                "rentProcess, IsBondItem, BondNumber, BondState, BondAmount, BondAgencyName, Assi" & _
                "gnedTo, AtClient, AtState, TenDaySent FROM rmServiceItem WHERE (ID = @ID) ORDER " & _
                "BY Name"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     rmServiceItem.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE custID = @custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "O" & _
                "RDER BY name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CustID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.ClientProjectItemsDataTable, ByVal custID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (custID.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(custID.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData(ByVal custID As Global.System.Nullable(Of Integer)) As CornerstoneSQLRenewalQueue.ClientProjectItemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (custID.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(custID.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As CornerstoneSQLRenewalQueue.ClientProjectItemsDataTable = New CornerstoneSQLRenewalQueue.ClientProjectItemsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.ClientProjectItemsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "ClientProjectItems")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_ID As Long, _
                    ByVal Original_DateCreated As Global.System.Nullable(Of Date), _
                    ByVal Original_CustID As Global.System.Nullable(Of Integer), _
                    ByVal Original_Name As String, _
                    ByVal Original_DateBegin As Global.System.Nullable(Of Date), _
                    ByVal Original_DateEnd As Global.System.Nullable(Of Date), _
                    ByVal Original_DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Original_Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Original_Applies As Global.System.Nullable(Of Boolean), _
                    ByVal Original_DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal Original_DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal Original_CurrentProcess As String, _
                    ByVal Original_IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal Original_BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal Original_BondState As String, _
                    ByVal Original_BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal Original_BondAgencyName As String, _
                    ByVal Original_AssignedTo As String, _
                    ByVal Original_AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal Original_AtState As Global.System.Nullable(Of Boolean), _
                    ByVal Original_TenDaySent As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Long)
            If (Original_DateCreated.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DateCreated.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CustID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CustID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Name, String)
            End If
            If (Original_DateBegin.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DateBegin.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_DateEnd.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DateEnd.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRemind.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DateRemind.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Satisfied.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Satisfied.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Cost.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Cost.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_Applies.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Applies.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_DateRenewal.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_DateRenewal.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_DateExpiration.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_DateExpiration.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_CurrentProcess Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CurrentProcess, String)
            End If
            If (Original_IsBondItem.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IsBondItem.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_BondNumber.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_BondNumber.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_BondState Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_BondState, String)
            End If
            If (Original_BondAmount.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_BondAmount.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_BondAgencyName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_BondAgencyName, String)
            End If
            If (Original_AssignedTo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_AssignedTo, String)
            End If
            If (Original_AtClient.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_AtClient.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_AtState.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_AtState.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_TenDaySent.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_TenDaySent.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal DateCreated As Global.System.Nullable(Of Date), _
                    ByVal CustID As Global.System.Nullable(Of Integer), _
                    ByVal Name As String, _
                    ByVal Desc As String, _
                    ByVal DateBegin As Global.System.Nullable(Of Date), _
                    ByVal DateEnd As Global.System.Nullable(Of Date), _
                    ByVal DateRemind As Global.System.Nullable(Of Date), _
                    ByVal Satisfied As Global.System.Nullable(Of Boolean), _
                    ByVal Cost As Global.System.Nullable(Of Decimal), _
                    ByVal Applies As Global.System.Nullable(Of Boolean), _
                    ByVal DateRenewal As Global.System.Nullable(Of Date), _
                    ByVal DateExpiration As Global.System.Nullable(Of Date), _
                    ByVal CurrentStatus As String, _
                    ByVal CurrentProcess As String, _
                    ByVal IsBondItem As Global.System.Nullable(Of Boolean), _
                    ByVal BondNumber As Global.System.Nullable(Of Integer), _
                    ByVal BondState As String, _
                    ByVal BondAmount As Global.System.Nullable(Of Decimal), _
                    ByVal BondAgencyName As String, _
                    ByVal AssignedTo As String, _
                    ByVal AtClient As Global.System.Nullable(Of Boolean), _
                    ByVal AtState As Global.System.Nullable(Of Boolean), _
                    ByVal TenDaySent As Global.System.Nullable(Of Boolean)) As Integer
            If (DateCreated.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DateCreated.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CustID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CustID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Name, String)
            End If
            If (Desc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Desc, String)
            End If
            If (DateBegin.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DateBegin.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateEnd.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DateEnd.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DateRemind.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DateRemind.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Satisfied.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Satisfied.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Cost.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Cost.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Applies.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Applies.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DateRenewal.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DateRenewal.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DateExpiration.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DateExpiration.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CurrentStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CurrentStatus, String)
            End If
            If (CurrentProcess Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CurrentProcess, String)
            End If
            If (IsBondItem.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(IsBondItem.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (BondNumber.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(BondNumber.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (BondState Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(BondState, String)
            End If
            If (BondAmount.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(BondAmount.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BondAgencyName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(BondAgencyName, String)
            End If
            If (AssignedTo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(AssignedTo, String)
            End If
            If (AtClient.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AtClient.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AtState.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(AtState.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (TenDaySent.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(TenDaySent.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Name As String, ByVal Original_ID As Integer, ByVal ID As Integer) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Name, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_ID, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RenewalQueueTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RenewalQueue"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("QueueName", "QueueName")
            tableMapping.ColumnMappings.Add("SQLstmt", "SQLstmt")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RenewalQueue] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RenewalQueue] ([QueueName], [SQLstmt], [Description]) VALUES (@Queue" & _
                "Name, @SQLstmt, @Description);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, QueueName, SQLstmt, Description FROM " & _
                "RenewalQueue WHERE (ID = SCOPE_IDENTITY()) ORDER BY QueueName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QueueName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SQLstmt", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SQLstmt", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [RenewalQueue] SET [QueueName] = @QueueName, [SQLstmt] = @SQLstmt, [Descri" & _
                "ption] = @Description WHERE (([ID] = @Original_ID));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, QueueName, SQLs" & _
                "tmt, Description FROM RenewalQueue WHERE (ID = @ID) ORDER BY QueueName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QueueName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SQLstmt", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SQLstmt", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ID, QueueName, SQLstmt, Description" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalQueue" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER " & _
                "BY QueueName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT QueueName, SQLstmt FROM RenewalQueue UNION SELECT ' ' AS QueueName, '' AS " & _
                "SQLstmt UNION SELECT '<Edit Queues>' AS QueueName, 'EDIT' AS SQLstmt"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalQueueDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.RenewalQueueDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.RenewalQueueDataTable = New CornerstoneSQLRenewalQueue.RenewalQueueDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillAddSpaceandEdit(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalQueueDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalQueueDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "RenewalQueue")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal QueueName As String, ByVal SQLstmt As String, ByVal Description As String) As Integer
            If (QueueName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(QueueName, String)
            End If
            If (SQLstmt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SQLstmt, String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Description, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal QueueName As String, ByVal SQLstmt As String, ByVal Description As String, ByVal Original_ID As Integer, ByVal ID As Integer) As Integer
            If (QueueName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(QueueName, String)
            End If
            If (SQLstmt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SQLstmt, String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Description, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal QueueName As String, ByVal SQLstmt As String, ByVal Description As String, ByVal Original_ID As Integer) As Integer
            Return Me.Update(QueueName, SQLstmt, Description, Original_ID, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RenewalFeesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RenewalFees"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("custID", "custID")
            tableMapping.ColumnMappings.Add("AnnualRenewalFee", "AnnualRenewalFee")
            tableMapping.ColumnMappings.Add("bizname", "bizname")
            tableMapping.ColumnMappings.Add("Assignee", "Assignee")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RenewalFees] WHERE (([ID] = @Original_ID) AND ((@IsNull_custID = 1 A" & _
                "ND [custID] IS NULL) OR ([custID] = @Original_custID)) AND ((@IsNull_AnnualRenew" & _
                "alFee = 1 AND [AnnualRenewalFee] IS NULL) OR ([AnnualRenewalFee] = @Original_Ann" & _
                "ualRenewalFee)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AnnualRenewalFee", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnnualRenewalFee", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AnnualRenewalFee", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnnualRenewalFee", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RenewalFees] ([custID], [AnnualRenewalFee]) VALUES (@custID, @Annual" & _
                "RenewalFee);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, custID, AnnualRenewalFee FROM RenewalFees WHERE (ID = S" & _
                "COPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnnualRenewalFee", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnnualRenewalFee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE       RenewalFees" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET                AnnualRenewalFee = @AnnualRenewalFee" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (ID = @Original_ID);  " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, custID, AnnualRenewalFee FROM " & _
                "RenewalFees WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnnualRenewalFee", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "AnnualRenewalFee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     RenewalFees.ID, RenewalFees.custID, RenewalFees.AnnualRenewalFee, Comp" & _
                "any.bizname, RenewalAssignees.Assignee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalFees INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   " & _
                "                   RenewalAssignees ON RenewalFees.custID = RenewalAssignees.cus" & _
                "tID FULL OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON RenewalFees.custID = Compa" & _
                "ny.custID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO RenewalFees" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      (custID)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT     custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM " & _
                "        Company" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (custID NOT IN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          (SELECT    " & _
                " custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                            FROM          RenewalFees AS RenewalFees_1)" & _
                ");          " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, custID, AnnualRenewalFee FROM RenewalFees WHERE (ID = S" & _
                "COPE_IDENTITY())"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     RenewalFees.ID, Company.custID, RenewalFees.AnnualRenewalFee, Company." & _
                "bizname, RenewalAssignees.Assignee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalFees INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "       " & _
                "               RenewalAssignees ON RenewalFees.custID = RenewalAssignees.custID " & _
                "FULL OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON RenewalFees.custID = Company.c" & _
                "ustID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (Company.HasAuditProblem = 1) AND (Company.IsArchived = 0) AND " & _
                "(RenewalFees.AnnualRenewalFee >= 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Company.bizname"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     RenewalFees.ID, Company.custID, RenewalFees.AnnualRenewalFee, Company." & _
                "bizname, RenewalAssignees.Assignee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalFees INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "       " & _
                "               RenewalAssignees ON RenewalFees.custID = RenewalAssignees.custID " & _
                "FULL OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON RenewalFees.custID = Company.c" & _
                "ustID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (Company.HasAuditProblem = 1) AND (Company.IsArchived = 0)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORD" & _
                "ER BY Company.bizname"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     AnnualRenewalFee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalFees" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE custID = @theCustID"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theCustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalFeesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.RenewalFeesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.RenewalFeesDataTable = New CornerstoneSQLRenewalQueue.RenewalFeesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByRenewalCustomers(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalFeesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy1() As CornerstoneSQLRenewalQueue.RenewalFeesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As CornerstoneSQLRenewalQueue.RenewalFeesDataTable = New CornerstoneSQLRenewalQueue.RenewalFeesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByRenewalCustomersIncludingNegativeFees(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalFeesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy3() As CornerstoneSQLRenewalQueue.RenewalFeesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As CornerstoneSQLRenewalQueue.RenewalFeesDataTable = New CornerstoneSQLRenewalQueue.RenewalFeesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalFeesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "RenewalFees")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Integer, ByVal Original_custID As Global.System.Nullable(Of Integer), ByVal Original_AnnualRenewalFee As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Integer)
            If (Original_custID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_custID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_AnnualRenewalFee.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_AnnualRenewalFee.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal custID As Global.System.Nullable(Of Integer), ByVal AnnualRenewalFee As Global.System.Nullable(Of Integer)) As Integer
            If (custID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(custID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (AnnualRenewalFee.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AnnualRenewalFee.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal AnnualRenewalFee As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer, ByVal ID As Integer) As Integer
            If (AnnualRenewalFee.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(AnnualRenewalFee.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_ID, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _
        Public Overridable Overloads Function AddMissingRenewalFeeRows() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetRenewalFeeForCompany(ByVal theCustID As Global.System.Nullable(Of Integer)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (theCustID.HasValue = True) Then
                command.Parameters(0).Value = CType(theCustID.Value, Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SIAuditTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SIAudit"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SIid", "SIid")
            tableMapping.ColumnMappings.Add("DateAC", "DateAC")
            tableMapping.ColumnMappings.Add("DateUC", "DateUC")
            tableMapping.ColumnMappings.Add("DateAS", "DateAS")
            tableMapping.ColumnMappings.Add("DateSat", "DateSat")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SIAudit] WHERE (([ID] = @Original_ID) AND ([SIid] = @Original_SIid) " & _
                "AND ((@IsNull_DateAC = 1 AND [DateAC] IS NULL) OR ([DateAC] = @Original_DateAC))" & _
                " AND ((@IsNull_DateUC = 1 AND [DateUC] IS NULL) OR ([DateUC] = @Original_DateUC)" & _
                ") AND ((@IsNull_DateAS = 1 AND [DateAS] IS NULL) OR ([DateAS] = @Original_DateAS" & _
                ")) AND ((@IsNull_DateSat = 1 AND [DateSat] IS NULL) OR ([DateSat] = @Original_Da" & _
                "teSat)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateUC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateSat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SIAudit] ([SIid], [DateAC], [DateUC], [DateAS], [DateSat]) VALUES (@" & _
                "SIid, @DateAC, @DateUC, @DateAS, @DateSat);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, SIid, DateAC, DateUC, Da" & _
                "teAS, DateSat FROM SIAudit WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SIAudit] SET [SIid] = @SIid, [DateAC] = @DateAC, [DateUC] = @DateUC, [Dat" & _
                "eAS] = @DateAS, [DateSat] = @DateSat WHERE (([ID] = @Original_ID) AND ([SIid] = " & _
                "@Original_SIid) AND ((@IsNull_DateAC = 1 AND [DateAC] IS NULL) OR ([DateAC] = @O" & _
                "riginal_DateAC)) AND ((@IsNull_DateUC = 1 AND [DateUC] IS NULL) OR ([DateUC] = @" & _
                "Original_DateUC)) AND ((@IsNull_DateAS = 1 AND [DateAS] IS NULL) OR ([DateAS] = " & _
                "@Original_DateAS)) AND ((@IsNull_DateSat = 1 AND [DateSat] IS NULL) OR ([DateSat" & _
                "] = @Original_DateSat)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, SIid, DateAC, DateUC, DateAS, DateSat FROM" & _
                " SIAudit WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SIid", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIid", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateUC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateUC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateUC", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateAS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateAS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAS", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateSat", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateSat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateSat", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLUpsizeConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     SIAudit.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         SIAudit"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.SIAuditDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.SIAuditDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.SIAuditDataTable = New CornerstoneSQLRenewalQueue.SIAuditDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.SIAuditDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "SIAudit")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Long, ByVal Original_SIid As Integer, ByVal Original_DateAC As Global.System.Nullable(Of Date), ByVal Original_DateUC As Global.System.Nullable(Of Date), ByVal Original_DateAS As Global.System.Nullable(Of Date), ByVal Original_DateSat As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SIid, Integer)
            If (Original_DateAC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DateAC.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_DateUC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DateUC.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_DateAS.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DateAS.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_DateSat.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_DateSat.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SIid As Integer, ByVal DateAC As Global.System.Nullable(Of Date), ByVal DateUC As Global.System.Nullable(Of Date), ByVal DateAS As Global.System.Nullable(Of Date), ByVal DateSat As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SIid, Integer)
            If (DateAC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateAC.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateUC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateUC.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DateAS.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DateAS.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DateSat.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DateSat.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SIid As Integer, ByVal DateAC As Global.System.Nullable(Of Date), ByVal DateUC As Global.System.Nullable(Of Date), ByVal DateAS As Global.System.Nullable(Of Date), ByVal DateSat As Global.System.Nullable(Of Date), ByVal Original_ID As Long, ByVal Original_SIid As Integer, ByVal Original_DateAC As Global.System.Nullable(Of Date), ByVal Original_DateUC As Global.System.Nullable(Of Date), ByVal Original_DateAS As Global.System.Nullable(Of Date), ByVal Original_DateSat As Global.System.Nullable(Of Date), ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SIid, Integer)
            If (DateAC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateAC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateUC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateUC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DateAS.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DateAS.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DateSat.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DateSat.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID, Long)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SIid, Integer)
            If (Original_DateAC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DateAC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_DateUC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DateUC.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DateAS.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DateAS.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_DateSat.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DateSat.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SIid As Integer, ByVal DateAC As Global.System.Nullable(Of Date), ByVal DateUC As Global.System.Nullable(Of Date), ByVal DateAS As Global.System.Nullable(Of Date), ByVal DateSat As Global.System.Nullable(Of Date), ByVal Original_ID As Long, ByVal Original_SIid As Integer, ByVal Original_DateAC As Global.System.Nullable(Of Date), ByVal Original_DateUC As Global.System.Nullable(Of Date), ByVal Original_DateAS As Global.System.Nullable(Of Date), ByVal Original_DateSat As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(SIid, DateAC, DateUC, DateAS, DateSat, Original_ID, Original_SIid, Original_DateAC, Original_DateUC, Original_DateAS, Original_DateSat, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RenewalQueueHistoryTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RenewalQueueHistory"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("QueueID", "QueueID")
            tableMapping.ColumnMappings.Add("DateRan", "DateRan")
            tableMapping.ColumnMappings.Add("TheCount", "TheCount")
            tableMapping.ColumnMappings.Add("QueueName", "QueueName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RenewalQueueHistory] WHERE (([ID] = @Original_ID) AND ([QueueI" & _
                "D] = @Original_QueueID) AND ([DateRan] = @Original_DateRan) AND ([TheCount] = @O" & _
                "riginal_TheCount) AND ((@IsNull_QueueName = 1 AND [QueueName] IS NULL) OR ([Queu" & _
                "eName] = @Original_QueueName)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QueueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRan", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRan", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TheCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TheCount", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QueueName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QueueName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RenewalQueueHistory] ([QueueID], [DateRan], [TheCount], [Queue" & _
                "Name]) VALUES (@QueueID, @DateRan, @TheCount, @QueueName);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, QueueID, " & _
                "DateRan, TheCount, QueueName FROM RenewalQueueHistory WHERE (ID = SCOPE_IDENTITY" & _
                "())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QueueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRan", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRan", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TheCount", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QueueName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RenewalQueueHistory] SET [QueueID] = @QueueID, [DateRan] = @DateRan" & _
                ", [TheCount] = @TheCount, [QueueName] = @QueueName WHERE (([ID] = @Original_ID) " & _
                "AND ([QueueID] = @Original_QueueID) AND ([DateRan] = @Original_DateRan) AND ([Th" & _
                "eCount] = @Original_TheCount) AND ((@IsNull_QueueName = 1 AND [QueueName] IS NUL" & _
                "L) OR ([QueueName] = @Original_QueueName)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, QueueID, DateRan, TheCo" & _
                "unt, QueueName FROM RenewalQueueHistory WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QueueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRan", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRan", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TheCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TheCount", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QueueName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QueueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateRan", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRan", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TheCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TheCount", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QueueName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QueueName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QueueName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLTake2ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, QueueID, DateRan, TheCount, QueueName FROM dbo.RenewalQueueHistory"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalQueueHistoryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.RenewalQueueHistoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.RenewalQueueHistoryDataTable = New CornerstoneSQLRenewalQueue.RenewalQueueHistoryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalQueueHistoryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "RenewalQueueHistory")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Long, ByVal Original_QueueID As Integer, ByVal Original_DateRan As Date, ByVal Original_TheCount As Integer, ByVal Original_QueueName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_QueueID, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DateRan, Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TheCount, Integer)
            If (Original_QueueName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_QueueName, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal QueueID As Integer, ByVal DateRan As Date, ByVal TheCount As Integer, ByVal QueueName As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(QueueID, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateRan, Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(TheCount, Integer)
            If (QueueName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(QueueName, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal QueueID As Integer, ByVal DateRan As Date, ByVal TheCount As Integer, ByVal QueueName As String, ByVal Original_ID As Long, ByVal Original_QueueID As Integer, ByVal Original_DateRan As Date, ByVal Original_TheCount As Integer, ByVal Original_QueueName As String, ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(QueueID, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateRan, Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TheCount, Integer)
            If (QueueName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(QueueName, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID, Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_QueueID, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_DateRan, Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TheCount, Integer)
            If (Original_QueueName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_QueueName, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal QueueID As Integer, ByVal DateRan As Date, ByVal TheCount As Integer, ByVal QueueName As String, ByVal Original_ID As Long, ByVal Original_QueueID As Integer, ByVal Original_DateRan As Date, ByVal Original_TheCount As Integer, ByVal Original_QueueName As String) As Integer
            Return Me.Update(QueueID, DateRan, TheCount, QueueName, Original_ID, Original_QueueID, Original_DateRan, Original_TheCount, Original_QueueName, Original_ID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RenewalAssigneesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RenewalAssignees"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("custID", "custID")
            tableMapping.ColumnMappings.Add("Assignee", "Assignee")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [RenewalAssignees] WHERE (([ID] = @Original_ID) AND ([custID] = @Orig" & _
                "inal_custID) AND ((@IsNull_Assignee = 1 AND [Assignee] IS NULL) OR ([Assignee] =" & _
                " @Original_Assignee)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Assignee", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Assignee", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [RenewalAssignees] ([custID], [Assignee]) VALUES (@custID, @Assignee)" & _
                ";" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, custID, Assignee FROM RenewalAssignees WHERE (ID = SCOPE_IDENTITY(" & _
                "))"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@custID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Assignee", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    RenewalAssignees" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              Assignee = @Assignee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (cus" & _
                "tID = @Original_custID); " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, custID, Assignee FROM RenewalAssignees WHE" & _
                "RE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Assignee", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_custID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CompassAutomator.My.MySettings.Default.CornerstoneSQLTake2ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     RenewalAssignees.*" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalAssignees"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO RenewalAssignees" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (custID)" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        cu" & _
                "stID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            Company" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (custID NOT IN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                    " & _
                "         (SELECT        custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                               FROM            R" & _
                "enewalAssignees AS ASRenewalAssignees_1))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     RenewalAssignees.Assignee, Company.bizname, RenewalFees.AnnualRenewalF" & _
                "ee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalAssignees INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON R" & _
                "enewalAssignees.custID = Company.custID INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Renewa" & _
                "lFees ON Company.custID = RenewalFees.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (RenewalAssignees.Assign" & _
                "ee = @theRenewalAssignee) AND Company.HasAuditProblem = 1 AND Company.IsARchived" & _
                " = 0 AND RenewalFees.AnnualRenewalFee > 0 " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Company.bizname"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theRenewalAssignee", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT DISTINCT Assignee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         RenewalAssignees" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "ORDER BY Assignee"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     SUM(RenewalFees.AnnualRenewalFee) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         Company INNER" & _
                " JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      RenewalAssignees ON Company.custID = RenewalAssigne" & _
                "es.custID INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      RenewalFees ON Company.custID = Rene" & _
                "walFees.custID  AND Company.isArchived = 0" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND RenewalFees.AnnualRenewalFee > 0" & _
                ""
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     SUM(RenewalFees.AnnualRenewalFee) AS Expr1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         Company INNER" & _
                " JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      RenewalAssignees ON Company.custID = RenewalAssigne" & _
                "es.custID INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      RenewalFees ON Company.custID = Rene" & _
                "walFees.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (RenewalAssignees.Assignee = @theAssignee)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT        COUNT(*) AS theCount" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   " & _
                "                      rmListServiceItems ON rmServiceItem.Name = rmListServiceIt" & _
                "ems.Name INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Company ON rmServiceItem.CustID = " & _
                "Company.custID INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         RenewalAssignees ON Company." & _
                "custID = RenewalAssignees.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (rmListServiceItems.IsRenewalItem" & _
                " = 1) AND (rmServiceItem.Satisfied = 0) AND (Company.IsArchived = 0) AND (Compan" & _
                "y.HasAuditProblem = 1) AND " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (RenewalAssignees.Assignee" & _
                " LIKE @theAssignee) AND (rmServiceItem.DateExpiration < CONVERT(DATETIME, '2160-" & _
                "01-01 00:00:00', 102))"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@theAssignee", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     COUNT(*) as theCount" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         rmServiceItem INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "         " & _
                "             rmListServiceItems ON rmServiceItem.Name = rmListServiceItems.Name " & _
                "INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      Company ON rmServiceItem.CustID = Company.cust" & _
                "ID INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      RenewalAssignees ON Company.custID = Renewa" & _
                "lAssignees.custID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (rmListServiceItems.IsRenewalItem = 1) AND (rmServi" & _
                "ceItem.Satisfied = 0) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "AND  (rmServiceItem.DateExpiration > CONVERT(DATETIME, '" & _
                "1970-01-01 00:00:00', 102) AND " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         rmServiceItem.DateExpi" & _
                "ration < CONVERT(DATETIME, '2060-01-01 00:00:00', 102))"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "UPDATE    RenewalAssignees" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SET              Assignee = @Assignee" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE     (cus" & _
                "tID =  @thecustID)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Assignee", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Assignee", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@thecustID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "custID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable = New CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function GetCompanyandRenewalFeesBYAssignee(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable, ByVal theRenewalAssignee As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (theRenewalAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theRenewalAssignee, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataBy2(ByVal theRenewalAssignee As String) As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (theRenewalAssignee Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(theRenewalAssignee, String)
            End If
            Dim dataTable As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable = New CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function GetRenewalAssignees(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As CornerstoneSQLRenewalQueue.RenewalAssigneesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As CornerstoneSQLRenewalQueue) As Integer
            Return Me.Adapter.Update(dataSet, "RenewalAssignees")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As Integer, ByVal Original_custID As Global.System.Nullable(Of Integer), ByVal Original_Assignee As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, Integer)
            If (Original_custID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_custID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_Assignee Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Assignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal custID As Global.System.Nullable(Of Integer), ByVal Assignee As String) As Integer
            If (custID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(custID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Assignee Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Assignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Assignee As String, ByVal Original_custID As Global.System.Nullable(Of Integer), ByVal ID As Integer) As Integer
            If (Assignee Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Assignee, String)
            End If
            If (Original_custID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_custID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function AddMissingRenewalAssignees() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetRenewalContractTotalForAll() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue, Integer))
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetRenewalContractTotalsByAssignee(ByVal theAssignee As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            If (theAssignee Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetTotalNumberofRenewalItemsByAssignee(ByVal theAssignee As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            If (theAssignee Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(theAssignee, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue, Integer))
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function GetTotalNumberofRenewalItemsForAll() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue, Integer))
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _
        Public Overridable Overloads Function UpdateAssignee(ByVal Assignee As String, ByVal thecustID As Global.System.Nullable(Of Integer)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            If (Assignee Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Assignee, String)
            End If
            If (thecustID.HasValue = True) Then
                command.Parameters(1).Value = CType(thecustID.Value, Integer)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            Return returnValue
        End Function
    End Class
End Namespace
